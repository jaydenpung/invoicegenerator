<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapfor.Net</name>
    </assembly>
    <members>
        <member name="T:Dapfor.Net.Ui.Grid">
            <summary>
            A hierarchical event-driven .Net control with ultimate performance.
            </summary>
            <remarks>
            <para>Originally the grid was designed for electronic financial markets with their stringent requirements to robustness, low consumption of memory and CPU resources, ergonomic and simple user interface and rich API. These requirements have a common objective - to gain the first place on the market, to improve development time and to keep productive work in the run-time. As the result, we create the most productive and robust hierarchical grid with one of the best object models. It can be used in a great variety of applications (not just for financial markets). It makes software user-friendly, reduces CPU and memory consumption and considerably accelerates development time with multiple services included in the grid and RAD (rapid application development) patterns.</para>
             <para><br/><b>Working modes</b><br/>
            .Net Grid supports various working modes that that enable its use in various types of applications
            <list type="bullet">
            <item>Non-event model supporting insertion of data of different types (user defined classes, IEnumerable&lt;T&gt;, IList&lt;T&gt;, IDictionary&lt;string, object&gt; etc.) into any level of grid hierarchy. The grid provides Grid.Rows.Add(object) and Row.Add(object) methods to work in this mode.</item>
            <item>Event-driven mode is used when a programmer uses objects that implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. We recommend to get acquainted with this mode and use it everywhere. It will enable you to eliminate all dependencies between business logic layer and the <see cref="N:System.Windows.Forms"/>, as well as Dapfor assemblies.</item>
            <item>Data binding mode is used to connect to data sources via <see cref="P:Dapfor.Net.Ui.Grid.DataSource"/>/<see cref="P:Dapfor.Net.Ui.Grid.DataMember"/> properties. Supported data sources: <see cref="T:System.Collections.IList"/>, <see cref="T:System.ComponentModel.IListSource"/>, <see cref="T:System.ComponentModel.IBindingList"/>.</item>
            </list>
            </para>
            <para>
            <para><br/><b>Data types</b><br/>
            Such broad functionality of the .Net Grid is possible due to the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface that is one of the most crucial part of the grid. The main purpose of this interface is to normalize presentation of different data types in the grid. There are lots of implementations of <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface. This way, a programmer can add his own implementation to broaden the list of data types that can be used by the .Net Grid. When you call <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)"/>, an implementation of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface is created implicitly for 'your object' and the .Net Grid works with it only via the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> proxy, making no difference between the data types.</para>
            
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
                
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        price = value;
                        if(PropertyChanged != null)
                        {
                            PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                        }
                    }
                }
                public DateTime Maturity
                {
                    get { return maturity; }
                }
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Using sample
            public void AddDataObjectToGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Maturity"));
                
                //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                Product product = new Product();
                grid.Rows.Add(product);
            
                //Add a collection of values to the grid.
                //Because of this collection implements IList, it will be implicitly wrapped by the ListDataAccessor
                grid.Rows.Add(new double[] {123, 12, 45});
            
                //The object will notify the grid through the INotifyPropertyChanged, and the grid will automatically
                //invalidate, sort, filter and highlight the affected cells.
                product.Price = 12.34;
            }
            </code>
            </para>
            <para><br/><b>Hierarchy</b><br/>
            <para>.Net Grid allows to present data both in tabular format and in hierarchical form. A data hierarchy may have one or more headers. Working with a 
            single header is similar to <see cref="T:System.Windows.Forms.TreeView"/> control with multiple columns (a classic example is file explorer). Multiple headers enable separate column management for 
            each hierarchical level. At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means 
            that the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting</para>
            <para>Data can be added into the data grid via <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)"/> method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type, which contains 
            information about a data object, its location, hierarchy in the data grid, color, etc. To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)"/> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. 
            This way a programmer can build almost any data hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by 
            <see cref="P:Dapfor.Net.Ui.Header.Level"/> and <see cref="P:Dapfor.Net.Ui.Row.Level"/> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that 
            level doesn't have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave 
            like Microsoft Windows Explorer.</para>
            <para>When multiple headers are used, those that have level greater than 0 will be displayed in the grid above the first visible row on the same hierarchy level. A header can be hidden/shown via the <see cref="P:Dapfor.Net.Ui.Header.Visible"/> property.</para>
            <code>
            public void PopulateGrid(Grid grid)
            {
                //Add some data objects
                Row product1 = grid.Rows.Add(new Product());
                Row product2 = grid.Rows.Add(new Product());
                
                //Add some customers to the first product
                product1.Add(new Customer());
                product1.Add(new Customer());
                //Add some customers to the another product
                product2.Add(new Customer());
            }
            </code>
            </para>
            
            <para><br/><b>Grouping</b><br/>
            <para>.Net Grid enables multiple data grouping in headers of the .Net Grid by any columns at any hierarchical level. 
            When data is grouped by a specific column, .Net Grid searches all rows within a group that has similar values. 
            When a group is organized, a row that doesn't contain a data object is added to the data grid. The <b>Row.IsGroup</b> property 
            of such row will always return true, and <b>Row["column id"].Value</b> will return a value by which data is grouped. 
            All rows with values that meet grouping conditions are attached to the newly created group. Before a new data object is added, .Net Grid 
            verifies whether there is any group with the required value on the current hierarchical level. If there is no such group, a new group is created. 
            When the <b>Row.Update()</b> method is invoked, the grid checks whether a row conforms to group value. 
            If there are no more rows in the group, the group is removed from the grid.</para>
            
            <para>In programming the grouping feature can be enabled via the <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property. Sequential invocation of this property for several columns results in 
            data grouping of these columns. The column with grouping remains visible unless <see cref="P:Dapfor.Net.Ui.Column.Visible">Column.Visible</see> property is set to false. 
            Sorting (and multiple sorting) can be enabled or disabled for grouped columns because sorting and grouping are completely independent processes. The list of grouped 
            columns can be viewed with <see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> collection property. A user can also group columns in the data grid. 
            To use this ability the user just needs to drag a column to a special panel on the grid's header. However, this is not possible if height of this panel is set to 0.</para>
            
            <para>Real-time grouping in non event-driven model is done with <see cref="M:Dapfor.Net.Ui.Row.Update"/> method. In the event-driven model <see cref="M:Dapfor.Net.Ui.Row.Update"/> method is 
            called every time when a data object sends a notification. Once again we'd like to emphasize the importance of such model as it removes dependency of the 
            business layer on <see cref="N:System.Windows.Forms"/> controls and on Dapfor assemblies as well.</para>
            </para>
            
            
            <para><br/><b>Formats</b><br/>
            <para>A very important feature in .Net Grid its ability to work directly with application business logic. Business logic is a set of classes that may have certain 
            properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling <see cref="M:System.Object.ToString"/> or <see cref="M:System.String.Format(System.String,System.Object)"/>. 
            However, this approach is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to 
            convert values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a 
            value equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. 
            For application programming it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc:
            <code>
            public class Product
            {
                private double price;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                }
            }
            </code>
            </item>
            <item>In a column: Column.Format = 'your format';</item>
            <item>Directly in a <see cref="T:Dapfor.Net.Ui.Cell"/> (this method requires a lot of memory): Cell.Format = 'your format';</item>
            </list>
            </para>
            <para>The .Net Grid looks for IFofmat object to format values or parse strings in the following order:
            <list type="bullet">
            <item>In a <see cref="T:Dapfor.Net.Ui.Cell"/></item>
            <item>In a <see cref="T:Dapfor.Net.Ui.Column"/> returned by the <see cref="P:Dapfor.Net.Ui.Cell.Column"/> property</item>
            <item>In a <see cref="T:Dapfor.Net.Data.IDataField"/> object, returned by the <see cref="P:Dapfor.Net.Ui.Cell.DataField"/> property.</item>
            <item>If the format is still not found, the grid uses default format for the specified object type.</item>
            </list>
            </para>
            <para>Some formats greatly simplify application development. For example, <see cref="T:Dapfor.Net.Formats.StringFormat"/>, enables use of standard patterns for formatting values through <see cref="M:System.String.Format(System.String,System.Object)"/>:
            <code>
            column.Format = new StringFormat("### ### ### ###", string.Empty, " $");
            //The value 12345 will be displayed in cells as "12 345 $"
            </code>
            </para>
            <para>.NET Framework has similar system of type conversion based on the <see cref="T:System.ComponentModel.TypeConverter"/> class that enables conversion of values to 
            strings and vice versa. This conversion system is more complete, but a little bit cumbersome in the context of formating and data parsing. Althrough converters 
            are bulky, such approach enables development of a business logic independently from data presentation. In a perfect case all these mechanisms can be completely based 
            on Microsoft's component model and therefore have no physical dependencies on libraries of other vendors and on the Dapfor libraries as well.
            <code>
            class SomeClass
            {
                private int intValue;
            
                [TypeConverter(typeof(HexTypeConverter))]
                int SomeHexdecimalValue
                {
                    get { return intValue;  }
                    set { intValue = value; }
                }
            }
            </code>
            </para>
            </para>
            
            <para><br/><b>Editors</b><br/>
            <para>.Net Grid supports multiple ways of cell editing. When we were developing this mechanism, we based it on standard editors used in the <see cref="T:System.Windows.Forms.PropertyGrid"/> control. 
            There are several types of these editors including controls that can be displayed in a dropdown box or as a modal dialog. Such editors enable users to edit text, 
            colors and enumerations and to perform painting in small rectangles inside cells. There are plenty of predefined editors. For example, you can get the color editor as follows:
            <code>
            UITypeEditor editor = (UITypeEditor)TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor));
            </code>
            </para>
            <para>To edit values, these editors use the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. Within this method a mandatory control is created and 
            placed in the dropdown box. You should note a very important detail' the return from the function <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> occurs 
            only when editing within in the control is completed, which is convenient from the programmer's point of view. Look at this example: 
            <code>
            object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
            {
                IWindowsFormsEditorService service = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
                using (SomeControl control = new SomeControl(value))
                {
                    service.DropDownControl(control);
                    value = control.NewValue;
                }
                return value;
            }
            </code>
            </para>
            <para>The .Net Grid fully supports this mechanism and editors of other vendors that can be used in your applications.</para>
            <para>Despite the convenience of this interface, we have concluded that it lacks some functionality. These editors can't be created above the edited cell with its size 
            (for example, slider control). Besides that, they can't be painted in the whole cell ' just in a small rectangular area. To remediate this, 
            we have created <see cref="T:Dapfor.Net.Editors.UITypeEditorEx"/> ' a class, derived from <see cref="T:System.Drawing.Design.UITypeEditor"/> that allows to create controls directly above a cell. 
            The process of editing is quite similar to the aforementioned code example: 
            <code>
            StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
            {
                using (SomeControl control = new SomeControl(cell))
                {
                    return service.CellEditControl(control, cell.VirtualBounds, reason);
                }
            }
            </code>
            </para>
            <para>Besides, some editors can be used without creating graphic controls, i.e. a rating editor. It simply draws stars, and when the user clicks on a certain star, this control calculates its relative location and sets a new value. The whole editing code will look as follows:
            <code>
            StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
            {    
                //compute a new rating
                cell.Value = rating ;
                return StopEditReason.UserStop ;
            }
            </code>
            </para>
            </para>
            
            <para><br/><b>Real-time sorting</b><br/>
            <para>.Net Grid enables multiple row sorting upon data changes in real-time, taking into account sorting direction, grouping rules and data hierarchy.</para>
            <para>On programming side it can be done via <see cref="P:Dapfor.Net.Ui.Column.SortDirection"/> property. This property sets the sorting direction or turns it off. 
            When you sequentially set this property for several columns, you enable multiple sorting in the data grid. Every column that is involved in the sorting 
            has its own zero-based level. Information about all sorted columns can be retrieved via <see cref="P:Dapfor.Net.Ui.Header.SortedColumns"/> property. It's important to mention that column 
            visibility doesn't affect data sorting. It means that rows will be sorted without regard to column visibility or to whether column is grouped or not.</para>
            <para>Without sorting, all grid rows are automatically indexed thereby increasing grid performance. When sorting is used for some columns, all data is sorted in ordered 
            sequence according to sorting rules and data hierarchy. This way, when you add new data into the data grid, it is automatically added to the right 
            position according to the above rules. When you call <see cref="M:Dapfor.Net.Ui.Row.Update"/> method, the .Net Grid searches a new position for the row and moves it to the right 
            position. When you use an event-driven model (i.e. when you use the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface implementation), <see cref="M:Dapfor.Net.Ui.Row.Update"/> 
            method is invoked systematically. In other words, when sorting is enabled, the .Net Grid constantly stores data in ordered sequence. In addition to 
            that, the .Net Grid properly processes data changes in several rows including processing of separate threads. You won't find some kind of Sort() method in 
            the .Net Grid, because the data is always in the ordered sequence.</para>
            </para>
            
            <para><br/><b>Real-time data filtration</b><br/>
            <para>Simply put, data filtration is managing visibility of rows in the grid. Row invisibility in the grid means that the row is still in the grid, but it is invisible 
            together with its children. It's important to say that this row can be accessed only via <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>/<see cref="P:Dapfor.Net.Ui.Row.Children"/> collection properties. 
            In the <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> property invisible rows are absent, as it shows only visible rows. Filtration is particularly important when data is grouped. 
            If there are no visible rows, the whole group becomes invisible (but is not removed!). If a filtered row should be made visible again, it takes 
            certain position according to the sorting rules if any.</para>
            <para>.Net Grid presents 3 ways of data filtration: 
            <list type="bullet">
            <item>Setting boolean in the <see cref="P:Dapfor.Net.Ui.Row.Filtered"/> property</item>
            <item>Implementing the <see cref="T:Dapfor.Net.Ui.IFilter"/> interface and setting it with the <see cref="P:Dapfor.Net.Ui.Grid.Filter"/> property</item>
            <item>Filters in columns</item>
            </list>
            </para>
            <para>The first way is the easiest to use, however, we recommend you to favor the second one that provides definite advantages.</para>
            <para>The <see cref="T:Dapfor.Net.Ui.IFilter"/> interface has only one property ' <see cref="M:Dapfor.Net.Ui.IFilter.IsFiltered(Dapfor.Net.Ui.Row)"/>. This method is invoked when data is inserted into the data grid. 
            It is also invoked every time <see cref="M:Dapfor.Net.Ui.Row.Update"/> and <see cref="M:Dapfor.Net.Ui.Grid.FilterRefresh"/> methods are called. Therefore, grid rows always meed the filtration criteria. 
            However, when <see cref="T:Dapfor.Net.Ui.IFilter"/> interface is not implemented, the invocation of <see cref="M:Dapfor.Net.Ui.Row.Update"/> doesn't result in data filtration and newly added data is 
            always visible in the grid until the <see cref="P:Dapfor.Net.Ui.Row.Filtered"/> call. Besides, when filtering conditions are changed, invocation of <see cref="M:Dapfor.Net.Ui.Grid.FilterRefresh"/> 
            doesn't make the row visible ' the programmer should iterate through every row in the data grid via <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/> and <see cref="P:Dapfor.Net.Ui.Row.Children"/> collections 
            to verify new conditions. There is an important thing to add regarding multi-threaded applications. Invocation of <see cref="M:Dapfor.Net.Ui.IFilter.IsFiltered(Dapfor.Net.Ui.Row)"/> method occurs 
            regularly in the GUI thread, and it should be considered during development of multi-threaded applications. Please note that <see cref="M:Dapfor.Net.Ui.Row.Update"/> method is 
            thread-safe and can be invoked in any thread.</para>
            <para>Data filtration implemented via IFilter interface of non-event-driven model consists in the Row.Update() method call:
            <code>
            public class CustomFilter : IFilter
            {
                public bool IsFiltered(Row row)
                {
                    //There are three ways to get cell's value: 
                    //1. Via Cell.Value property: double value = (double)row["Price"].Value
                    //2. Via IDataAccessor and IDataField: double value = (double) row.DataAccessor["Price"].Value
                    //3. Directly from the data object: double value = (double)((IList)row.DataObject)[2];
            
                    if ((double)row["Price"].Value &lt; 30000)
                    {
                        //Filter the row
                        return true;
                    }
            
                    //The row is not filtered
                    return false;
                }
            
                public event EventHandler&lt;EventArgs&gt; FilterUpdated;
            }
            
            public void FilterUsing(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
                grid.Headers[0].Add(new Column("Color"));
                grid.Headers[0].Add(new Column("Price"));
            
                //Set filter
                grid.Filter = new CustomFilter();
            
                //Populate the grid
                Row row1 = grid.Rows.Add(new object[] { "Mercedes", Color.Black, 25000d});
                Assert.IsFalse(row1.Visible);
            
                Row row2 = grid.Rows.Add(new object[] { "BMW", Color.White, 35000d });
                Assert.IsTrue(row2.Visible);
            
                //Set a new price for "Mercedes"
                row1["Price"].Value = 32000d;
                Assert.IsTrue(row1.Visible);
            }
            </code>
            </para>
            
            
            </para>
            
            <para><br/><b>Cell highlighting</b><br/>
            <para>.Net Grid provides an extremely convenient mechanism of data highlighting. Highlighting is the process of changing background color of a cell for a specified time 
            interval and gradual restoration of the initial color afterwards. Background color of a cell can be changed twice (at the beginning and at the end) or with a little 
            periodicity (about 30 ms)enabling fading effect with gradual transition between the highlight color and the original background color of the cell.</para>
            
            <para>In programming cell highlighting can be achieved by calling <see cref="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)"/>. When a programmer calls this method, the grid adds specific information 
            about cell's state into an internal container and launches timers when necessary. The second parameter is the color that may contain alpha-channel enabling mixing of 
            the highlight color and the background color (transparency effect). It's important to mention that the .Net Grid has a very easy to use API that saves programmer's time. 
            Highlighting management and initial parameters are accessible via <see cref="P:Dapfor.Net.Ui.Grid.Highlighting"/> property.
            </para>
            
            </para>
            
            <para><br/><b>Customization and painting</b><br/>
            <para>.Net Grid provides broad functionality of displaying various data grid elements, such as cells, rows, headers and columns. There two ways for data grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via Appearance property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance"/>, <see cref="P:Dapfor.Net.Ui.Header.Appearance"/>, <see cref="P:Dapfor.Net.Ui.Column.Appearance"/>, <see cref="P:Dapfor.Net.Ui.Row.Appearance"/>, <see cref="P:Dapfor.Net.Ui.Cell.Appearance"/>. 
            All information about colors, fonts etc. is stored in memory. Therefore setting of this property is more suitable for <see cref="T:Dapfor.Net.Ui.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. 
            A programmer should not use this property on Rows and Cells, as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell"/>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow"/>, <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader"/> etc.</item>
            </list>
            </para>
            <para>The PaintXXXEventArgs contains the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter ' <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a data grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in <b>PaintXXXEventArgs</b> and consists of the following: a data grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires Paint event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is used to paint all elements 
            of the .Net Grid ' cells, rows, columns, headers, hierarchy tree etc.</para>
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of data grid customization. In other words, you may customize 
            any parameters, some painted elements (cell, column) and even use <see cref="T:System.Drawing.Graphics"/> object to manipulate the data grid. Even better, this approach enables you 
            to define a painting sequence. For example, you may perform some default actions and then finish drawing with the Graphics object, or do it vice versa!</para>
            </para>
            
            <para><br/><b>Invalidation</b><br/>
            <para>It is well known that <see cref="N:System.Windows.Forms"/> controls use standard Windows API based on window messages. To repaint a certain part of a control, 
            it should invoke the <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)"/> method, where Rectangle specifies location and size of the client surface that should be repainted. 
            In general, the calculation of screen coordinates of an element is a quite complicated process, especially in a hierarchical data grid. The .Net Grid provides 
            very convenient API to repaint different elements such as cells, rows, columns etc.</para>
            <para>Below you may see a list of elements that can be repainted in the grid:</para>
            <list type="bullet">
            <item><see cref="M:Dapfor.Net.Ui.Cell.Invalidate"/> to repaint of a single cell.</item>
            <item><see cref="M:Dapfor.Net.Ui.Row.Invalidate"/> to repaint of a single row.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.Invalidate"/> to repaint a header. If the header is located in the hierarchical grid (not top-level header), all duplicates in visible surface are repainted.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.InvalidateRows"/> to repaint all rows in the grid on the same hierarchical level as the header.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.Invalidate"/> to repaint a column title.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.InvalidateCells"/> to repaint of all cells in the grid that are related to a certain column located on the same hierarchical level as a header.</item>
            </list>
            </para>
            
            <para><br/><b>Tooltips</b><br/>
            <para>Displaying auxiliary information above a grid cell is a typical task. In the .Net Grid this process is considerably simplified. 
            To display a tooltip is is sufficient to set text calling <see cref="P:Dapfor.Net.Ui.Cell.TooltipMessage">Cell.TooltipMessage</see><b> = "some text"</b>. Color management, 
            display time and tooltip location can be set with <see cref="P:Dapfor.Net.Ui.Grid.Tooltips">Grid.Tooltips</see> property. The programmer can control tooltips via .Net Grid notifications.</para>
            </para>
            
            	
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnParentRightToLeftChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged"/> event when the <see cref="P:System.Windows.Forms.Control.RightToLeft"/> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowAppearanceChanged(Dapfor.Net.Ui.Row)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Row"/>'s appearance is changed.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowHeightChanged(Dapfor.Net.Ui.Row)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Row"/>'s height is changed.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowVisibilityChanged(Dapfor.Net.Ui.Row)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Row"/> becomes visible or invisible.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowExpansionChanging(Dapfor.Net.Ui.Row,System.Boolean)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Row"/> is expanding or collapsing.
            </summary>
            <param name="row">The row.</param>
            <param name="newValue">New value, indicating whether the row should be expanded.</param>
            <returns>
            Value, indicating if the operation should be cancelled
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowExpansionChanged(Dapfor.Net.Ui.Row)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Row"/> is expanded or collapsed.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnSelectionChanged(Dapfor.Net.Ui.Row)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Row"/>'s selection is changed.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnSelectionChanging(Dapfor.Net.Ui.Row,System.Boolean)">
            <summary>
            Called before the <see cref="T:Dapfor.Net.Ui.Row"/>'s selection is changed.
            </summary>
            <param name="row">The row.</param>
            <param name="newState">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Ui.Row"/> will be selected.</param>
            <returns><c>true</c> if the <see cref="T:Dapfor.Net.Ui.Row"/> should be selected, Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowAdded(Dapfor.Net.Ui.Row)">
            <summary>
            Called when a new <see cref="T:Dapfor.Net.Ui.Row"/> is added to the grid.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowAdding(Dapfor.Net.Ui.Row,System.Object@,Dapfor.Net.Ui.InsertionType@)">
            <summary>
            Called when a new row is adding.
            </summary>
            <param name="parentRow">The parent row.</param>
            <param name="dataObject">The data object.</param>
            <param name="insertionType">Insertion type.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowRemoving(Dapfor.Net.Ui.Row)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Row"/> is removing from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowRemoved(Dapfor.Net.Ui.Row)">
            <summary>
            Called after the <see cref="T:Dapfor.Net.Ui.Row"/> has been removed from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowMoved(Dapfor.Net.Ui.Row)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Row"/> is moved.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnRowUpdated(Dapfor.Net.Ui.Row,Dapfor.Net.Data.IDataField)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Data.IDataField"/> of <see cref="T:Dapfor.Net.Ui.Row"/> is updated.
            </summary>
            <param name="row">The row.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellClicking(Dapfor.Net.Ui.Cell)">
            <summary>
            Called when the end-user clicking on the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellClicked(Dapfor.Net.Ui.Cell)">
            <summary>
            Called when the end-user has clicked on the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellEnter(Dapfor.Net.Ui.Cell)">
            <summary>
            Called when the mouse pointer enters the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellLeave(Dapfor.Net.Ui.Cell)">
            <summary>
            Called when the mouse pointer leaves the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellAppearanceChanged(Dapfor.Net.Ui.Cell)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Cell"/>'s appearance is changed.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellImageChanged(Dapfor.Net.Ui.Cell)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Cell"/>'s image is changed.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellFormatChanged(Dapfor.Net.Ui.Cell)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Cell"/>'s <see cref="T:Dapfor.Net.Formats.IFormat"/> is changed.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellBeginEdit(Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StartEditReason,System.Drawing.Design.UITypeEditor,System.Drawing.Point)">
            <summary>
            Called when the user starts edit a <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="cell">The cell.</param>
            <param name="reason">The reason.</param>
            <param name="editor">The editor.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellEditor(Dapfor.Net.Ui.Cell,System.Drawing.Design.UITypeEditor,System.Boolean@)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Grid"/> needs to know whether the <see cref="T:Dapfor.Net.Ui.Cell"/> is editable.
            </summary>
            <param name="cell">The cell.</param>
            <param name="editor">The editor.</param>
            <param name="editable">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Ui.Cell"/> is editable.</param>
            <returns>
            Editor, needed to edit the <see cref="T:Dapfor.Net.Ui.Cell"/>
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnCellEndEdit(Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StopEditReason,System.Drawing.Design.UITypeEditor)">
            <summary>
            Called when finishes edit a <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="cell">The cell.</param>
            <param name="reason">The reason.</param>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnHeaderAdded(Dapfor.Net.Ui.Header)">
            <summary>
            Called when a header is added to the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnHeaderRemoving(Dapfor.Net.Ui.Header)">
            <summary>
            Called when a header is removing from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnHeaderRemoved(Dapfor.Net.Ui.Header)">
            <summary>
            Called when a header has been removed from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnHeaderVisibilityChanged(Dapfor.Net.Ui.Header)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Header"/> becomes visible or invisible.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnHeaderHeightChanged(Dapfor.Net.Ui.Header)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Header"/>'s height is changed.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnGroupingChanged(Dapfor.Net.Ui.Header)">
            <summary>
            Called when <see cref="T:Dapfor.Net.Ui.Column"/>s are regrouped in the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnColumnAdded(Dapfor.Net.Ui.Column)">
            <summary>
            Called when a new <see cref="T:Dapfor.Net.Ui.Column"/> is added to the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnColumnRemoving(Dapfor.Net.Ui.Column)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Column"/> is removing from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnColumnRemoved(Dapfor.Net.Ui.Column)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Column"/> has been removed from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnColumnAppearanceChanged(Dapfor.Net.Ui.Column)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Column"/>'s appearance is changed.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnColumnWidthChanged(Dapfor.Net.Ui.Column)">
            <summary>
            Called when the <see cref="T:Dapfor.Net.Ui.Column"/>'s width is changed.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnColumnVisibilityChanged(Dapfor.Net.Ui.Column)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Column"/> becomes visible or invisible.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnColumnMoving(Dapfor.Net.Ui.Column)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Column"/> is moving.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnColumnMoved(Dapfor.Net.Ui.Column)">
            <summary>
            Called when a <see cref="T:Dapfor.Net.Ui.Column"/> has been moved.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnFocusedColumnChanged(Dapfor.Net.Ui.Column,Dapfor.Net.Ui.Column)">
            <summary>
            Called when the focused column is changed.
            </summary>
            <param name="prevFocusedColumn">The previously focused column.</param>
            <param name="newFocusedColumn">The newly focused column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnSortChanged">
            <summary>
            Called when a sort in the <see cref="T:Dapfor.Net.Ui.Grid"/> is changed.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnMeasureCellWidth(Dapfor.Net.Ui.MeasureCellWidthEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.MeasureCellWidth"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.MeasureCellWidthEventArgs"/> instance containing the event data.</param>
            <example>
            <code>
            grid.MeasureCellWidth += delegate(object sender, MeasureCellWidthEventArgs e)
            {
                //Add extra width to be taken into account when adjusting columns.
                e.TotalWidth += 30;
            };
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnLassoSelectionBegin(Dapfor.Net.Ui.LassoSelectionEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.LassoSelectionBegin"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.LassoSelectionEventArgs"/> contains contains the size of the selection,
            as well as <see cref="P:Dapfor.Net.Ui.LassoSelectionEventArgs.Handled">LassoSelectionEventArgs.Handled</see> variable. The programmer can set this variable
            to <c>true</c> to cancel the lasso selection.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnLassoSelection(Dapfor.Net.Ui.LassoSelectionEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.LassoSelection"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.LassoSelectionEventArgs"/> contains contains the size of the selection,
            as well as <see cref="P:Dapfor.Net.Ui.LassoSelectionEventArgs.Handled">LassoSelectionEventArgs.Handled</see> variable. The programmer can set this variable
            to <c>true</c> to prevent rows from selection changing.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnLassoSelectionEnd(Dapfor.Net.Ui.LassoSelectionEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.LassoSelectionEnd"/> event.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPrevEditableCell(Dapfor.Net.Ui.GridEditableCellEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.PrevEditableCell"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.GridEditableCellEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnNextEditableCell(Dapfor.Net.Ui.GridEditableCellEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.NextEditableCell"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.GridEditableCellEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.#ctor(Dapfor.Net.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid"/> class.
            </summary>
            <param name="dispatcher">The dispatcher specifying a threading model.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnLocationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnParentVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"/> event when the <see cref="P:System.Windows.Forms.Control.Visible"/> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event datae.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.BeginUpdate">
            <summary>
            Prevents the grid control from being updated until the <see cref="M:Dapfor.Net.Ui.Grid.EndUpdate"/> method is called. 
            </summary>
            <remarks>
            The <see cref="M:Dapfor.Net.Ui.Grid.BeginUpdate"/> and <see cref="M:Dapfor.Net.Ui.Grid.EndUpdate"/> methods can be used to prevent excessive visual updates. 
            After the <see cref="M:Dapfor.Net.Ui.Grid.BeginUpdate"/> method has been called, the vertical scroll bar is locked, and grid doesn't reflect row count changing. 
            Calling the <see cref="M:Dapfor.Net.Ui.Grid.EndUpdate"/> method unlocks and redraws the vertical scrollbar. 
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.EndUpdate">
            <summary>
            Unlocks the grid after the <see cref="M:Dapfor.Net.Ui.Grid.BeginUpdate"/> method call and causes an immediate update of the vertical scroll bar. 
            </summary>
            <remarks>
            The <see cref="M:Dapfor.Net.Ui.Grid.BeginUpdate"/> and <see cref="M:Dapfor.Net.Ui.Grid.EndUpdate"/> methods can be used to prevent excessive visual updates. 
            After the <see cref="M:Dapfor.Net.Ui.Grid.BeginUpdate"/> method has been called, the vertical scroll bar is locked, and grid doesn't reflect row count changing. 
            Calling the <see cref="M:Dapfor.Net.Ui.Grid.EndUpdate"/> method unlocks and redraws the vertical scrollbar. 
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.FilterRefresh">
            <summary>
            Forces the <see cref="T:Dapfor.Net.Ui.Grid"/> re-check all <see cref="T:Dapfor.Net.Ui.Row"/>s for filtering. Usually called when the filter conditions in <see cref="T:Dapfor.Net.Ui.IFilter"/> interface changed.
            </summary>
            <threadsafety>This method may be called from any thread. If it is called from the non-GUI thread, then the <see cref="T:Dapfor.Net.Ui.Grid"/> will synchronize 
            the calling thread with the GUI thread in the asynchronous way without blocking the calling thread. </threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnResize(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Resize"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>
            true if the specified key is a regular input key; otherwise, false.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.StopEdit">
            <summary>
            Stops cell editing
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnValidateCell(Dapfor.Net.Ui.ValidateCellEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.ValidateCell"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.ValidateCellEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPrintPage(Dapfor.Net.Ui.PrintGridPageEventArgs)">
            <summary>
            Raises the <see cref="E:PrintPage"/> event.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PrintGridPageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when the background of the <see cref="T:Dapfor.Net.Ui.Grid"/> should be painted.
            </summary>
            <param name="args">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintRectangle(Dapfor.Net.Ui.PaintRectangleEventArgs)">
            <summary>
            Called when some bounds in the client area of the <see cref="T:Dapfor.Net.Ui.Grid"/> should be painted.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintRectangleEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintGroupPanel(Dapfor.Net.Ui.PaintGroupPanelEventArgs)">
            <summary>
            Called to repaint the the group panel.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintGroupPanelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintColumnPanel(Dapfor.Net.Ui.PaintColumnPanelEventArgs)">
            <summary>
            Called to repaint the the column panel.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintColumnPanelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintColumnCaption(Dapfor.Net.Ui.PaintColumnCaptionEventArgs)">
            <summary>
            Called to repaint the the <see cref="T:Dapfor.Net.Ui.Column"/> caption.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintColumnCaptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintMergedColumn(Dapfor.Net.Ui.PaintMergedColumnEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.PaintMergedColumn"/> event.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintMergedColumnEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintRow(Dapfor.Net.Ui.PaintRowEventArgs)">
            <summary>
            Called to repaint the the <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintRowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintGroupRow(Dapfor.Net.Ui.PaintGroupRowEventArgs)">
            <summary>
            Called to repaint the the group <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintGroupRowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintCell(Dapfor.Net.Ui.PaintCellEventArgs)">
            <summary>
            Called to repaint the the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintCellEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnPaintHierarchy(Dapfor.Net.Ui.PaintHierarchyEventArgs)">
            <summary>
            Called to repaint the the hierarchical lines and expansion (+/-) buttons.
            </summary>
            <param name="args">The <see cref="T:Dapfor.Net.Ui.PaintHierarchyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Dapfor.Net.Ui.Grid.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.HitTest(System.Drawing.Point)">
            <summary>
            Gets elements by their location inside the grid.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <remarks>
            The grid has a convenient system of getting elements by their location inside the grid. This is done with <see cref="M:Dapfor.Net.Ui.Grid.HitTest(System.Drawing.Point)">Grid.HitTest()</see> 
            method that returns type of element in specified position. To get the element itself you can use one of <see cref="P:Dapfor.Net.Ui.Grid.HitTests">Grid.HitTests</see> methods 
            that return element pointers. We tried to create an API to avoid unnecessary type casting. An example of its use is provided below. 
            <code>
            public void HitTestExample(Grid grid)
            {
                //Get the current cursor position
                Point position = System.Windows.Forms.Cursor.Position;
            
                //Get position in the client coordinates
                position = grid.PointToClient(position);
            
                //Get a part of the grid, the cursor points to.
                HitTestInfo info = grid.HitTest(position);
            
                //Try get a header, the cursor points to.
                Header header = grid.HitTests.HeaderTest(position);
            
                //Try get a row, the cursor points to.
                Row row = grid.HitTests.RowTest(position);
            
                //Try get a cell, the cursor points to.
                Cell cell = grid.HitTests.CellTest(position);
            
                //Try get a column, the cursor points to.
                Column column = grid.HitTests.ColumnTest(position);
            
                //Do something...
            }
            </code>
            </remarks> 
            <seealso cref="P:Dapfor.Net.Ui.Grid.HitTests"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragBegin(Dapfor.Net.Ui.DragContentBeginEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.DragBegin"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.DragContentBeginEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragEnd(Dapfor.Net.Ui.DragContentEndEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.DragEnd"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.DragContentEndEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragEnterContent(Dapfor.Net.Ui.DragContentEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.DragContentEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragOverContent(Dapfor.Net.Ui.DragContentEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.DragOverContent"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.DragContentEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragDropContent(Dapfor.Net.Ui.DragDropContentEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.Grid.DragDropContent"/> event.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.DragDropContentEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragOver"/> event.
            </summary>
            <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragEnter"/> event.
            </summary>
            <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragLeave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragDrop"/> event.
            </summary>
            <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.OnAppearanceChanged">
            <summary>
            Called when the <see cref="P:Dapfor.Net.Ui.Grid.Appearance"/> is changed.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.Scroll">
            <summary>
            Occurs when vertical or horizontal scroll is changed.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowAppearanceChanged">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Row"/>'s appearance is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Appearance"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowHeightChanged">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Row"/>'s height is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Height"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowVisibilityChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Ui.Row"/> becomes visible or invisible.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Visible"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowExpansionChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Ui.Row"/> is expanded or collapsed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Expanded"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.ExpandAll"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.CollapseAll"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowExpansionChanging">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Ui.Row"/> is expanding or collapsing.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Expanded"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.ExpandAll"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.CollapseAll"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.SelectionChanging">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Row"/>'s selection is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Selected"/>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Selection"/>
            <example>
            <code>
            grid.SelectionChanging += delegate(object sender, GridRowSelectionEventArgs e)
            {
                //The first row will always be selected
                if(e.Row.VisibleIndex == 0)
                {
                    e.NewSelectionState = true;
                }
            
                //The second row will always be unselected
                if (e.Row.VisibleIndex == 1)
                {
                    e.NewSelectionState = false;
                }
            };
            </code>
            </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.SelectionChanged">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Row"/>'s selection is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Selected"/>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Selection"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowAdded">
            <summary>
            Occurs when a new <see cref="T:Dapfor.Net.Ui.Row"/> is added to the grid.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <summary>
            Provides information on the <see cref="T:Dapfor.Net.Ui.Row"/> of the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <example>
            <code>
            public void InitializeGrid(Grid grid)
            {
                grid.RowAdded += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} has been added on the {1} hierarchical level", e.Row.VisibleIndex, e.Row.Level);
                };
            
                grid.RowMoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been moved to {0} position", e.Row.VisibleIndex);
                };
            
                grid.RowRemoving += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} is removing from the grid", e.Row.VisibleIndex);
                };
            
                grid.RowRemoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been removed from the grid");
                };
            
                //Add header and some columns
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Quantity"));
                grid.Headers.Add(new Header());
            
                //Add 3 row on the top hierarchical level (level 0)
                Row row1 = grid.Rows.Add(new Product());
                Row row2 = grid.Rows.Add(new Product());
                Row row3 =grid.Rows.Add(new Product());
                grid.Rows.ExpandAll();
            
                //Add a data object on the 1st level as subitem of the row1
                row1.Add(new Product());
            
                //Add some data objects on the 1st level as subitems of the row2
                row2.Add(new Product());
                row2.Add(new Product());
            
                //Move the row between row1 and row2. (The grid has only 3 rows on the top level!)
                row3.VisibleChildIndex = 1;
            
                //Remove child of row2
                grid.Rows.Remove(row2.Children[1]);
            }
            
            //Console output:
            The row 0 has been added on the 0 hierarchical level
            The row 1 has been added on the 0 hierarchical level
            The row 2 has been added on the 0 hierarchical level
            The row 1 has been added on the 1 hierarchical level
            The row 3 has been added on the 1 hierarchical level
            The row 4 has been added on the 1 hierarchical level
            The row has been moved to 2 position
            The row 5 is removing from the grid
            The row has been removed from the grid
            </code>
            </example>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Rows"/>
            <seealso cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.Add(System.Object)"/>
            <seealso cref="P:Dapfor.Net.Ui.Grid.DataSource"/>
            <seealso cref="E:Dapfor.Net.Ui.Grid.RowRemoving"/>
            <seealso cref="E:Dapfor.Net.Ui.Grid.RowRemoved"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowAdding">
             <summary>
             Occurs when a new data object is adding to grid.
             </summary>
             <remarks>
             <para>Conditional binding is one of the most powerful and convenient types of binding. It is an API provided by the grid that enables the programmer to specify 
             insertion method when a data object is added to the grid. The API is implemented as an event that is called when data is added to the grid.</para>
             <para>This event contains a reference to the added object, a parent row if any and insertion method for this object. Below is the list of possible actions upon 
             data insertion to the grid:
             <list type="bullet">
             <item><b>AsChild</b> - regular method of data object insertion to parent. A programmer may replace the inserted object with any other object on his own discretion.</item>
             <item><b>AsCollection</b> - a programmer may replace a data object with any collection that shall be added instead of the specified object.</item>
             <item><b>AsChildAndCollection</b> - the grid adds a data object and a new collection. The data object is added to the specified parent as with AsChild, and the collection is added on the next hierarchy level to the data object that has just been added.</item>
             <item><b>Skip</b> - the data object is not added to the grid.</item>
             </list>
             </para>
             <para>It is important to note that if a collection implements <see cref="T:System.ComponentModel.IBindingList"/> interface, the grid subscribes to events of this collection 
             and inserts or modifies data on corresponding hierarchy level of the grid. All binding list operations are thread safe.</para>
             </remarks>
             <example>
             <code>
             //Basket class
             public class Basket 
             {
                 //Private fields
                 private readonly BindingList&lt;Order&gt; _orders = new BindingList&lt;Order&gt;();
             
                 //Public properties    
                 public IList&lt;Order&gt; Orders
                 {
                     get { return _orders; }
                 }
             }
            
             //Initialize the grid
             public void InitializeGrid(Grid grid, IList&lt;Basket&gt; baskets)
             {
                 grid.RowAdding += OnGridRowAdding;
            
                 //Bind the grid to basket collection
                 grid.DataSource = baskets;
             }
             
            
             private void OnGridRowAdding(object sender, GridRowAddingEventArgs e)
             {
                 //Skip the 'basket' level and bind orders directly to basket's parent
                 Basket basket = e.DataObject as Basket;
                 if (basket != null)
                 {
                      e.DataObject = basket.Orders;
                      e.InsertionType = InsertionType.AsCollection;
                 }
             }
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowRemoving">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Ui.Row"/> is removing from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <summary>
            Provides information on the <see cref="T:Dapfor.Net.Ui.Row"/> of the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <example>
            <code>
            public void InitializeGrid(Grid grid)
            {
                grid.RowAdded += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} has been added on the {1} hierarchical level", e.Row.VisibleIndex, e.Row.Level);
                };
            
                grid.RowMoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been moved to {0} position", e.Row.VisibleIndex);
                };
            
                grid.RowRemoving += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} is removing from the grid", e.Row.VisibleIndex);
                };
            
                grid.RowRemoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been removed from the grid");
                };
            
                //Add header and some columns
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Quantity"));
                grid.Headers.Add(new Header());
            
                //Add 3 row on the top hierarchical level (level 0)
                Row row1 = grid.Rows.Add(new Product());
                Row row2 = grid.Rows.Add(new Product());
                Row row3 =grid.Rows.Add(new Product());
                grid.Rows.ExpandAll();
            
                //Add a data object on the 1st level as subitem of the row1
                row1.Add(new Product());
            
                //Add some data objects on the 1st level as subitems of the row2
                row2.Add(new Product());
                row2.Add(new Product());
            
                //Move the row between row1 and row2. (The grid has only 3 rows on the top level!)
                row3.VisibleChildIndex = 1;
            
                //Remove child of row2
                grid.Rows.Remove(row2.Children[1]);
            }
            
            //Console output:
            The row 0 has been added on the 0 hierarchical level
            The row 1 has been added on the 0 hierarchical level
            The row 2 has been added on the 0 hierarchical level
            The row 1 has been added on the 1 hierarchical level
            The row 3 has been added on the 1 hierarchical level
            The row 4 has been added on the 1 hierarchical level
            The row has been moved to 2 position
            The row 5 is removing from the grid
            The row has been removed from the grid
            </code>
            </example>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Rows"/>
            <seealso cref="M:Dapfor.Net.Ui.RowCollection.Remove(Dapfor.Net.Ui.Row)"/>
            <seealso cref="M:Dapfor.Net.Ui.RowCollection.RemoveAt(System.Int32)"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.Remove"/>
            <seealso cref="E:Dapfor.Net.Ui.Grid.RowAdded"/>
            <seealso cref="E:Dapfor.Net.Ui.Grid.RowRemoved"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowRemoved">
            <summary>
            Occurs after the <see cref="T:Dapfor.Net.Ui.Row"/> has been removed from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <summary>
            Provides information on the <see cref="T:Dapfor.Net.Ui.Row"/> of the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <example>
            <code>
            public void InitializeGrid(Grid grid)
            {
                grid.RowAdded += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} has been added on the {1} hierarchical level", e.Row.VisibleIndex, e.Row.Level);
                };
            
                grid.RowMoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been moved to {0} position", e.Row.VisibleIndex);
                };
            
                grid.RowRemoving += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} is removing from the grid", e.Row.VisibleIndex);
                };
            
                grid.RowRemoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been removed from the grid");
                };
            
                //Add header and some columns
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Quantity"));
                grid.Headers.Add(new Header());
            
                //Add 3 row on the top hierarchical level (level 0)
                Row row1 = grid.Rows.Add(new Product());
                Row row2 = grid.Rows.Add(new Product());
                Row row3 =grid.Rows.Add(new Product());
                grid.Rows.ExpandAll();
            
                //Add a data object on the 1st level as subitem of the row1
                row1.Add(new Product());
            
                //Add some data objects on the 1st level as subitems of the row2
                row2.Add(new Product());
                row2.Add(new Product());
            
                //Move the row between row1 and row2. (The grid has only 3 rows on the top level!)
                row3.VisibleChildIndex = 1;
            
                //Remove child of row2
                grid.Rows.Remove(row2.Children[1]);
            }
            
            //Console output:
            The row 0 has been added on the 0 hierarchical level
            The row 1 has been added on the 0 hierarchical level
            The row 2 has been added on the 0 hierarchical level
            The row 1 has been added on the 1 hierarchical level
            The row 3 has been added on the 1 hierarchical level
            The row 4 has been added on the 1 hierarchical level
            The row has been moved to 2 position
            The row 5 is removing from the grid
            The row has been removed from the grid
            </code>
            </example>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Rows"/>
            <seealso cref="M:Dapfor.Net.Ui.RowCollection.Remove(Dapfor.Net.Ui.Row)"/>
            <seealso cref="M:Dapfor.Net.Ui.RowCollection.RemoveAt(System.Int32)"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.Remove"/>
            <seealso cref="E:Dapfor.Net.Ui.Grid.RowAdded"/>
            <seealso cref="E:Dapfor.Net.Ui.Grid.RowRemoving"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowMoved">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Ui.Row"/> is moved in the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <summary>
            Provides information on the <see cref="T:Dapfor.Net.Ui.Row"/> of the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <example>
            <code>
            public void InitializeGrid(Grid grid)
            {
                grid.RowAdded += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} has been added on the {1} hierarchical level", e.Row.VisibleIndex, e.Row.Level);
                };
            
                grid.RowMoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been moved to {0} position", e.Row.VisibleIndex);
                };
            
                grid.RowRemoving += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} is removing from the grid", e.Row.VisibleIndex);
                };
            
                grid.RowRemoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been removed from the grid");
                };
            
                //Add header and some columns
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Quantity"));
                grid.Headers.Add(new Header());
            
                //Add 3 row on the top hierarchical level (level 0)
                Row row1 = grid.Rows.Add(new Product());
                Row row2 = grid.Rows.Add(new Product());
                Row row3 =grid.Rows.Add(new Product());
                grid.Rows.ExpandAll();
            
                //Add a data object on the 1st level as subitem of the row1
                row1.Add(new Product());
            
                //Add some data objects on the 1st level as subitems of the row2
                row2.Add(new Product());
                row2.Add(new Product());
            
                //Move the row between row1 and row2. (The grid has only 3 rows on the top level!)
                row3.VisibleChildIndex = 1;
            
                //Remove child of row2
                grid.Rows.Remove(row2.Children[1]);
            }
            
            //Console output:
            The row 0 has been added on the 0 hierarchical level
            The row 1 has been added on the 0 hierarchical level
            The row 2 has been added on the 0 hierarchical level
            The row 1 has been added on the 1 hierarchical level
            The row 3 has been added on the 1 hierarchical level
            The row 4 has been added on the 1 hierarchical level
            The row has been moved to 2 position
            The row 5 is removing from the grid
            The row has been removed from the grid
            </code>
            </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RenderChanged">
            <summary>
            Occurs when render has been changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="T:Dapfor.Net.Ui.Row"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.RowUpdated">
            <summary>
            Occurs when a data object, inserted into the <see cref="T:Dapfor.Net.Ui.Grid"/> is updated.
            </summary>
            <threadsafety>The event <see cref="E:Dapfor.Net.Ui.Grid.RowUpdated"/> is raised only in the GUI thread even the data object had notified the <see cref="T:Dapfor.Net.Ui.Grid"/> from other thread.</threadsafety>
            <example>
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        if (price != value)
                        {
                            price = value;
                            //Notify about color changing
                            if (PropertyChanged != null)
                            {
                                PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                            }
                        }
                    }
                }
            
                public DateTime Maturity
                {
                    get { return maturity; }
                }
            
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Using sample
            public void InitializeGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Maturity"));
            
                Console.WriteLine("Current thread: {0}", Thread.CurrentThread.ManagedThreadId);
            
                grid.RowUpdated += delegate(object sender, GridRowUpdateEventArgs e)
                {
                    int threadId = Thread.CurrentThread.ManagedThreadId;
                    Console.WriteLine("The data object has been updated. Row = {0}, Field = {1}, Value = {2}, Thread = {3}", e.Row.VisibleIndex, e.DataField.Id, e.DataField.Value, threadId);
                };
            
                //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                Product product = new Product();
                grid.Rows.Add(product);
            
                //The object will notify the grid through the INotifyPropertyChanged, and the grid will automatically 
                //invalidate, sort, filter and highlight the affected cells.
                product.Price = 12.34;
            
                //Notify the grid from the non-GUI thread
                ThreadPool.QueueUserWorkItem(delegate
                {
                    int threadId = Thread.CurrentThread.ManagedThreadId;
                    Console.WriteLine("Update data object from non-GUI thread (Thread = {0})", threadId);
            
                    //If the call comes from the non-GUI thread, the grid will synchronize them without blocking the calling thread.
                    product.Price = 25.66;
                });
            }
            
            //Console output:
            //Current thread: 7
            //The data object has been updated. Row = 0, Field = Price, Value = 12,34, Thread = 7
            //Update data object from non-GUI thread (Thread = 9)
            //The data object has been updated. Row = 0, Field = Price, Value = 25,66, Thread = 7
            </code>
            </example>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Rows"/>
            <seealso cref="T:Dapfor.Net.Data.IDataAccessor"/>
            <seealso cref="M:Dapfor.Net.Data.IDataField.NotifyUpdate"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.Invalidate"/>
            <seealso cref="M:Dapfor.Net.Ui.Cell.Invalidate"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellClicking">
             <summary>
             Occurs when the end-user clicking on the <see cref="T:Dapfor.Net.Ui.Cell"/>.
             </summary>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="T:Dapfor.Net.Ui.Cell"/>
             <seealso cref="E:Dapfor.Net.Ui.Grid.CellClicked"/>
             <example>
             <code>
             public void PopulateGrid(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.CellClicking += delegate(object sender, GridCellEventArgs e)
                 {
                     Console.WriteLine("The user is clicking on the cell: row = {0}, column = {1})", e.Cell.Row.VisibleIndex, e.Cell.Column.Id);
                 };
             
                 grid.CellClicked += delegate(object sender, GridCellEventArgs e)
                 {
                     Console.WriteLine("The user has clicked on the cell: row = {0}, column = {1})", e.Cell.Row.VisibleIndex, e.Cell.Column.Id);
                 };
             }
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellEditor">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Grid"/> needs to know the <see cref="T:System.Drawing.Design.UITypeEditor"/> to edit the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellBeginEdit">
            <summary>
            Occurs when the edit process begins.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellEndEdit">
            <summary>
            Occurs when the edit process finishes.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellClicked">
             <summary>
             Occurs when the end-user has clicked on the <see cref="T:Dapfor.Net.Ui.Cell"/>.
             </summary>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="T:Dapfor.Net.Ui.Cell"/>
             <seealso cref="E:Dapfor.Net.Ui.Grid.CellClicking"/>
             <example>
             <code>
             public void PopulateGrid(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.CellClicking += delegate(object sender, GridCellEventArgs e)
                 {
                     Console.WriteLine("The user is clicking on the cell: row = {0}, column = {1})", e.Cell.Row.VisibleIndex, e.Cell.Column.Id);
                 };
             
                 grid.CellClicked += delegate(object sender, GridCellEventArgs e)
                 {
                     Console.WriteLine("The user has clicked on the cell: row = {0}, column = {1})", e.Cell.Row.VisibleIndex, e.Cell.Column.Id);
                 };
             }
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellEnter">
            <summary>
            Occurs when the mouse pointer enters the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="T:Dapfor.Net.Ui.Cell"/>
            <seealso cref="E:Dapfor.Net.Ui.Grid.CellLeave"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellLeave">
            <summary>
            Occurs when the mouse pointer leaves the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="T:Dapfor.Net.Ui.Cell"/>
            <seealso cref="E:Dapfor.Net.Ui.Grid.CellEnter"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellAppearanceChanged">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Cell"/>'s appearance is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="T:Dapfor.Net.Ui.Cell"/>
            <seealso cref="P:Dapfor.Net.Ui.Cell.Appearance"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellImageChanged">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Cell"/>'s image is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="T:Dapfor.Net.Ui.Cell"/>
            <seealso cref="P:Dapfor.Net.Ui.Cell.Image"/>
            <seealso cref="P:Dapfor.Net.Ui.Column.CellImage"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.CellFormatChanged">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Cell"/>'s <see cref="T:Dapfor.Net.Formats.IFormat"/> is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="T:Dapfor.Net.Ui.Cell"/>
            <seealso cref="P:Dapfor.Net.Ui.Cell.Format"/>
            <seealso cref="P:Dapfor.Net.Ui.Column.Format"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.HeaderAdded">
             <summary>
             Occurs when a header is added to the <see cref="T:Dapfor.Net.Ui.Grid"/>.
             </summary>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.HeaderAdded += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been added on the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoving += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header is removing from the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoved += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been removed from the grid");
                 };
            
                 grid.HeaderHeightChanged += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("The new height of the header = {0}", e.Header.Height);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers.Add(new Header());
            
                 //Set a new height of the column panel
                 grid.Headers[0].ColumnPanelHeight = 25;
                 
                 //Hide the header
                 grid.Headers[1].Visible = false;
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
            
                 //Remove the header
                 grid.Headers.RemoveAt(0);
             }
             </code>
             </example>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="T:Dapfor.Net.Ui.Header"/>
             <seealso cref="P:Dapfor.Net.Ui.Grid.Headers"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.Remove(Dapfor.Net.Ui.Header)"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.RemoveAt(System.Int32)"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.HeaderRemoving">
             <summary>
             Occurs when a header is removing from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
             </summary>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.HeaderAdded += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been added on the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoving += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header is removing from the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoved += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been removed from the grid");
                 };
            
                 grid.HeaderHeightChanged += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("The new height of the header = {0}", e.Header.Height);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers.Add(new Header());
            
                 //Set a new height of the column panel
                 grid.Headers[0].ColumnPanelHeight = 25;
                 
                 //Hide the header
                 grid.Headers[1].Visible = false;
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
            
                 //Remove the header
                 grid.Headers.RemoveAt(0);
             }
             </code>
             </example>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="T:Dapfor.Net.Ui.Header"/>
             <seealso cref="P:Dapfor.Net.Ui.Grid.Headers"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.Remove(Dapfor.Net.Ui.Header)"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.RemoveAt(System.Int32)"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.HeaderRemoved">
             <summary>
             Occurs when a header has been removed from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
             </summary>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.HeaderAdded += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been added on the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoving += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header is removing from the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoved += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been removed from the grid");
                 };
            
                 grid.HeaderHeightChanged += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("The new height of the header = {0}", e.Header.Height);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers.Add(new Header());
            
                 //Set a new height of the column panel
                 grid.Headers[0].ColumnPanelHeight = 25;
                 
                 //Hide the header
                 grid.Headers[1].Visible = false;
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
            
                 //Remove the header
                 grid.Headers.RemoveAt(0);
             }
             </code>
             </example>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="T:Dapfor.Net.Ui.Header"/>
             <seealso cref="P:Dapfor.Net.Ui.Grid.Headers"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.Remove(Dapfor.Net.Ui.Header)"/>
             <seealso cref="M:Dapfor.Net.Ui.HeaderCollection.RemoveAt(System.Int32)"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.HeaderVisibilityChanged">
             <summary>
             Occurs when the <see cref="T:Dapfor.Net.Ui.Header"/> becomes visible or invisible.
             </summary>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.HeaderAdded += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been added on the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoving += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header is removing from the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoved += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been removed from the grid");
                 };
            
                 grid.HeaderHeightChanged += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("The new height of the header = {0}", e.Header.Height);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers.Add(new Header());
            
                 //Set a new height of the column panel
                 grid.Headers[0].ColumnPanelHeight = 25;
                 
                 //Hide the header
                 grid.Headers[1].Visible = false;
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
            
                 //Remove the header
                 grid.Headers.RemoveAt(0);
             }
             </code>
             </example>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="T:Dapfor.Net.Ui.Header"/>
             <seealso cref="P:Dapfor.Net.Ui.Grid.Headers"/>
             <seealso cref="P:Dapfor.Net.Ui.Header.Visible"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.HeaderHeightChanged">
             <summary>
             Occurs when the <see cref="T:Dapfor.Net.Ui.Header"/>'s height is changed.
             </summary>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.HeaderAdded += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been added on the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoving += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header is removing from the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoved += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been removed from the grid");
                 };
            
                 grid.HeaderHeightChanged += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("The new height of the header = {0}", e.Header.Height);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers.Add(new Header());
            
                 //Set a new height of the column panel
                 grid.Headers[0].ColumnPanelHeight = 25;
                 
                 //Hide the header
                 grid.Headers[1].Visible = false;
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
            
                 //Remove the header
                 grid.Headers.RemoveAt(0);
             }
             </code>
             </example>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="T:Dapfor.Net.Ui.Header"/>
             <seealso cref="P:Dapfor.Net.Ui.Grid.Headers"/>
             <seealso cref="P:Dapfor.Net.Ui.Header.ColumnPanelHeight"/>
             <seealso cref="P:Dapfor.Net.Ui.Header.GroupPanelHeight"/>
             <seealso cref="P:Dapfor.Net.Ui.Header.Height"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.GroupingChanged">
             <summary>
             Occurs when <see cref="T:Dapfor.Net.Ui.Column"/>s are regrouped in the <see cref="T:Dapfor.Net.Ui.Header"/>.
             </summary>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.HeaderAdded += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been added on the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoving += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header is removing from the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoved += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been removed from the grid");
                 };
            
                 grid.HeaderHeightChanged += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("The new height of the header = {0}", e.Header.Height);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers.Add(new Header());
            
                 //Set a new height of the column panel
                 grid.Headers[0].ColumnPanelHeight = 25;
                 
                 //Hide the header
                 grid.Headers[1].Visible = false;
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
            
                 //Remove the header
                 grid.Headers.RemoveAt(0);
             }
             </code>
             </example>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="P:Dapfor.Net.Ui.Column.Grouped"/>
             <seealso cref="P:Dapfor.Net.Ui.Column.GroupIndex"/>
             <seealso cref="P:Dapfor.Net.Ui.Header.GroupedColumns"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ColumnAdded">
             <summary>
             Occurs when a new <see cref="T:Dapfor.Net.Ui.Column"/> is added to the <see cref="T:Dapfor.Net.Ui.Header"/>
             </summary>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)"/>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.ColumnAdded += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been added to the grid", e.Column.Id);
                 };
            
                 grid.ColumnMoved += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been moved to {1} position", e.Column.Id, e.Column.VisibleIndex);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
             }
             
             //Console output:
             //The column 'Price' has been added to the grid
             //The column 'Quantity' has been added to the grid
             //The column 'Price' has been moved to 1 position
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ColumnRemoving">
             <summary>
             Occurs when a <see cref="T:Dapfor.Net.Ui.Column"/> is removing from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
             </summary>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="M:Dapfor.Net.Ui.Header.Remove(Dapfor.Net.Ui.Column)"/>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.ColumnAdded += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been added to the grid", e.Column.Id);
                 };
            
                 grid.ColumnMoved += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been moved to {1} position", e.Column.Id, e.Column.VisibleIndex);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
             }
             
             //Console output:
             //The column 'Price' has been added to the grid
             //The column 'Quantity' has been added to the grid
             //The column 'Price' has been moved to 1 position
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ColumnRemoved">
             <summary>
             Occurs when a <see cref="T:Dapfor.Net.Ui.Column"/> has been removed from the <see cref="T:Dapfor.Net.Ui.Grid"/>.
             </summary>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="M:Dapfor.Net.Ui.Header.Remove(Dapfor.Net.Ui.Column)"/>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.ColumnAdded += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been added to the grid", e.Column.Id);
                 };
            
                 grid.ColumnMoved += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been moved to {1} position", e.Column.Id, e.Column.VisibleIndex);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
             }
             
             //Console output:
             //The column 'Price' has been added to the grid
             //The column 'Quantity' has been added to the grid
             //The column 'Price' has been moved to 1 position
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ColumnAppearanceChanged">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Column"/>'s appearance is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Column.Appearance"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ColumnWidthChanged">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.Column"/>'s width is changed.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Column.Width"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ColumnVisibilityChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Ui.Column"/> becomes visible or invisible.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Column.Visible"/>
            <seealso cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/>
            <seealso cref="P:Dapfor.Net.Ui.Header.VisibleColumns"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ColumnMoving">
             <summary>
             Occurs when a <see cref="T:Dapfor.Net.Ui.Column"/> is moving.
             </summary>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.ColumnAdded += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been added to the grid", e.Column.Id);
                 };
            
                 grid.ColumnMoved += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been moved to {1} position", e.Column.Id, e.Column.VisibleIndex);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
             }
             
             //Console output:
             //The column 'Price' has been added to the grid
             //The column 'Quantity' has been added to the grid
             //The column 'Price' has been moved to 1 position
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ColumnMoved">
             <summary>
             Occurs when a <see cref="T:Dapfor.Net.Ui.Column"/> has been moved.
             </summary>
             <threadsafety>This event is always raised in the GUI thread</threadsafety>
             <seealso cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/>
             <example>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.ColumnAdded += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been added to the grid", e.Column.Id);
                 };
            
                 grid.ColumnMoved += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been moved to {1} position", e.Column.Id, e.Column.VisibleIndex);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
             }
             
             //Console output:
             //The column 'Price' has been added to the grid
             //The column 'Quantity' has been added to the grid
             //The column 'Price' has been moved to 1 position
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.FocusedColumnChanged">
            <summary>
            Occurs when the focused column is changed.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.SortChanged">
            <summary>
            Occurs when a sort changed in the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <threadsafety>This event is always raised in the GUI thread</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Column.SortDirection"/>
            <seealso cref="P:Dapfor.Net.Ui.Column.SortLevel"/>
            <seealso cref="P:Dapfor.Net.Ui.Header.SortedColumns"/>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.MeasureCellWidth">
            <summary>
            Occurs when grid measures cell width to adjust columns to the best size.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.LassoSelectionBegin">
            <summary>
            Occurs when the user starts the lasso selection.
            </summary>
            <remarks>This event is raised when the user starts the lasso selection. As an argument, the handler receives 
            an object of the <see cref="T:Dapfor.Net.Ui.LassoSelectionEventArgs"/> type that contains the size of the selection, 
            as well as a boolean <see cref="P:Dapfor.Net.Ui.LassoSelectionEventArgs.Handled">LassoSelectionEventArgs.Handled</see> variable. The programmer can set this variable 
            to <c>true</c> to cancel the lasso selection.
            </remarks>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.LassoSelection">
            <summary>
            Occurs when the user moves the mouse while lasso selection.
            </summary>
            <remarks>This event is raised when the user moves the mouse while lasso selection. As an argument, the handler receives 
            an object of the <see cref="T:Dapfor.Net.Ui.LassoSelectionEventArgs"/> type that contains the size of the selection, 
            as well as a boolean <see cref="P:Dapfor.Net.Ui.LassoSelectionEventArgs.Handled">LassoSelectionEventArgs.Handled</see> variable. 
            The programmer can set this variable to <c>true</c> to prevent from row selection changing.
            </remarks>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.LassoSelectionEnd">
            <summary>
            Occurs when the user end the lasso selection.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PrevEditableCell">
            <summary>
            Occurs when a new editable cell is required.
            </summary>
            <remarks></remarks>
            <code>
            //This example shows how to customize navigation between editors from top to bottom and from left to right.
            grid.NextEditableCell += delegate(object sender, GridEditableCellEventArgs e)
            {
                Row row = e.EditingCell.Row.NextVisible;
                Column column = e.EditingCell.Column;
                if(row == null)
                {
                    row = e.Grid.Rows[0];
                    column = column.Header.VisibleColumns[column.VisibleIndex + 1];
                }
            
                e.NewEditableCell = row != null &amp;&amp; column != null ? row[column.Id] : null;
            };
            </code>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.NextEditableCell">
            <summary>
            Occurs when a new editable cell is required.
            </summary>
            <remarks></remarks>
            <code>
            //This example shows how to customize navigation between editors from top to bottom and from left to right.
            grid.NextEditableCell += delegate(object sender, GridEditableCellEventArgs e)
            {
                Row row = e.EditingCell.Row.NextVisible;
                Column column = e.EditingCell.Column;
                if(row == null)
                {
                    row = e.Grid.Rows[0];
                    column = column.Header.VisibleColumns[column.VisibleIndex + 1];
                }
            
                e.NewEditableCell = row != null &amp;&amp; column != null ? row[column.Id] : null;
            };
            </code>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.FilterUpdating">
            <summary>
            Occurs when filter is updating.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.FilterUpdated">
            <summary>
            Occurs when the filter for all rows in the grid has been updated.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.SerializationState">
            <summary>
            Gets or sets grid serialization state (headers, column width, colors, etc...).
            </summary>
            <value>Grid serialization state.</value>
            <remarks>
            <para>Data serialization is a process of saving user preferences for a grid, such as colors, columns location, grouping, sorting and other data into an archive for further 
            deserialization. For example, this feature may be useful when you restart your application. In general, this procedure is very complex and requires familiarity with 
            XML or binary archives. Besides that, a programmer sometimes fails to save state of the whole application, which results in loss of data and user preferences</para>
            
            <para>We provide you with a very convenient and efficient way to save and restore the grid's state. The .Net Grid supports serialization in XML as well as 
            in binary formats via the <see cref="P:Dapfor.Net.Ui.Grid.SerializationState"/> property. The object returned by this property implements <see cref="T:System.Xml.Serialization.IXmlSerializable"/> 
            and <see cref="T:System.Runtime.Serialization.ISerializable"/> interfaces which allow it to be serialized into XML or binary files. During deserialization this object is restored from these 
            files and is passed to the grid via the Grid.SerializationState property.</para>
            
            <para>Example of XML serialization:
            <code>
            //The method serializes the grid's state into the XML file
            void XmlSerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    serializer.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void XmlDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    grid.SerializationState = (Grid.GridSerializationState)serializer.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>Example of binary serialization: 
            <code>
            //The method serializes the grid's state into the XML file
            void BinarySerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    formatter.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void BinaryDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    grid.SerializationState = (Grid.GridSerializationState)formatter.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>A very nice feature of the Dapfor.Net Grid is that a programmer may transfer state of one grid into another:
            <code>grid1.SerializationState = grid2.SerializationState;</code>
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ScrollManager">
            <summary>
            Gets the scroll manager.
            </summary>
            <value>The scroll manager.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Filter">
             <summary>
             Sets and gets a new filter interface.
             </summary>
             <remarks>The filter is applied each time when a new <see cref="T:Dapfor.Net.Ui.Row"/> is added to the <see cref="T:Dapfor.Net.Ui.Grid"/> 
             and when it is modified by calling <see cref="M:Dapfor.Net.Ui.Cell.Update"/> method or through 
             the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. 
             <para>The delegate method is called always in the GUI thread.</para>
             </remarks>
             <example>Demonstrates how to set and use the filter
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 private double price;
            
                 public double Price
                 {
                     get { return price; }
                     set
                     {
                         //If the price is not the same, change it and notify about price changing
                         if (price != value)
                         {
                             price = value;
                             //The event can be raised from any thread. The grid will synchronize thread with GUI without blocking the calling thread.
                             //While painting, sorting or filtering the grid can ask this object in the GUI (!) thread to return the price value.
                             if(PropertyChanged != null)
                             {
                                 PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                             }
                         }
                     }
                 }
            
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             public void HowToSetFilter(Grid grid)
             {
                 //Set a filter that hides all rows, that contain products with price less than 10
                 grid.Filter = new Filter(delegate(Row row)
                 {
                     //There are three ways to get price: 
                     //1. From the Cell through the Value property, which returns a double value: row["Price"].Value
                     //2. Through the IDataAccessor and IDataField: row.DataAccessor["Price"].Value
                     //3. From the data object itself: ((Product)row.DataObject).Price
            
                     if ((double)row["Price"].Value &lt; 10)
                     {
                         //Filter the row
                         return true;
                     }
            
                     //The row is not filtered
                     return false;
                 });
            
                 //Populate the grid
                 Product product1 = new Product();
                 Product product2 = new Product();
            
                 grid.Rows.Add(product1);
                 grid.Rows.Add(product2);
            
                 //Update the product's price
                 //Data objects will notify the Grid, and it will display only the product2. 
                 //The product1 will be hidden
                 product1.Price = 9;
                 product2.Price = 11;
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.CustomSort">
             <summary>
             Gets or sets an implementation of <see cref="T:Dapfor.Net.Ui.ICustomSort"/> interface to customize <see cref="T:Dapfor.Net.Ui.Row"/> ordering or sorting.
             </summary>
             <value>
             The custom sort.
             </value>
             <code>
             class MyCystomSort : ICustomSort
             {
                 public int Compare(Row row1, Row row2, string fieldId, object value1, object value2, int defaultResult)
                 {
                     string v1 = value1.ToString();
                     string v2 = value2.ToString();
            
                     if (v1 == "some value") return -1;
                     if (v2 == "some value") return 1;
                     return defaultResult;
                 }
             }
             
             ...
             grid.CustomSort = new MyCystomSort();
             </code>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Rows">
            <summary>
            Gets a collection of all visible <see cref="T:Dapfor.Net.Ui.Row"/>s. 
            </summary>
            <value>Collection of visible rows.</value>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            <para>If you work with reference-type data objects, you can use convenient grid features to search row or rows that contain the required data object.</para>
            <para>You can get a data object that is associated with a row by calling <see cref="P:Dapfor.Net.Ui.Row.DataObject">Row.DataObject</see> property. The same data object may be contained in 
            multiple grid rows. You can get them using <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.Find(System.Object)">Grid.DataObjects.Find(object)</see> method. If you need only the first row, you can use 
            <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.FindFirstRow(System.Object)">Grid.DataObjects.FindFirstRow(object)</see> method.</para>
            
            <code>
            public void PopulateGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
            
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("Song"));
            
                Row rowPlaylist1 = grid.Rows.Add(new Playlist("Queen"));
                rowPlaylist1.Add(new Song("Keep Yourself Alive"));
                rowPlaylist1.Add(new Song("Great King Rat"));
                rowPlaylist1.Add(new Song("White Queen"));
            
                rowPlaylist1.ExpandAll();
            
                Row rowPlaylist2 = grid.Rows.Add(new Playlist("Beetles"));
                rowPlaylist2.Add(new Song("Love Me Do"));
                rowPlaylist2.Add(new Song("From Me to You"));
                rowPlaylist2.Add(new Song("Please Please Me"));
                rowPlaylist2.Expanded = false;
            
                Row rowPlaylist3 = grid.Rows.Add(new Playlist("Scorpions"));
                rowPlaylist3.Add(new Song("Fly to the Rainbow"));
                rowPlaylist3.Add(new Song("Rock You Like a Hurricane"));
                rowPlaylist3.Expanded = true;
            
                
                Console.WriteLine("{0} visible rows in the grid", grid.Rows.Count);
                //Iterate all playlists (top-level items)
                foreach (Row row in grid.Rows)
                {
                    Console.WriteLine("Row {0}: {1}", row.VisibleIndex, row[0].Text);
                }
            }
            
            //Console output:
            8 visible rows in the grid
            Row 0: Queen
            Row 1: Keep Yourself Alive
            Row 2: Great King Rat
            Row 3: White Queen
            Row 4: Beetles
            Row 5: Scorpions
            Row 6: Fly to the Rainbow
            Row 7: Rock You Like a Hurricane
            </code>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Nodes">
            <summary>
            Gets a collection of both visible and invisible rows at the top hierarchy level
            </summary>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            
            <code>
            public void PopulateGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
            
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("Song"));
            
                Row rowPlaylist = grid.Rows.Add(new Playlist("Queen"));
            
                rowPlaylist.Add(new Song("Keep Yourself Alive"));
                rowPlaylist.Add(new Song("Great King Rat"));
                rowPlaylist.Add(new Song("White Queen"));
            
                grid.Rows.ExpandAll();
            
                Console.WriteLine("{0} Rows at the top hierarchy level", grid.Nodes.Count);
                //Iterate all playlists (top-level items)
                foreach (Row playlist in grid.Nodes)
                {
                    Console.WriteLine("Playlist '{0}':", playlist["Name"].Text);
            
                    //Iterate all songs
                    foreach (Row song in playlist.Children)
                    {
                        Console.WriteLine("Song '{0}'", song["Song"].Text);
                    }
                }
            }
            
            //Console output:
            1 Rows at the top hierarchy level
            Playlist 'Queen':
            Song 'Keep Yourself Alive'
            Song 'Great King Rat'
            Song 'White Queen'
            </code>
            </remarks>
            <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Headers">
            <summary>
            Gets a collection of <see cref="T:Dapfor.Net.Ui.Header"/>s. 
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.HeaderCollection"/>.</value>
            <remarks>
            <para>A header is a collection of columns that enables displaying data in data grid's cells. A grid supports one or more headers. When a single header is used, 
            the grid has TreeListView control behavior, just like the Microsoft Windows Explorer. Multiple headers enable separate column management for each hierarchical level. 
            At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means that 
            the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting.</para>
            <para>In programming, headers can be added to the grid by calling <see cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)">Grid.Headers.Add(Header header)</see> method. When a header is added to 
            <see cref="P:Dapfor.Net.Ui.Grid.Headers">Grid.Headers</see> collection, a zero-based index is assigned to it in the hierarchy. When you call <see cref="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)">Header.Add(Column column)</see> method, 
            additional columns are added to a header. After that columns can be accessed with indexer operator. Every header has the following collections of columns:
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Header.VisibleColumns">Header.VisibleColumns</see> - List of visible columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.Columns">Header.Columns</see> - List of ALL columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see> - List of columns, that participate in sorting</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.FixedColumns">Header.FixedColumns</see> - List of non-scrollable columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> - List of grouped columns</item>
            </list>
            </para>
            <para>The same column can be located in different lists. Almost each of the aforementioned lists has <b>Clear()</b> method, that has a specific action when 
            invoked on a certain collection. Specifically, <see cref="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.Clear">Header.GroupedColumns.Clear()</see> removes data grouping in header of a grid. 
            To group data you only have to set <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property to true. If you set this property to true for multiple columns, it will result 
            in multiple grouping and will fill corresponding collection in the data grid header. Such approach can be used in sorting (<see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see>). 
            The number of fixed columns is defined by <see cref="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Count">Header.FixedColumns.Count</see>.</para>
            <code>
            public void MultipleHeaderGrid(Grid grid)
            {
                //Initialize the grid with two headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("FirstName", "First Name"));
                grid.Headers[0].Add(new Column("LastName", "Last Name"));
            
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("BookName", "Name"));
                grid.Headers[1].Add(new Column("BookGenre", "Genre"));
               
            
                //Add some data objects to the grid
                Row row = grid.Rows.Add(new Writer("Agata", "Kristi"));
                row.Add(new Book("Second front", "Detective story"));
                row.Add(new Book("Shameful Star", "Detective story"));
            }
            </code>
            </remarks>
            <threadsafety>The class is not thread safe</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Render">
             <summary>
             Gets or sets <see cref="T:Dapfor.Net.Ui.IRender"/> to perform basic painting operations.
             </summary>
             <value>The <see cref="T:Dapfor.Net.Ui.IRender"/>.</value>
             <example>
             <code>
             public void CellCustomDraw(Grid grid)
             {
                 //Demonstrates, how to custom draw in cell. 
                 //The delegate is called while the cell's painting
                 grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
                 {
                     //Draw a button in the cell's bounds. 
                     Color startColor = Color.LightGray;
                     Color endColor = Color.LightSlateGray;
            
                     //Take into account, that the row can be selected.
                     if (e.Cell.Row != null &amp;&amp; e.Cell.Row.Selected)
                     {
                         startColor = PaintHelper.AlphaBlend(startColor, grid.Selection.Color);
                         endColor = PaintHelper.AlphaBlend(endColor, grid.Selection.Color);
                     }
            
                     //Draw the background
                     Appearance appearance = new Appearance(SystemColors.GrayText, startColor, true, endColor, GradientDirection.Vertical);
                     e.Render.DrawCaption(appearance, ElementState.Normal, e.Cell.VirtualBounds, BorderSide.All, e.Graphics);
            
                     //Prevent from background erasing
                     e.Parts &amp;= e.Parts ^ (PaintPart.Background | PaintPart.Borders);
            
                     //Set a new text color
                     e.Appearance.ForeColor = Color.Yellow;
            
                     //Do default painting without the text drawing
                     e.PaintAll();
                 };
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value></value>
            <returns>The default <see cref="T:System.Drawing.Size"/> of the control.</returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Drawing.Color"/> that represents the background color of the <see cref="T:Dapfor.Net.Ui.Grid"/>. The default is the value of the <see cref="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.BackColor">Preferences.Grid.BackColor</see> property.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Theme">
            <summary>
            Gets or sets the theme.
            </summary>
            <value>The theme.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Selection">
             <summary>
             Gets a collection of selected <see cref="T:Dapfor.Net.Ui.Row"/>s.
             </summary>
             <remarks>
             You can select single or multiple rows in the grid with <see cref="P:Dapfor.Net.Ui.Row.Selected">Row.Selected</see> property and <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.Enabled">Grid.Selection.Enabled</see> / 
             <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.MultipleEnabled">Grid.Selection.MultipleEnabled</see> property. All selected lines are added to <see cref="P:Dapfor.Net.Ui.Grid.Selection">Grid.Selection</see> collection
             that supports iteration. To unselect all rows, call <see cref="M:Dapfor.Net.Ui.Grid.GridSelection.Clear">Grid.Selection.Clear()</see> method. 
             <code>
             public void ExampleSelection(Grid grid)
             {
                 //Set a new semi-transparent color for selected rows
                 grid.Selection.Color = Color.FromArgb(80, 102, 36, 10);
            
                 //Allow selection in grid
                 grid.Selection.Enabled = true;
            
                 //Allow multiple selection in grid
                 grid.Selection.MultipleEnabled = true;
            
                 //Rows in the collection should be in order
                 grid.Selection.Sorted = true;
            
            
                 //Select the 5th row
                 grid.Rows[5].Selected = true;
            
                 //Enumerate the selected rows...
                 foreach (Row row in grid.Selection)
                 {
                     //Do something here...
                 }
            
                 //Clear the selection
                 grid.Selection.Clear();
             }
             </code>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Navigation">
             <summary>
             Specifies the navigation in the <see cref="T:Dapfor.Net.Ui.Grid"/>.
             </summary>
             <value>The navigation.</value>
             <example>Shows how to navigate programmatically in the <see cref="T:Dapfor.Net.Ui.Grid"/>
             <code>
             public void ExampleNavigation(Grid grid)
             {
                 //If the user presses the left arrow, the grid will move the focus to the first visible row 
                 //on the same hierarchical level
                 grid.Navigation.JumpToFirstChildOnKeyLeft = true;
            
                 //If the user presses the right arrow, the grid will move the focus to the last visible row 
                 //on the same hierarchical level
                 grid.Navigation.JumpToLastChildOnKeyRight = true;
            
                 //The grid can move the focus between different hierarchical levels 
                 //when the user presses key up or key down
                 grid.Navigation.KeepLevelOnKeyUpDown = true;
            
                 //Move the focus to the previous row and ensure it visible
                 grid.Navigation.Up();
             
                 //Move the focus to the end and ensure the focused row visible
                 grid.Navigation.End();
             
                 //Subscribe for events
                 grid.FocusedRowChanged += OnFocusedRowChanged;
             }
             
             void OnFocusedRowChanged(object sender, FocusedRowEventArgs e)
             {
                 //Your code...
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.EditInPlace">
            <summary>
            Gets the edit in place settings.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Grid.GridEditInPlace"/> settings.</value>
            <remarks>
            To edit value in <see cref="T:Dapfor.Net.Ui.Cell"/>, the data object must implement 
            the Set- property, and the <see cref="T:Dapfor.Net.Ui.Column"/> must be editable. If this two conditions are true, then the <see cref="T:Dapfor.Net.Ui.Grid"/> looks for the editor in the next order: 
            <list type="bullet"> 
            <item>In <see cref="T:Dapfor.Net.Ui.Column"/> by calling the <see cref="P:Dapfor.Net.Ui.Column.Editor"/> property</item>
            <item>In <see cref="T:Dapfor.Net.Data.IDataField"/> by calling the <see cref="P:Dapfor.Net.Data.IDataField.Editor"/> property. The editon can be specified with the <see cref="T:System.ComponentModel.EditorAttribute"/></item>
            <item>If the editor is not found, the <see cref="T:Dapfor.Net.Ui.Grid"/> tries to retrive an editor from the <see cref="T:System.ComponentModel.PropertyDescriptor"/> by calling the <see cref="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)"/> method</item>
            <item>If the value is of the bool type, <see cref="T:Dapfor.Net.Editors.BoolEditor"/> is used</item>
            <item>If the value is of the enum type, <see cref="T:Dapfor.Net.Editors.EnumEditor"/> is used</item>
            <item>If the value implements <see cref="T:System.Collections.IEnumerable"/> interface, <see cref="T:Dapfor.Net.Editors.EnumerableEditor"/> is used</item>
            <item>If the value implements <see cref="T:System.IConvertible"/> interface, <see cref="T:Dapfor.Net.Editors.ConvertibleValueEditor"/> is used</item>
            </list>
            </remarks>
            <example>
            <code>
            //Example of an easy drop-down editor where the end-user can click on the push button
            public class CustomEditor : UITypeEditor
            {
                public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
                {
                    // Uses the IWindowsFormsEditorService to display a drop-down UI in the grid. (See more System.Drawing.Design.UITypeEditor)
                    IWindowsFormsEditorService service = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
            
                    //The result to be returned
                    object result = value;
            
                    //Create some UI control
                    Button button = new Button();
                    button.Click += delegate
                    {
                        //result = ... &lt;new value&gt;
                        service.CloseDropDown();
                    };
                    //Do edit in place in the editor service. If the end user clicks on the button, then the callback will be called.
                    service.DropDownControl(button);
            
                    return result;
                }
            
                public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
                {
                    //The style is drop-down list box
                    return UITypeEditorEditStyle.DropDown;
                }
            }
            
            
            //Some data object
            public class Car 
            {
                //Some fields
                private double price;
                private double maxSpeed;
                private Color color;
            
                //Declaration of the CustomEditor. This declaration is also used by the System.Windows.Forms.PropertyGrid, so your object 
                //can be edited in the same way in various grids. 
                [Editor(typeof(CustomEditor), typeof(UITypeEditor))]
                public double MaxSpeed
                {
                    get { return maxSpeed; }
                    set { maxSpeed = value; }
                }
            
                //The declaration of the Editor can be done in the column
                public double Price
                {
                    get { return price; }
                    set { price = value; }
                }
            
                //Default color editor is used (System.Drawing.Design.ColorEditor). 
                //This editor is returned by the TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor)) call; 
                public Color Color
                {
                    get { return color; }
                    set { color = value; }
                }
            }
            
            //Initialize the grid
            public void AddDataObjectToGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("MaxSpeed"));
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Color"));
            
                grid.Headers[0]["MaxSpeed"].Editable = true;
                grid.Headers[0]["Price"].Editable = true;
                //Declare the editor only for the current grid
                grid.Headers[0]["Price"].Editor = new CustomEditor();
                grid.Headers[0]["Color"].Editable = true;
            
                //Add a data object
                grid.Rows.Add(new Car());
            
                //Edit the cell programmatically
                grid.Rows[0]["Price"].Edit();
            
                //...
            }        
            </code>
            </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.ValidateCell">
            <summary>
            Occurs when a value should be validated while cell editing.
            </summary>
            <remarks>
            <para>To validate edited data the programmer has to subscribe to <see cref="E:Dapfor.Net.Ui.Grid.ValidateCell">Grid.ValidateCell</see> event that transmits data of the 
            edited cell, new value that shall be transferred to business logic object, message that has to be displayed after editing. In this event it is possible also to 
            set an action instructing the grid of what has to be done after editing.</para>
            </remarks>
            <example>
            <code>
            //Add handler to validate cells
            grid.ValidateCell += OnValidateCell;
            
            //Validation handler
            private void OnValidateCell(object sender, Ui.ValidateCellEventArgs e)
            {
                //Default validation logic:
                bool valid = e.Exception == null &amp;&amp; string.IsNullOrEmpty(e.ErrorText);
            
                //Add your validation logic here. 
                //valid = ... 
            
                if (!valid)
                {
                    e.Action = ValidateCellAction.StopEdit;
                    e.ErrorText = "Please enter a valid value.";
                }
            }        
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Sort">
            <summary>
            Gets the sort settings of the <see cref="T:Dapfor.Net.Ui.Grid"/>. Allows or disables the sort and multiple sort, indicates how much sorted columns the <see cref="T:Dapfor.Net.Ui.Grid"/> supports.
            </summary>
            <value><see cref="T:Dapfor.Net.Ui.Grid.GridSort"/> settings.</value>
            <example>Demonstrates how to work with the sort
            <code>
            public void HowToWorkWithSort(Grid grid)
            {
                //Add an event handler that print out all sort notifications
                grid.SortChanged += delegate
                {
                    Console.WriteLine("column[Price] = {0}, column[Quantity] = {1}", grid.Headers[0]["Price"].SortDirection, grid.Headers[0]["Quantity"].SortDirection);
                };
            
                //Enables the multiple sort in the grid
                grid.Sort.Enabled = true;
                grid.Sort.MultipleEnabled = true;
            
                //Add a header on the top level and some columns
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Quantity"));
            
                //Clear existing sort
                grid.Sort.Clear();
            
                //Set multiple sort
                grid.Headers[0]["Price"].SortDirection = SortDirection.Descending;
                grid.Headers[0]["Quantity"].SortDirection = SortDirection.Ascending;
            
                //Enumerate all sorted columns in the in the top header
                foreach (Column column in grid.Headers[0].SortedColumns)
                {
                    //Do something...
                }
                
                //Reverse the sort in the 'price' column
                grid.Headers[0]["Price"].SortDirection = SortDirection.Ascending;
            }
            
            //Console output:
            //column[Price] = Descending, column[Quantity] = Undefined
            //column[Price] = Descending, column[Quantity] = Ascending
            //column[Price] = Ascending, column[Quantity] = Ascending
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.DataObjects">
            <summary>
            Provides a reverse search of <see cref="T:Dapfor.Net.Ui.Row"/>s by data objects, already inserted  to the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <remarks>
            <para>If you work with reference-type data objects, you can use convenient grid features to search row or rows that contain the required data object.</para>
            <para>You can get a data object that is associated with a row by calling <see cref="P:Dapfor.Net.Ui.Row.DataObject">Row.DataObject</see> property. The same data object may be contained in
            multiple grid rows. You can get them using <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.Find(System.Object)">Grid.DataObjects.Find(object)</see> method. If you need only the first row, you can use
            <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.FindFirstRow(System.Object)">Grid.DataObjects.FindFirstRow(object)</see> method.</para>
            <code>
            public void ReverseSearchExample(Grid grid)
            {
                //Add some products...
                Product product1 = new Product();
                Product product2 = new Product();
                grid.Rows.Add(product1);
                grid.Rows.Add(product2);
                
                //The first found row (not the first visible - just the first found!)
                Row row1 = grid.DataObjects.FindFirstRow(product1);
                //Enumerate all rows, related to the data object
                foreach (Row row in grid.DataObjects.Find(product1))
                {
                    //Do something here
                }
            }
            </code>
            </remarks>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PrintPage">
             <summary>
             Occurs when a page is printed or previewed.
             </summary>
             <summary>
             Provides data and methods for reporting
             </summary>
             <remarks><para>Grid provides standard printing and print preview features via <see cref="T:System.Drawing.Printing.PrintDocument"/> object that enables document printing and previewing.</para>
             <para>The example below demonstrates implementation of document preview feature:
             <code>
             public void PrintPreview(Grid grid)
             {
                PrintPreviewDialog ppd = new PrintPreviewDialog();
                ppd.Document = grid.PrintDocument;
                ppd.ShowDialog(grid);
             }
             </code></para>
            <para>The following example demonstrates implementation of content printing feature.
             <code>
             public void PrintContent(Grid grid)
             {
                PrintDialog pd = new PrintDialog();
                pd.Document = grid.PrintDocument;
                pd.ShowDialog(grid);
             }
             </code></para>
             <para>
             The grid provides callback feature for print customization. This feature can also be used to customize page headers and footers:
             <code>
             grid.PrintPage += delegate(object sender, PrintGridPageEventArgs e)
             {
                 //Print a page header
                 Rectangle rcHeader = new Rectangle(e.MarginBounds.X, e.PageBounds.Y, e.MarginBounds.Width, e.MarginBounds.Y - e.PageBounds.Y);
                 using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcHeader.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Far;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString("This is a page header. Print your text here!", SystemFonts.MenuFont, SystemBrushes.GrayText, rcHeader, sf);    
                 }
             
                 //Print a page footer
                 Rectangle rcFooter = new Rectangle(e.MarginBounds.X, e.MarginBounds.Bottom, e.MarginBounds.Width, e.PageBounds.Bottom - e.MarginBounds.Bottom);
                 using (System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcFooter.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Near;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString(string.Format("Page {0} of {1}\r\nThis is a page footer. Print your text here!", e.PageNumber, e.PagesCount), SystemFonts.MenuFont, SystemBrushes.GrayText, rcFooter, sf);
                 }
             }
             </code></para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.PrintSettings">
             <summary>
             Print settings
             </summary>
             <remarks><para>Grid provides standard printing and print preview features via <see cref="T:System.Drawing.Printing.PrintDocument"/> object that enables document printing and previewing.</para>
             <para>The example below demonstrates implementation of document preview feature:
             <code>
             public void PrintPreview(Grid grid)
             {
                PrintPreviewDialog ppd = new PrintPreviewDialog();
                ppd.Document = grid.PrintDocument;
                ppd.ShowDialog(grid);
             }
             </code></para>
            <para>The following example demonstrates implementation of content printing feature.
             <code>
             public void PrintContent(Grid grid)
             {
                PrintDialog pd = new PrintDialog();
                pd.Document = grid.PrintDocument;
                pd.ShowDialog(grid);
             }
             </code></para>
             <para>
             The grid provides callback feature for print customization. This feature can also be used to customize page headers and footers:
             <code>
             grid.PrintPage += delegate(object sender, PrintGridPageEventArgs e)
             {
                 //Print a page header
                 Rectangle rcHeader = new Rectangle(e.MarginBounds.X, e.PageBounds.Y, e.MarginBounds.Width, e.MarginBounds.Y - e.PageBounds.Y);
                 using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcHeader.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Far;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString("This is a page header. Print your text here!", SystemFonts.MenuFont, SystemBrushes.GrayText, rcHeader, sf);    
                 }
             
                 //Print a page footer
                 Rectangle rcFooter = new Rectangle(e.MarginBounds.X, e.MarginBounds.Bottom, e.MarginBounds.Width, e.PageBounds.Bottom - e.MarginBounds.Bottom);
                 using (System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcFooter.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Near;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString(string.Format("Page {0} of {1}\r\nThis is a page footer. Print your text here!", e.PageNumber, e.PagesCount), SystemFonts.MenuFont, SystemBrushes.GrayText, rcFooter, sf);
                 }
             }
             </code></para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.PrintDocument">
             <summary>
             Print document
             </summary>
             <remarks><para>Grid provides standard printing and print preview features via <see cref="T:System.Drawing.Printing.PrintDocument"/> object that enables document printing and previewing.</para>
             <para>The example below demonstrates implementation of document preview feature:
             <code>
             public void PrintPreview(Grid grid)
             {
                PrintPreviewDialog ppd = new PrintPreviewDialog();
                ppd.Document = grid.PrintDocument;
                ppd.ShowDialog(grid);
             }
             </code></para>
            <para>The following example demonstrates implementation of content printing feature.
             <code>
             public void PrintContent(Grid grid)
             {
                PrintDialog pd = new PrintDialog();
                pd.Document = grid.PrintDocument;
                pd.ShowDialog(grid);
             }
             </code></para>
             <para>
             The grid provides callback feature for print customization. This feature can also be used to customize page headers and footers:
             <code>
             grid.PrintPage += delegate(object sender, PrintGridPageEventArgs e)
             {
                 //Print a page header
                 Rectangle rcHeader = new Rectangle(e.MarginBounds.X, e.PageBounds.Y, e.MarginBounds.Width, e.MarginBounds.Y - e.PageBounds.Y);
                 using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcHeader.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Far;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString("This is a page header. Print your text here!", SystemFonts.MenuFont, SystemBrushes.GrayText, rcHeader, sf);    
                 }
             
                 //Print a page footer
                 Rectangle rcFooter = new Rectangle(e.MarginBounds.X, e.MarginBounds.Bottom, e.MarginBounds.Width, e.PageBounds.Bottom - e.MarginBounds.Bottom);
                 using (System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcFooter.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Near;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString(string.Format("Page {0} of {1}\r\nThis is a page footer. Print your text here!", e.PageNumber, e.PagesCount), SystemFonts.MenuFont, SystemBrushes.GrayText, rcFooter, sf);
                 }
             }
             </code></para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.DataSource">
            <summary>
            Gets or sets the data source that the <see cref="T:Dapfor.Net.Ui.Grid"/> is displaying data for.
            </summary>
            <value>The data source. A type, implementing one of the next interfaces: <see cref="T:System.Collections.IList"/>, <see cref="T:System.ComponentModel.IListSource"/>, <see cref="T:System.ComponentModel.IBindingList"/></value>
            <example>
            <code>
            public void SetDataSource(Grid grid)
            {
                //Build a small datatable
                DataTable table = new DataTable();
                table.Columns.Add(new DataColumn("Column1"));
                table.Columns.Add(new DataColumn("Column2"));
                table.Rows.Add(new object[] { "Row0, Col0", "Row0, Col1" });
                table.Rows.Add(new object[] { "Row1, Col0", "Row1, Col1" });
                table.Rows.Add(new object[] { "Row2, Col0", "Row2, Col1" });
            
                //Attach datatable to the grid
                grid.Headers.AutoGenerate = true;
                grid.DataSource = table;
            
                //Get the first row in Grid
                Row row1 = grid.Rows[0];
                Console.WriteLine("Row1, Column1: value = {0}", row1["Column1"].Value);
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Sort the grid
                grid.Headers[0]["Column1"].SortDirection = SortDirection.Descending;
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Filter the row1
                row1.Filtered = true;
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Other row...
                Row row2 = grid.Rows[0];
                Console.WriteLine("Row2: index in Grid: {0}, index in Datasource = {1}", row2.VisibleIndex, row2.DataSourceIndex);
                Console.WriteLine("Row2, Column1: value = {0}", row2["Column1"].Value);
            }
            
            Output:
            Row1, Column1: value = Row0, Col0
            Row1: index in Grid: 0, index in Datasource = 0
            Row1: index in Grid: 2, index in Datasource = 0
            Row1: index in Grid: -1, index in Datasource = 0
            Row2: index in Grid: 0, index in Datasource = 2
            Row2, Column1: value = Row2, Col0
            </code>
            </example> 
            <seealso cref="P:Dapfor.Net.Ui.Grid.DataSourceRows"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.DataMember">
            <summary>
            Gets or sets the name of the list or table in the data source for which the <see cref="T:Dapfor.Net.Ui.Grid"/> is displaying data.
            </summary>
            <value>The data member.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.DataSourceRows">
            <summary>
            Gets a collection of <see cref="T:Dapfor.Net.Ui.Row"/> that contain the data bound to the grid via <see cref="P:Dapfor.Net.Ui.Grid.DataSource">Grid.DataSource</see> property.
            </summary>
            <value>The collection of rows bound to the grid via <see cref="P:Dapfor.Net.Ui.Grid.DataSource">Grid.DataSource</see> property.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.DataConnection">
            <summary>
            Gets the data source properties.
            </summary>
            <value>The data connection.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.FocusSettings">
             <summary>
             Gets the focus settings of the <see cref="T:Dapfor.Net.Ui.Grid"/> such as the focus mode, color, painting mode, etc...
             </summary>
             <value>The focus settings.</value>
             <example>
             <code>
             public void FocusExample(Grid grid)
             {
                 //Set a new color with the alpha channel for the focused row.
                 grid.FocusSettings.Color = Color.FromArgb(30, 128, 0, 30);
            
                 grid.FocusedRowChanged += delegate(object sender, FocusedRowEventArgs e)
                 {
                     Console.WriteLine("Previous focused row: {0}", e.PrevFocusedRow != null ? e.PrevFocusedRow.VisibleIndex.ToString() : "not specified");
                     Console.WriteLine("New focused row: {0}", e.NewFocusedRow != null ? e.NewFocusedRow.VisibleIndex.ToString() : "not specified");
                 };
            
                 //Add some data object
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Set the row focused
                 grid.Rows[1].Focused = true;
                 
                 Console.WriteLine("Focused row visible index: {0}", grid.FocusedRow.VisibleIndex);
            
                 //Clear the focus
                 grid.FocusedRow = null;
                 //Another way to clear focus:
                 grid.FocusSettings.Clear();
             }
             
             //Console output:
             Previous focused row: not specified
             New focused row: 1
             Focused row visible index: 1
             Previous focused row: 1
             New focused row: not specified
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.FocusedRow">
             <summary>
             Gets the focused row in the <see cref="T:Dapfor.Net.Ui.Grid"/>.
             </summary>
             <value>The focused row.</value>
             <seealso cref="P:Dapfor.Net.Ui.Row.Focused"/>
             <summary>
             Gets the focus settings of the <see cref="T:Dapfor.Net.Ui.Grid"/> such as the focus mode, color, painting mode, etc...
             </summary>
             <value>The focus settings.</value>
             <example>
             <code>
             public void FocusExample(Grid grid)
             {
                 //Set a new color with the alpha channel for the focused row.
                 grid.FocusSettings.Color = Color.FromArgb(30, 128, 0, 30);
            
                 grid.FocusedRowChanged += delegate(object sender, FocusedRowEventArgs e)
                 {
                     Console.WriteLine("Previous focused row: {0}", e.PrevFocusedRow != null ? e.PrevFocusedRow.VisibleIndex.ToString() : "not specified");
                     Console.WriteLine("New focused row: {0}", e.NewFocusedRow != null ? e.NewFocusedRow.VisibleIndex.ToString() : "not specified");
                 };
            
                 //Add some data object
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Set the row focused
                 grid.Rows[1].Focused = true;
                 
                 Console.WriteLine("Focused row visible index: {0}", grid.FocusedRow.VisibleIndex);
            
                 //Clear the focus
                 grid.FocusedRow = null;
                 //Another way to clear focus:
                 grid.FocusSettings.Clear();
             }
             
             //Console output:
             Previous focused row: not specified
             New focused row: 1
             Focused row visible index: 1
             Previous focused row: 1
             New focused row: not specified
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.FocusedRowChanged">
            <summary>
            Occurs when the end used changes the focused row in the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.FocusModeChanged">
            <summary>
            Occurs when the focus mode changed.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintBackground">
            <summary>
            Occurs to paint the background of the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="T:Dapfor.Net.Ui.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="T:System.Drawing.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="T:System.Drawing.Graphics"/> object, or do it vice versa!</para>
            
            
            <para>The following example shows how to draw text over <see cref="T:Dapfor.Net.Ui.Grid"/></para>
            <code>
            public void InitializeGrid(Grid grid)
            {
                //Add an event handler 
                grid.PaintBackground += delegate(object sender, PaintBackgroundEventArgs e)
                {
                    //Do default painting 
                    e.PaintAll();
                    e.Handled = true;
            
                    //Draw a string in middle of row
                    using (Font font = new Font("Arial", 20, FontStyle.Bold | FontStyle.Italic))
                    using (StringFormat sf = new StringFormat())
                    {
                        sf.LineAlignment = StringAlignment.Center;
                        sf.Alignment = StringAlignment.Center;
                        e.Graphics.DrawString("Dapfor .Net Grid", font, SystemBrushes.GrayText, grid.ClientRectangle, sf);
                    }
                };
            }
            </code>
            </remarks>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintHeader">
            <summary>
            Occurs to paint the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintRectangle">
            <summary>
            Occurs to paint a rectangle in the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintColumnCaption">
            <summary>
            Occurs to paint the <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="T:Dapfor.Net.Ui.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="T:System.Drawing.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="T:System.Drawing.Graphics"/> object, or do it vice versa!</para>
            
            
            <para>The following example shows how customize painting in column</para>
            <code>
            public void InitializeGrid(Grid grid)
            {
                Bitmap image = new Bitmap("image.ico");
            
                //Subscribe for column painting event
                grid.PaintColumnCaption += delegate(object sender, PaintColumnCaptionEventArgs e)
                {
                    using (Brush brush = new SolidBrush(Color.DeepPink))
                    {
                        //Prevent from text painting
                        e.Parts &amp;= e.Parts ^ PaintPart.Text;
            
                        //Another way to paint the custom text (do not turn off the PaintPart.Text):
                        e.Text = "New text to show in column";
            
                        //Set a new background color
                        e.Appearance.BackColor = Color.Yellow;
            
                        //Do default painting
                        e.PaintAll();
                        e.Handled = true;
            
                        //Draw a custom image above already pained cell
                        e.Graphics.DrawImage(image, e.VirtualBounds);
                    }
                };
            }
            </code>
            </remarks>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintMergedColumn">
            <summary>
            Occurs to paint merged column.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintGroupPanel">
            <summary>
            Occurs to paint header's group panel.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintColumnPanel">
            <summary>
            Occurs to paint header's column panel.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintCell">
            <summary>
            Occurs to custom paint the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="T:Dapfor.Net.Ui.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="T:System.Drawing.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="T:System.Drawing.Graphics"/> object, or do it vice versa!</para>
            
            
            <para>The following example shows how customize painting in cell</para>
            <code>
            public void InitializeGrid(Grid grid)
            {
                //Subscribe for cell painting event
                grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
                {
                    using(Brush brush = new SolidBrush(Color.DeepPink))
                    {
                        //Prevent from text painting
                        e.Parts &amp;= e.Parts ^ PaintPart.Text;
                        
                        //Set a new background color
                        e.Appearance.BackColor = Color.Yellow;
            
                        //Do default painting without text drawing
                        e.PaintAll();
                        e.Handled = true;
            
                        //Draw a custom text above already pained cell
                        e.Graphics.DrawString("Custom string", SystemFonts.StatusFont, brush, e.Cell.VirtualBounds);
                    }
                };
            }
            </code>
            </remarks>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintRow">
            <summary>
            Occurs to paint a <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintGroupRow">
            <summary>
            Occurs to paint a group <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.PaintHierarchy">
            <summary>
            Occurs to paint a hierarchical indent (space between the row selector and <see cref="T:Dapfor.Net.Ui.Row"/> or <see cref="T:Dapfor.Net.Ui.Header"/>). 
            This indent may contain such elements as expansion button, hierarchical lines, etc.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.IsOptimizedDrawing">
            <summary>
            Gets or sets a value indicating whether the grid optimizes the drawing.
            </summary>
            <value><c>true</c> if the drawing is optimized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.RowSelector">
             <summary>
             Gets the settings of a row selector (visual element on the left side of the <see cref="T:Dapfor.Net.Ui.Grid"/>, which permits to manipulate the <see cref="T:Dapfor.Net.Ui.Row"/>s, change their height, select them,
             show related images, etc.).
             </summary>
             <value>The row selector settings.</value>
             <example>
             <code>
             public void RowSelectorExample(Grid grid)
             {
                 //Configure the headers
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Set the appearance of the row selector
                 grid.RowSelector.Appearance.BackColor = Color.LightGray;
                 grid.RowSelector.Appearance.GradientEnabled = true;
                 grid.RowSelector.Appearance.GradientEndBackColor = Color.LightSlateGray;
                 grid.RowSelector.Appearance.GradientDirection = GradientDirection.Vertical;
            
                 //Make the selector visible and set its width
                 grid.RowSelector.Visible = true;
                 grid.RowSelector.Width = 25;
            
                 //Allow the end-user to resize rows
                 grid.RowSelector.Resizable = true;
            
                 //Populate the grid
                 grid.Rows.Add(new Product());
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Hierarchy">
             <summary>
             Gets the hierarchy settings.
             </summary>
             <value>The hierarchy settings.</value>
             <example>
             <code>
             public void ConfigureGrid(Grid grid)
             {
                 //Add a new header on the top hierarchical level (level 0)
                 grid.Headers.Add(new Header());
            
                 //Add a header for the 1st hierarchical level (level 1) and make it invisible
                 grid.Headers.Add(new Header());
            
                 //Create some columns and add them to the top-level header
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers[0].Add(new Column("Price"));
            
                 //Add a column on the 1st hierarchical level
                 grid.Headers[1].Add(new Column("Name"));
            
                 //Set hierarchical appearance
                 grid.Hierarchy.ButtonBehaviour = ExpansionButtonBehaviour.ShowAlways;
                 //The width of the (+/-) button
                 grid.Hierarchy.ButtonWidth = 15;
            
                 //Draw lines between headers and rows
                 grid.Hierarchy.EnableHierarchicalLines = true;
            
                 //Add a product
                 Row row = grid.Rows.Add(new Product());
            
                 //Add two purchasers of this product at the 1st hierarchical level
                 row.Add(new Customer());
                 row.Add(new Customer());
                 row.ExpandAll();
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Threadsafety">
            <summary>
            Gets the threadsafety parameters of the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </summary>
            <value>The threadsafety.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Tooltips">
            <summary>
            Gets tooltip settings.
            </summary>
            <value>The tooltips.</value>
            <remarks>Displaying auxiliary information above a grid cell is a typical task. In the .Net Grid this process is considerably simplified. 
            To display a tooltip is is sufficient to set text calling <see cref="P:Dapfor.Net.Ui.Cell.TooltipMessage">Cell.TooltipMessage</see><b> = "some text"</b>. Color management, 
            display time and tooltip location can be set with <see cref="P:Dapfor.Net.Ui.Grid.Tooltips">Grid.Tooltips</see> property. The programmer can control tooltips via .Net Grid notifications.
            <code>
            public void ShowTooltip(Grid grid)
            {
                grid.Tooltips.TooltipEnabled = true;                      // enable tooltips
                grid.Rows[4][4].TooltipMessage = "My Custom Message";     // setting tooltip for a specific cell
                grid.Tooltips.TooltipDuration = TimeSpan.FromSeconds(3);  // hiding tooltip after 3 seconds
                grid.Tooltips.IsBalloon = true;                           // balloon-like tooltip style
                grid.Tooltips.CellFrameColor = Color.Orange;              // color of the cell's frame
            }
            </code>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.HitTests">
            <summary>
            Gets elements by their location inside the grid.
            </summary>
            <remarks>
            The grid has a convenient system of getting elements by their location inside the grid. This is done with <see cref="M:Dapfor.Net.Ui.Grid.HitTest(System.Drawing.Point)">Grid.HitTest()</see> 
            method that returns type of element in specified position. To get the element itself you can use one of <see cref="P:Dapfor.Net.Ui.Grid.HitTests">Grid.HitTests</see> methods 
            that return element pointers. We tried to create an API to avoid unnecessary type casting. An example of its use is provided below. 
            <code>
            public void HitTestExample(Grid grid)
            {
                //Get the current cursor position
                Point position = System.Windows.Forms.Cursor.Position;
            
                //Get position in the client coordinates
                position = grid.PointToClient(position);
            
                //Get a part of the grid, the cursor points to.
                HitTestInfo info = grid.HitTest(position);
            
                //Try get a header, the cursor points to.
                Header header = grid.HitTests.HeaderTest(position);
            
                //Try get a row, the cursor points to.
                Row row = grid.HitTests.RowTest(position);
            
                //Try get a cell, the cursor points to.
                Cell cell = grid.HitTests.CellTest(position);
            
                //Try get a column, the cursor points to.
                Column column = grid.HitTests.ColumnTest(position);
            
                //Do something...
            }
            </code>
            </remarks> 
            <seealso cref="M:Dapfor.Net.Ui.Grid.HitTest(System.Drawing.Point)"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.DragAndDrop">
             <summary>
             Gets the drag and drop settings.
             </summary>
             <value>The drag and drop settings.</value>
             <remarks>.Net Grid supports drag &amp; drop operations with grid rows, moving the rows within a grid and between grids, changing hierarchy, exporting data to 
             applications like Word and Excel in text format and importing data from other applications.
             The following properties should be set to true to use drag &amp; drop feature:
             <code>
             Grid.AllowDrop = true;
             Grid.DragAndDrop.Enabled = true;
             </code>
             <para>To start drag &amp; drop operation the end user should place the cursor over grid rows, left-click and start moving the row. First of all, drag &amp; drop 
             operation raises <see cref="E:Dapfor.Net.Ui.Grid.DragBegin">Grid.DragBegin</see> event that can be used to define available drag &amp; drop effects and content and, if desired, to 
             set <see cref="P:Dapfor.Net.Ui.DragContentBeginEventArgs.Data">DragContentBeginEventArgs.Data</see> property that is an object passed to <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">Control.DoDragDrop()</see> method 
             that can be used to export data to Word or Excel.</para>
             <para>The following events are called during drag &amp; drop operation when the cursor is moved to the target grid, passes over it and leaves it:
             <list type="bullet">
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent">Grid.DragEnterContent</see></item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragOverContent">Grid.DragOverContent</see></item>
             <item><see cref="E:System.Windows.Forms.Control.DragLeave">Control.DragLeave</see></item>
             </list></para>
             <para>The grid calculates the required values and data insertion position, checks whether drag &amp; drop is possible and enables customization of drag &amp; drop effects, 
             data location and data hierarchy. During drag &amp; drop operation the grid shows data insertion location indicators that enable the end user to see where exactly the 
             data will be inserted, including its position in hierarchy. The grid has user-friendly interface. If during drag &amp; drop operation the user keeps the cursor over a 
             row for 1 second, this row is automatically expanded. If the grid has a vertical scrollbar, the grid automatically scrolls if the user moves the cursor above or below the grid.</para>
             <para><b>Data insertion</b></para>
             <para>To insert data into the grid the end user moves the cursor over the grid with left mouse button pressed and the grid highlights the place of data insertion. 
             Two data insertion modes are available:
             <list type="bullet">
             <item>Flat mode, when data is inserted above the row at the current cursor position at the same hierarchy level.</item>
             <item>Data can also be inserted as a child row of the row at the current cursor position.</item>
             </list></para>
             <para>There are 3 other modes that control data insertion and are controlled by <see cref="T:Dapfor.Net.Ui.Grid.GridDragAndDrop">Grid.DragAndDrop.DropMode</see> property:
             <list type="bullet">
             <item>Flat mode only</item>
             <item>Hierarchical mode only</item>
             <item>Combined mode. In this mode the grid has special areas that can be used to set data insertion mode by placing the cursor over those areas. For flat mode such 
             areas are any place above the row except for small +/- icon. To insert data in hierarchical mode you have to place the cursor over this icon. 
             It is also possible to switch from flat mode to hierarchical mode using Shift key.</item>
             </list>
             </para>
             <para>In accordance with possible DragAndDrop effect, the grid supports 3 operations: Copy, Move and Link</para>
             <list type="bullet">
             <item>Copy. This operation creates new rows for data set in <b>DragDropContentEventArgs.Content</b>. <b>DragDropContentEventArgs.Content</b> 
             often contains a collection of rows created in the beginning of drag. In such case hierarchy, selection and expansion are preserved for newly created rows. 
             If <b>DragDropContentEventArgs.Content</b> contains other data than <see cref="T:Dapfor.Net.Ui.Row"/>, the new rows shall be created with relevant <see cref="T:Dapfor.Net.Data.IDataAccessor">DataAccessor</see>. 
             In any case data itself is not copied. If data supports <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface, newly created rows will also get data object notification.</item>
             <item>Move. Data is moved with all information of hierarchy, expansion and selection either within a grid or between grids.</item>
             <item>Link. This operation is similar to Copy, but in this operation DragDropContentEventArgs.Content may contain only Row collection.</item>
             </list>
             <para><b>Drag &amp; drop customization</b></para>
             <para>The grid provides a lot of customization opportunities in the form of event subscription that enable you to modify insertion content, mode and location and 
             to control visual effects of drag &amp; drop operation:
             <list type="bullet">
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragBegin">Grid.DragBegin</see> - controls content and initiation of drag &amp; drop operation. When grids copy or move data in an application they work with content. 
             If you need to send data to Excel, you can set a Data object containing image, string or any other object implementing IDataObject interface. This object is transferred to 
             <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">Control.DoDragDrop</see> method enabling data exchange with external applications.</item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent">Grid.DragEnterContent</see> and <see cref="E:Dapfor.Net.Ui.Grid.DragOverContent">Grid.DragOverContent</see> enable controlling various visual 
             effects and defining data insertion location, data hierarchy and inserted content.</item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragDropContent">Grid.DragDropContent</see> enables direct control of content insertion. If data is inserted from another grid, 
             <b>DragDropContentEventArgs.Content</b> should be defined in advance. It is possible to call any content insertion operation, 
             i.e. <b>DoCopy()/DoMove()/DoLink()</b>. Data will be inserted to the current position via <b>DragDropContentEventArgs.TargetRow</b> and 
             <b>DragDropContentEventArgs.TargetPosition</b>. These parameters can be modified at any moment. If drag &amp; drop operation 
             is initiated by another control or outside the application, <b>DragDropContentEventArgs.Content</b> will have null value. 
             In this case data can be received from <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.Data">DragContentEventArgs.Data</see>, which is an <see cref="T:System.Windows.Forms.IDataObject"/> object. 
             <see cref="T:Dapfor.Net.Ui.DragDropContentEventArgs"/> also provides methods for inserting data to the grid via <see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoCopy">DoCopy(...)</see>/
             <see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoMove">DoMove(...)</see>/<see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoLink(System.Boolean)">DoLink(...)</see> to the position determined by current value of 
             <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.TargetRow"/> and <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.TargetPosition"/>. This provides a possibility to import data to the grid from external applications.</item>
             </list>
             </para>
             </remarks>
             <example>
             To import data, Excel sends a text string formatted with the above-described method. The grid cannot process such string directly, but it has powerful features for 
             transforming data from Excel format to the format of application business data. Below is an example demonstrating exporting/importing data to/from Excel. 
             <code>
             //Implementation of the method, dragging data from the grid   
             private void OnDragBegin(object sender, DragContentBeginEventArgs e)
             {
                  //Create a string to put it to Excel
                  StringBuilder sb = new StringBuilder();
                  foreach (Row row in e.Content)
                  {
                      if (sb.Length &gt; 0) sb.AppendLine();
                      StringBuilder sbRow = new StringBuilder();
                      foreach (Column column in row.Header)
                      {
                          if (sbRow.Length &gt; 0) sbRow.Append("\t");
                          sbRow.Append(row[column.Id].Text);
                      }
                      sb.Append(sbRow);
                  }
                 e.Data = sb.ToString();
             }
            
             //Drag over event handler
             private void OnDragOverContent(object sender, DragContentEventArgs e)
             {
                 //The content is not specified. The data can be found in e.Data (IDataObject)
                 if (e.Content == null)
                 {
                     e.Effect = DragDropEffects.Copy;
                 }
             }
            
             //Drop data event handler
             private void OnDragDropContent(object sender, DragDropContentEventArgs e)
             {
                 if (e.Content == null)
                 {
                     string data = e.Data.GetData(typeof(string)) as string;
                     if (!string.IsNullOrEmpty(data))
                     {
                         string[] lines = data.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                         foreach (string line in lines)
                         {
                             string[] values = line.Split(new string[] { "\t" }, StringSplitOptions.None);
            
                             //Add an array of values to the grid. Here you can also create your own object and insert it to the grid 
                             e.DoCopy(values);
                         }
                         e.Handled = true;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.DragBegin">
            <summary>
            Occurs when the user begins the drag &amp; drop operation
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.DragEnd">
            <summary>
            Occurs when the user ends the drag &amp; drop operation
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.DragEnterContent">
            <summary>
            Occurs when a content is dragged into the grid's bounds.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.DragOverContent">
            <summary>
            Occurs when a content is dragged over the grid's bounds.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.DragDropContent">
            <summary>
            Occurs when a drag-and-drop operation is completed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Appearance">
             <summary>
             Gets appearances and visual styles, defined for the current instance of the <see cref="T:Dapfor.Net.Ui.Grid"/>.
             </summary>
             <value>The appearances.</value>
             <remarks>
             <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
             colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
             <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
             However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
             can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
             properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
             </para>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             
             <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
             <code>
             grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
             {
                 //custom paint...
                 e.Appearance.BackColor = Color.Red;
                 e.Font = SystemFonts.MenuFont;
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="E:Dapfor.Net.Ui.Grid.AppearanceChanged">
            <summary>
            Occurs when the <see cref="P:Dapfor.Net.Ui.Grid.Appearance"/> is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.HeaderContextMenu">
            <summary>
            Gets a context menu control that is displayed when the user tries to configure header columns.
            </summary>
            <value>The header context menu.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.Highlighting">
             <summary>
             Gets the highlighting settings, such as the highlight interval, color, mode, fading effect parameters...
             </summary>
             <value>The highlighting settings.</value>
             <remarks>
             <para>While <see cref="T:Dapfor.Net.Ui.Cell"/> highlighting, the <see cref="T:Dapfor.Net.Ui.Grid"/> blends the highlighting color with the background color of the <see cref="T:Dapfor.Net.Ui.Cell"/>. It takes into account the alpha-channel 
             of the <see cref="P:Dapfor.Net.Ui.Grid.GridHighlighting.Color"/> to prevent from the background color erasing. 255 value of the alpha channel means that the highlighting color is opaque, 0 - transparent. </para>
             <para>If the fading effect is enabled, the alpha-value of the highlighting color will evaluate with time. During the highlighting <see cref="P:Dapfor.Net.Ui.Grid.GridHighlighting.Interval"/> each 
             <see cref="P:Dapfor.Net.Ui.Grid.GridHighlighting.RefreshInterval"/> the <see cref="T:Dapfor.Net.Ui.Cell"/> will be repainted with a new highlighting color.</para>
             </remarks>
             <threadsafety>The returned class is not thread safe, but notifications from the data object are safe.</threadsafety>
             <example>
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 //Some fields
                 private double price;
                 private DateTime maturity;
            
                 [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                 public double Price
                 {
                     get { return price; }
                     set
                     {
                         if (price != value)
                         {
                             price = value;
                             //Notify about color changing
                             if (PropertyChanged != null)
                             {
                                 PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                             }
                         }
                     }
                 }
            
                 public DateTime Maturity
                 {
                     get { return maturity; }
                 }
            
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             //Using sample
             public void HoToHighlightCell(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Maturity"));
            
                 //Enable the highlighting 
                 grid.Highlighting.Enabled = true;
            
                 //Set a highlighting color, which is blended with the color of the cell
                 //The grid supports alpha-channel. This prevents from the background color erasing.
                 //255 - opaque, 0 - transparent
                 grid.Highlighting.Color = System.Drawing.Color.FromArgb(200, 210, 60, 84);
            
                 //Enable the fading effect
                 grid.Highlighting.Fading = true;
            
                 //Set an interval of 2 seconds to highlight the cell
                 grid.Highlighting.Interval = new TimeSpan(0, 0, 0, 2);
            
                 //Set a refresh interval of 30 milliseconds to repaint the cell
                 //With the fading effect the alpha-value of the highlighting color will evaluate with time.
                 //Each 30 milliseconds the grid will repaint the cell with a new highlighting color.
                 grid.Highlighting.RefreshInterval = new TimeSpan(0, 0, 0, 0, 30);
            
            
                 //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                 Product product = new Product();
                 grid.Rows.Add(product);
            
                 //The object will notify the grid through the INotifyPropertyChanged, and the grid will automatically 
                 //start the highlighting process for the affected cell.
                 //If the call comes from the non-GUI thread, the grid will synchronize them without blocking the calling thread.
                 product.Price = 12.34;
            
                 //Another way to highlight the cell. The cell will be highlighted for 2 seconds with the red color and fading effect
                 Cell cell = grid.Rows[0]["Price"];
                 cell.Highlight(new TimeSpan(0, 0, 0, 3), Color.Red);
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.Impl.UpdateSelection(Dapfor.Net.Ui.Row,Dapfor.Net.Ui.Row,System.Boolean)">
            <summary>
            Selects a new focused <see cref="T:Dapfor.Net.Ui.Row"/>. If the shift key is pressed then the <see cref="T:Dapfor.Net.Ui.Grid"/>
            selects all rows between previous and new focused <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <param name="startFocus">The previous focused <see cref="T:Dapfor.Net.Ui.Row"/>.</param>
            <param name="newFocus">The new focused <see cref="T:Dapfor.Net.Ui.Row"/>.</param>
            <param name="shift"><c>true</c> the shift key is pressed.</param>
            <seealso cref="P:Dapfor.Net.Ui.Row.Selected"/>
        </member>
        <member name="T:Dapfor.Net.Data.IDataAccessor">
            <summary>
            Provides uniform access to data of various types (objects of custom classes, rows in data tables, lists, dictionaries...). 
            </summary>
            <remarks>
            <para>.Net Grid is able to manipulate various data types, including user defined classes, string arrays or other objects, IList&lt;T&gt;, Dictionary&lt;K, V&gt;, where K is a string identifier or some other type. As you remember, all this broad range of data can be inserted into the .Net Grid through the Grid.Rows.Add(object) / Row.Add(object). Besides that, the grid can be connected to a data source that implements IList, IListSource or IBindingList interfaces.</para>
            <para>Such broad functionality of the .Net Grid is possible due to the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface that is one of the most crucial part of the grid. The main purpose of this interface is to normalize presentation of different data types in the grid. There are lots of implementations of <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface. This way, a programmer can add his own implementation to broaden the list of data types that can be used by the .Net Grid. When you call <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)"/>, an implementation of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface is created implicitly for 'your object' and the .Net Grid works with it only via the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> proxy, making no difference between the data types.</para>
            <para>Intrinsically, IDataAccessor interface is nothing more than a simple 'container' for data object fields (<see cref="T:Dapfor.Net.Data.IDataField"/> object), that should be displayed 
            in a grid cell. Each field contains an identifier, a name, a description, information about formats and editors, and it can be used to get values from a data object or 
            to set values. Please note, that for different objects the process of getting or setting values of a data object may vary. For user-defined classes you can use 
            the reflection mechanism to get or set values. For IList&lt;T&gt; the grid gets them with a certain index; for IDictionary&lt;string, object&gt; with a string key so on. 
            IDataAccessor may support or not support data field identifiers it merely depends on its nature. If an object of user defined class is inserted into the grid, than 
            its property name become the identifiers in the IDataAccessor by default. However, sometimes identifiers may be absent, e.g. if you you use an IList&lt;T&gt; object as 
            a parameter of the method Grid.Rows.Add('your object'). In such case, to display data in cells the .Net Grid uses indices of IList&lt;T&gt; and index of the column which 
            is calculated when it is inserted into the header.</para>
            
            <para>IDataAccessor is able to subscribe to events of data objects implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface and transfer them into the grid. 
            This approach is widely used in the event-driven model. Please note, that all implementations of the IDataAccessor interface in the Dapfor's package are thread-safe!</para>
            
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
                
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        price = value;
                        if(PropertyChanged != null)
                        {
                            PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                        }
                    }
                }
                public DateTime Maturity
                {
                    get { return maturity; }
                }
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Using sample
            public void AddDataObjectToGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Maturity"));
                
                //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                Product product = new Product();
                grid.Rows.Add(product);
            
                //Add a collection of values to the grid.
                //Because of this collection implements IList, it will be implicitly wrapped by the ListDataAccessor
                grid.Rows.Add(new double[] {123, 12, 45});
            
                //The object will notify the grid through the INotifyPropertyChanged, and the grid will automatically
                //invalidate, sort, filter and highlight the affected cells.
                product.Price = 12.34;
            }
            </code>
            </remarks>
            <seealso cref="T:Dapfor.Net.Data.DataObjectAccessor"/> 
        </member>
        <member name="P:Dapfor.Net.Data.IDataAccessor.Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataAccessor.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether this accessor supports field indexing by the string identifiers. 
            </summary>
            <value>
            	<c>true</c> if this accessor supports <see cref="T:Dapfor.Net.Data.IDataField"/> indexing by string identifiers; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:Dapfor.Net.Data.IDataField.Id"/>
        </member>
        <member name="P:Dapfor.Net.Data.IDataAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value><c>true</c> if they fire notifications; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataAccessor.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>The underlying data object.</value>
        </member>
        <member name="E:Dapfor.Net.Data.IDataAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Data.IDataField">
            <summary>
            Field of <see cref="T:Dapfor.Net.Data.IDataAccessor"/>. 
            Enables a programmer to get or modify value of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/>. Typically, this class can represent a property of a data object, a value in a collection, etc. 
            </summary>
            <remarks>
            <para>.Net Grid is able to manipulate various data types, including user defined classes, string arrays or other objects, IList&lt;T&gt;, Dictionary&lt;K, V&gt;, where K is a string identifier or some other type. As you remember, all this broad range of data can be inserted into the .Net Grid through the Grid.Rows.Add(object) / Row.Add(object). Besides that, the grid can be connected to a data source that implements IList, IListSource or IBindingList interfaces.</para>
            <para>Such broad functionality of the .Net Grid is possible due to the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface that is one of the most crucial part of the grid. The main purpose of this interface is to normalize presentation of different data types in the grid. There are lots of implementations of <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface. This way, a programmer can add his own implementation to broaden the list of data types that can be used by the .Net Grid. When you call <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)"/>, an implementation of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface is created implicitly for 'your object' and the .Net Grid works with it only via the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> proxy, making no difference between the data types.</para>
            <para>Intrinsically, IDataAccessor interface is nothing more than a simple 'container' for data object fields (<see cref="T:Dapfor.Net.Data.IDataField"/> object), that should be displayed 
            in a grid cell. Each field contains an identifier, a name, a description, information about formats and editors, and it can be used to get values from a data object or 
            to set values. Please note, that for different objects the process of getting or setting values of a data object may vary. For user-defined classes you can use 
            the reflection mechanism to get or set values. For IList&lt;T&gt; the grid gets them with a certain index; for IDictionary&lt;string, object&gt; with a string key so on. 
            IDataAccessor may support or not support data field identifiers it merely depends on its nature. If an object of user defined class is inserted into the grid, than 
            its property name become the identifiers in the IDataAccessor by default. However, sometimes identifiers may be absent, e.g. if you you use an IList&lt;T&gt; object as 
            a parameter of the method Grid.Rows.Add('your object'). In such case, to display data in cells the .Net Grid uses indices of IList&lt;T&gt; and index of the column which 
            is calculated when it is inserted into the header.</para>
            
            <para>IDataAccessor is able to subscribe to events of data objects implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface and transfer them into the grid. 
            This approach is widely used in the event-driven model. Please note, that all implementations of the IDataAccessor interface in the Dapfor's package are thread-safe!</para>
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        if (price != value)
                        {
                            price = value;
                            //Notify about color changing
                            if (PropertyChanged != null)
                            {
                                PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                            }
                        }
                    }
                }
            
                public DateTime Maturity
                {
                    get { return maturity; }
                }
            
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Using sample
            public void InitializeGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Maturity"));
            
                Console.WriteLine("Current thread: {0}", Thread.CurrentThread.ManagedThreadId);
            
                grid.RowUpdated += delegate(object sender, GridRowUpdateEventArgs e)
                {
                    int threadId = Thread.CurrentThread.ManagedThreadId;
                    Console.WriteLine("The data object has been updated. Row = {0}, Field = {1}, Value = {2}, Thread = {3}", e.Row.VisibleIndex, e.DataField.Id, e.DataField.Value, threadId);
                };
            
                //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                Product product = new Product();
                grid.Rows.Add(product);
            
                //The object will notify the grid through the INotifyPropertyChanged, and the grid will automatically 
                //invalidate, sort, filter and highlight the affected cells.
                product.Price = 12.34;
            
                //Notify the grid from the non-GUI thread
                ThreadPool.QueueUserWorkItem(delegate
                {
                    int threadId = Thread.CurrentThread.ManagedThreadId;
                    Console.WriteLine("Update data object from non-GUI thread (Thread = {0})", threadId);
            
                    //If the call comes from the non-GUI thread, the grid will synchronize them without blocking the calling thread.
                    product.Price = 25.66;
                });
            }
            
            //Console output:
            Current thread: 7
            The data object has been updated. Row = 0, Field = Price, Value = 12,34, Thread = 7
            Update data object from non-GUI thread (Thread = 9)
            The data object has been updated. Row = 0, Field = Price, Value = 25,66, Thread = 7
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.IDataField.NotifyUpdate">
            <summary>
            Notifies listeners of <see cref="T:Dapfor.Net.Data.IDataAccessor"/> about the field updating.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Id">
            <summary>
            Gets a string identifier of the data field. This identifier must be unique across the <see cref="T:Dapfor.Net.Data.IDataAccessor"/>.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Index">
            <summary>
            Gets an index of the property.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.DisplayName">
            <summary>
            Gets user-friendly name, the property is displayed with. Usually is has a short form to display in columns.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Description">
            <summary>
            Gets description of the property. Usually the full user-friendly description or explanation of the property. 
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Format">
            <summary>
            Gets a format to transform the value, returned by the <see cref="P:Dapfor.Net.Data.IDataField.Value"/> property to a string and vice-versa.
            If the format successfully parses the string, the resulting value will be passed to the <see cref="P:Dapfor.Net.Data.IDataField.Value"/> method.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Browsable">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Data.IDataField"/> is browsable in property-like grids.
            </summary>
            <value><c>true</c> if browsable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Bindable">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Data.IDataField"/> is bindable.
            </summary>
            <value><c>true</c> if bindable; otherwise, <c>false</c>. If the property returns false, then the column,
            corresponding to this property will not be available.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Readonly">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Data.IDataField"/> is readonly.
            </summary>
            <value><c>true</c> if readonly; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Editor">
            <summary>
            Gets the editor to edit values of this <see cref="T:Dapfor.Net.Data.IDataField"/> at design or run time.
            </summary>
            <value>The editor if exists. Otherwise <c>null</c>.</value>
            <remarks>The <see cref="N:System.ComponentModel"/> provides two types of editors. Dialog-based that is
            shown as a modal or non-modal <see cref="T:System.Windows.Forms.Form"/> and ones, shown in a drop down control. 
            It is possible to declare a custom editor by using <see cref="T:System.ComponentModel.EditorAttribute"/>.</remarks>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.FieldType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>The type of the field.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.DataAccessor">
            <summary>
            Gets the accessor to the data object.
            </summary>
            <value>The data accessor.</value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.IsComposite">
            <summary>
            Gets a value indicating whether this data filed is composite.
            </summary>
            <value>
            	<c>true</c> if this data field is composite; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.IsHierarchical">
            <summary>
            Gets a value indicating whether an object or a collection of objects returned by the field should be added to the grid as children of the current data object
            </summary>
            <value>
            	<c>true</c> if the an object or a collection of objects returned by the field should be added to the grid as children of the current data object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.IDataField.Value">
            <summary>
            Gets or sets the value of this <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The value.</value>
        </member>
        <member name="F:Dapfor.Net.Internal.TransparentImageHolder.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.TransparentImageHolder.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Internal.TransparentImageHolder.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridSerializationState">
            <summary>
            Grid serialization state
            </summary>
            <remarks>
            <para>Data serialization is a process of saving user preferences for a grid, such as colors, columns location, grouping, sorting and other data into an archive for further 
            deserialization. For example, this feature may be useful when you restart your application. In general, this procedure is very complex and requires familiarity with 
            XML or binary archives. Besides that, a programmer sometimes fails to save state of the whole application, which results in loss of data and user preferences</para>
            
            <para>We provide you with a very convenient and efficient way to save and restore the grid's state. The .Net Grid supports serialization in XML as well as 
            in binary formats via the <see cref="P:Dapfor.Net.Ui.Grid.SerializationState"/> property. The object returned by this property implements <see cref="T:System.Xml.Serialization.IXmlSerializable"/> 
            and <see cref="T:System.Runtime.Serialization.ISerializable"/> interfaces which allow it to be serialized into XML or binary files. During deserialization this object is restored from these 
            files and is passed to the grid via the Grid.SerializationState property.</para>
            
            <para>Example of XML serialization:
            <code>
            //The method serializes the grid's state into the XML file
            void XmlSerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    serializer.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void XmlDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    grid.SerializationState = (Grid.GridSerializationState)serializer.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>Example of binary serialization: 
            <code>
            //The method serializes the grid's state into the XML file
            void BinarySerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    formatter.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void BinaryDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    grid.SerializationState = (Grid.GridSerializationState)formatter.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>A very nice feature of the Dapfor.Net Grid is that a programmer may transfer state of one grid into another:
            <code>grid1.SerializationState = grid2.SerializationState;</code>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSerializationState.#ctor">
            <summary>
            Default constructor. Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid.GridSerializationState"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSerializationState.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid.GridSerializationState"/> class and deserializes data from binary archive.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSerializationState.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSerializationState.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSerializationState.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSerializationState.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridAppearance">
             <summary>
             Grid appearance. Specifies appearance for even and odd rows.
             </summary>
             <threadsafety>The class is not thread safe.</threadsafety>
             <remarks>
             <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
             colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
             <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
             However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
             can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
             properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
             </para>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             
             <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
             <code>
             grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
             {
                 //custom paint...
                 e.Appearance.BackColor = Color.Red;
                 e.Font = SystemFonts.MenuFont;
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearance.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.SerializationState">
            <summary>
            Gets or sets the serialization state of the Grid's appearance.
            </summary>
            <value>The serialization state.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.EvenRows">
             <summary>
             Gets a default appearance of even <see cref="T:Dapfor.Net.Ui.Row"/>s
             </summary>
             <value>The appearance.</value>
             <example>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for the cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.OddRows">
             <summary>
             Gets a default appearance of even <see cref="T:Dapfor.Net.Ui.Row"/>s
             </summary>
             <value>The appearance.</value>
             <example>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for the cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.GroupRows">
            <summary>
            Gets or sets the appearance of group rows.
            </summary>
            <value>The group rows appearance.</value>
            <code>
            grid.Appearance.GroupRows.ForeColor = Color.Green;
            </code>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.GroupRowsImageSettings">
            <summary>
            Gets the settings of the image in the group <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The image settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.GroupRowsTextSettings">
            <summary>
            Gets the settings of the text in the group <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The image settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.GroupRowsTextAlignment">
            <summary>
            Gets or sets the text alignment in group <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.GroupPanel">
            <summary>
            Gets a default appearance of the group panel
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.ColumnPanel">
            <summary>
            Gets a default appearance of the column panel
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.VerticalLines">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Grid"/> should display vertical lines between cells.
            </summary>
            <value><c>true</c> if vertical lines should be displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.HorizontalLines">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Grid"/> should display horizontal lines between cells.
            </summary>
            <value><c>true</c> if horizontal lines should be displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.VerticalLinesColor">
            <summary>
            Gets or sets the color of the vertical lines.
            </summary>
            <value>The color of the vertical lines.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.HorizontalLinesColor">
            <summary>
            Gets or sets the color of the horizontal lines.
            </summary>
            <value>The color of the horizontal lines.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.VerticalFullSizeLines">
            <summary>
            Gets or sets a value indicating whether the grid should display vertical lines between cells if there are no specified rows.
            </summary>
            <value>
            	<c>true</c> if lines are displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridAppearance.HorizontalFullSizeLines">
            <summary>
            Gets or sets a value indicating whether the grid should display horizontal lines between cells if there are no specified columns.
            </summary>
            <value>
            	<c>true</c> if lines are displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridAppearanceSerializationState">
            <summary>
            Grid's appearance serialization state
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearanceSerializationState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid.GridAppearanceSerializationState"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearanceSerializationState.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid.GridSerializationState"/> class and deserializes data from binary archive.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearanceSerializationState.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearanceSerializationState.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearanceSerializationState.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridAppearanceSerializationState.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.ThemeAppearance">
            <summary>
            Appearance of graphical elements, which can be incorporated into a theme.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.ThemeAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid.ThemeAppearance"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.ThemeAppearance.#ctor(Dapfor.Net.Ui.Grid.ThemeAppearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid.ThemeAppearance"/> class.
            </summary>
            <param name="appearance">The appearance.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.ThemeAppearance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.ThemeAppearance.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.ColumnNormal">
            <summary>
            Gets or sets the column appearance in normal state.
            </summary>
            <value>The column appearance in normal state.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.ColumnPressed">
            <summary>
            Gets or sets the column appearance in pressed state.
            </summary>
            <value>The column appearance in pressed state.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.ColumnHover">
            <summary>
            Gets or sets the column appearance when the mouse is over the column.
            </summary>
            <value>The column appearance when the mouse is over the column.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.GroupPanel">
            <summary>
            Gets or sets the group panel appearance.
            </summary>
            <value>The group panel appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.RowSelectorNormal">
            <summary>
            Gets or sets the row selector appearance.
            </summary>
            <value>The row selector appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.RowSelectorHover">
            <summary>
            Gets or sets the row selector appearance when the mouse is over the control.
            </summary>
            <value>The row selector appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.RowSelectorPressed">
            <summary>
            /// Gets or sets the row selector appearance when the left mouse button is pressed.
            </summary>
            <value>The row selector appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.EvenRow">
            <summary>
            Gets or sets the even row appearance.
            </summary>
            <value>The even row appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.OddRow">
            <summary>
            Gets or sets the odd row appearance.
            </summary>
            <value>The odd row appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.GroupRow">
            <summary>
            Gets or sets the group row appearance.
            </summary>
            <value>The group row appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.SelectionColor">
            <summary>
            Gets or sets the color of selected rows.
            </summary>
            <value>The color of selected rows.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.FocusedRowColor">
            <summary>
            Gets or sets the color of the focused rows.
            </summary>
            <value>The color of the focused rows.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.BackColor">
            <summary>
            Gets or sets the background color of the grid.
            </summary>
            <value>The the background color of the grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.AddRowColor">
            <summary>
            Gets or sets the add row color.
            </summary>
            <value>The color of the add row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.EditorHotFrameColor">
            <summary>
            Gets or sets the color of the editor hot frame.
            </summary>
            <value>The color of the editor hot frame.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.LassoSelectionColor">
            <summary>
            Gets or sets the color of the lasso selection.
            </summary>
            <value>The color of the lasso selection.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.CurrentRowImage">
            <summary>
            Gets or sets a row selector image of focuced row.
            </summary>
            <value>The row selector image of focuced row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.AddRowImage">
            <summary>
            Gets or sets a row selector image of adding row.
            </summary>
            <value>The row selector image of adding row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.ThemeAppearance.Editor">
            <summary>
            Gets or sets the appearance of the column filter or editor.
            </summary>
            <value>The column filter or editor appearance.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridSelection">
             <summary>
             Collection of selected <see cref="T:Dapfor.Net.Ui.Row"/>s.
             </summary>
             <threadsafety>The class is not thread safe.</threadsafety>
             <remarks>
             You can select single or multiple rows in the grid with <see cref="P:Dapfor.Net.Ui.Row.Selected">Row.Selected</see> property and <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.Enabled">Grid.Selection.Enabled</see> / 
             <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.MultipleEnabled">Grid.Selection.MultipleEnabled</see> property. All selected lines are added to <see cref="P:Dapfor.Net.Ui.Grid.Selection">Grid.Selection</see> collection
             that supports iteration. To unselect all rows, call <see cref="M:Dapfor.Net.Ui.Grid.GridSelection.Clear">Grid.Selection.Clear()</see> method. 
             <code>
             public void ExampleSelection(Grid grid)
             {
                 //Set a new semi-transparent color for selected rows
                 grid.Selection.Color = Color.FromArgb(80, 102, 36, 10);
            
                 //Allow selection in grid
                 grid.Selection.Enabled = true;
            
                 //Allow multiple selection in grid
                 grid.Selection.MultipleEnabled = true;
            
                 //Rows in the collection should be in order
                 grid.Selection.Sorted = true;
            
            
                 //Select the 5th row
                 grid.Rows[5].Selected = true;
            
                 //Enumerate the selected rows...
                 foreach (Row row in grid.Selection)
                 {
                     //Do something here...
                 }
            
                 //Clear the selection
                 grid.Selection.Clear();
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSelection.Clear">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSelection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSelection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSelection.Count">
            <summary>
            Gets a count of selected <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSelection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Row"/> at the specified index.
            </summary>
            <value>Index of the selected row.</value>
            <remarks>The <see cref="T:Dapfor.Net.Ui.Row"/>s are stored in the order when the <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.Sorted"/> flag is set to <c>true</c>.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSelection.Color">
            <summary>
            Gets or sets a color of selected <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <value>The color.</value>
            <remarks>The <see cref="T:Dapfor.Net.Ui.Grid"/> supports the alpha channel for selected and focused rows and cells. 
            This prevents from erasing the initial background color for that rows and cells. 255 - opaque, 0 - transparent.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSelection.Enabled">
             <summary>
             Gets or sets a value indicating whether the selection is enabled.
             </summary>
             <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
             <remarks>
             You can select single or multiple rows in the grid with <see cref="P:Dapfor.Net.Ui.Row.Selected">Row.Selected</see> property and <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.Enabled">Grid.Selection.Enabled</see> / 
             <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.MultipleEnabled">Grid.Selection.MultipleEnabled</see> property. All selected lines are added to <see cref="P:Dapfor.Net.Ui.Grid.Selection">Grid.Selection</see> collection
             that supports iteration. To unselect all rows, call <see cref="M:Dapfor.Net.Ui.Grid.GridSelection.Clear">Grid.Selection.Clear()</see> method. 
             <code>
             public void ExampleSelection(Grid grid)
             {
                 //Set a new semi-transparent color for selected rows
                 grid.Selection.Color = Color.FromArgb(80, 102, 36, 10);
            
                 //Allow selection in grid
                 grid.Selection.Enabled = true;
            
                 //Allow multiple selection in grid
                 grid.Selection.MultipleEnabled = true;
            
                 //Rows in the collection should be in order
                 grid.Selection.Sorted = true;
            
            
                 //Select the 5th row
                 grid.Rows[5].Selected = true;
            
                 //Enumerate the selected rows...
                 foreach (Row row in grid.Selection)
                 {
                     //Do something here...
                 }
            
                 //Clear the selection
                 grid.Selection.Clear();
             }
             </code>
             </remarks>
             <seealso cref="P:Dapfor.Net.Ui.Grid.GridSelection.MultipleEnabled"/>
             <seealso cref="P:Dapfor.Net.Ui.Row.Selected"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSelection.MultipleEnabled">
             <summary>
             Gets or sets a value indicating whether the multiple <see cref="T:Dapfor.Net.Ui.Row"/> selection is enabled.
             </summary>
             <value>
             	<c>true</c> if multiple <see cref="T:Dapfor.Net.Ui.Row"/>s can be selected; otherwise, <c>false</c>.
             </value>
             <remarks>
             You can select single or multiple rows in the grid with <see cref="P:Dapfor.Net.Ui.Row.Selected">Row.Selected</see> property and <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.Enabled">Grid.Selection.Enabled</see> / 
             <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.MultipleEnabled">Grid.Selection.MultipleEnabled</see> property. All selected lines are added to <see cref="P:Dapfor.Net.Ui.Grid.Selection">Grid.Selection</see> collection
             that supports iteration. To unselect all rows, call <see cref="M:Dapfor.Net.Ui.Grid.GridSelection.Clear">Grid.Selection.Clear()</see> method. 
             <code>
             public void ExampleSelection(Grid grid)
             {
                 //Set a new semi-transparent color for selected rows
                 grid.Selection.Color = Color.FromArgb(80, 102, 36, 10);
            
                 //Allow selection in grid
                 grid.Selection.Enabled = true;
            
                 //Allow multiple selection in grid
                 grid.Selection.MultipleEnabled = true;
            
                 //Rows in the collection should be in order
                 grid.Selection.Sorted = true;
            
            
                 //Select the 5th row
                 grid.Rows[5].Selected = true;
            
                 //Enumerate the selected rows...
                 foreach (Row row in grid.Selection)
                 {
                     //Do something here...
                 }
            
                 //Clear the selection
                 grid.Selection.Clear();
             }
             </code>
             </remarks>
             <seealso cref="P:Dapfor.Net.Ui.Grid.GridSelection.Enabled"/>
             <seealso cref="P:Dapfor.Net.Ui.Row.Selected"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSelection.Sorted">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Grid"/> keeps selected <see cref="T:Dapfor.Net.Ui.Row"/>s in a sorted order.
            </summary>
            <value><c>true</c> if sorted; otherwise, <c>false</c>.</value>
            <remarks>The sort of selected <see cref="T:Dapfor.Net.Ui.Row"/>s takes CPU resources. Set this property to <c>false</c> to accelerate the <see cref="T:Dapfor.Net.Ui.Grid"/>.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSelection.LassoSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether the lasso selection is enabled.
            </summary>
            <value>
            	<c>true</c> if the lasso selection is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSelection.LassoSelectionColor">
            <summary>
            Gets or sets the color of the lasso selection.
            </summary>
            <value>The color of the lasso selection.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridNavigarion">
             <summary>
              <see cref="T:Dapfor.Net.Ui.Grid"/> navigation settings and methods to handle user input such as KeyUp, KeyDows etc.
             </summary>
             <example>Shows how to navigate programmatically in the <see cref="T:Dapfor.Net.Ui.Grid"/>
             <code>
             public void ExampleNavigation(Grid grid)
             {
                 //If the user presses the left arrow, the grid will move the focus to the first visible row 
                 //on the same hierarchical level
                 grid.Navigation.JumpToFirstChildOnKeyLeft = true;
            
                 //If the user presses the right arrow, the grid will move the focus to the last visible row 
                 //on the same hierarchical level
                 grid.Navigation.JumpToLastChildOnKeyRight = true;
            
                 //The grid can move the focus between different hierarchical levels 
                 //when the user presses key up or key down
                 grid.Navigation.KeepLevelOnKeyUpDown = true;
             
                 //Move the focus to the previous row and ensure it visible
                 grid.Navigation.Up();
             
                 //Move the focus to the end and ensure the focused row visible
                 grid.Navigation.End();
             
                 //Subscribe for events
                 grid.FocusedRowChanged += OnFocusedRowChanged;
             }
             
             void OnFocusedRowChanged(object sender, FocusedRowEventArgs e)
             {
                 //Your code...
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.Up">
            <summary>
            Moves the focus up to the previous <see cref="T:Dapfor.Net.Ui.Row"/> and ensures its visibility.
            </summary>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Navigation"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.Down">
            <summary>
            Moves the focus down to the next <see cref="T:Dapfor.Net.Ui.Row"/> and ensures its visibility.
            </summary>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Navigation"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.PageUp">
            <summary>
            Moves the focus up to the previous displayed page and ensures visibility of the new focused <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Navigation"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.PageDown">
            <summary>
            Moves the focus down to the next displayed page and ensures visibility of the new focused <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Navigation"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.Home">
            <summary>
            Moves the focus to the first <see cref="T:Dapfor.Net.Ui.Row"/> in the <see cref="T:Dapfor.Net.Ui.Grid"/> and ensures its visibility.
            </summary>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Navigation"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.End">
            <summary>
            Moves the focus to the bottom <see cref="T:Dapfor.Net.Ui.Row"/> in the <see cref="T:Dapfor.Net.Ui.Grid"/> and ensures its visibility.
            </summary>
            <seealso cref="P:Dapfor.Net.Ui.Grid.Navigation"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.Right">
            <summary>
            Moves the focus to the right <see cref="T:Dapfor.Net.Ui.Cell"/> or the next <see cref="T:Dapfor.Net.Ui.Row"/> in the <see cref="T:Dapfor.Net.Ui.Grid"/> and ensures its visibility.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.Left">
            <summary>
            Moves the focus to the left <see cref="T:Dapfor.Net.Ui.Cell"/> or the previous <see cref="T:Dapfor.Net.Ui.Row"/> in the <see cref="T:Dapfor.Net.Ui.Grid"/> and ensures its visibility.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.Enter">
            <summary>
            Expands or collapse the focused <see cref="T:Dapfor.Net.Ui.Row"/> or starts edit in place on the focused <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridNavigarion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridNavigarion.ExpandOnKeyRight">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Row"/> is expanded when
            the end user presses the right arrow key.
            </summary>
            <value><c>true</c> if <see cref="T:Dapfor.Net.Ui.Row"/> can be expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridNavigarion.CollapseOnKeyLeft">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Row"/> is collapsed when
            the end user presses the left arrow key.
            </summary>
            <value><c>true</c> if <see cref="T:Dapfor.Net.Ui.Row"/> can be collapsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridNavigarion.KeepLevelOnKeyUpDown">
            <summary>
            Gets or sets a value indicating whether the hierarchical level should be kept when the end user 
            presses the down/up arrow keys. 
            </summary>
            <value><c>true</c> if the hierarchical level is kept; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridNavigarion.JumpToFirstChildOnKeyLeft">
            <summary>
            Gets or sets a value indicating whether the focus can be set to the first visible child <see cref="T:Dapfor.Net.Ui.Row"/> when 
            the end user presses the left arrow keys. If the value is <c>false</c>
            then the behavior is the same when the user presses up/down arrow keys.
            </summary>
            <value>
            	<c>true</c> if the focus can be moved to the first visible child <see cref="T:Dapfor.Net.Ui.Row"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridNavigarion.JumpToLastChildOnKeyRight">
            <summary>
            Gets or sets a value indicating whether the last visible child <see cref="T:Dapfor.Net.Ui.Row"/>
            can be focused when the end user presses the right arrow keys. If the value is <c>false</c>
            then the behavior is the same when the user presses down arrow key.
            </summary>
            <value>
            	<c>true</c> if the focus can be moved to the last visible child <see cref="T:Dapfor.Net.Ui.Row"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridNavigarion.MouseWheelBehaviour">
            <summary>
            Gets or sets a value, specifying the mouse wheel behavior.
            </summary>
            <value>The mouse wheel behavior.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridNavigarion.RemoveSelectionOnDelete">
            <summary>
            Gets or sets a value indicating whether the grid removes selected rows when the user presses DEL key.
            </summary>
            <value>
            	<c>true</c> if grid removes selected rows when the user presses DEL key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridEditInPlace">
            <summary>
            Edit in place settings.
            </summary>
            <remarks>
            To edit value in <see cref="T:Dapfor.Net.Ui.Cell"/>, the data object must implement 
            the Set- property, and the <see cref="T:Dapfor.Net.Ui.Column"/> must be editable. If this two conditions are true, then the <see cref="T:Dapfor.Net.Ui.Grid"/> looks for the editor in the next order: 
            <list type="bullet"> 
            <item>In <see cref="T:Dapfor.Net.Ui.Column"/> by calling the <see cref="P:Dapfor.Net.Ui.Column.Editor"/> property</item>
            <item>In <see cref="T:Dapfor.Net.Data.IDataField"/> by calling the <see cref="P:Dapfor.Net.Data.IDataField.Editor"/> property. The editon can be specified with the <see cref="T:System.ComponentModel.EditorAttribute"/></item>
            <item>If the editor is not found, the <see cref="T:Dapfor.Net.Ui.Grid"/> tries to retrive an editor from the <see cref="T:System.ComponentModel.PropertyDescriptor"/> by calling the <see cref="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)"/> method</item>
            <item>If the value is of the bool type, <see cref="T:Dapfor.Net.Editors.BoolEditor"/> is used</item>
            <item>If the value is of the enum type, <see cref="T:Dapfor.Net.Editors.EnumEditor"/> is used</item>
            <item>If the value implements <see cref="T:System.Collections.IEnumerable"/> interface, <see cref="T:Dapfor.Net.Editors.EnumerableEditor"/> is used</item>
            <item>If the value implements <see cref="T:System.IConvertible"/> interface, <see cref="T:Dapfor.Net.Editors.ConvertibleValueEditor"/> is used</item>
            </list>
            </remarks>
            <threadsafety>The class is not thread safe.</threadsafety>
            <example>
            <code>
            //Example of an easy drop-down editor where the end-user can click on the push button
            public class CustomEditor : UITypeEditor
            {
                public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
                {
                    // Uses the IWindowsFormsEditorService to display a drop-down UI in the grid. (See more System.Drawing.Design.UITypeEditor)
                    IWindowsFormsEditorService service = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
            
                    //The result to be returned
                    object result = value;
            
                    //Create some UI control
                    Button button = new Button();
                    button.Click += delegate
                    {
                        //result = ... &lt;new value&gt;
                        service.CloseDropDown();
                    };
                    //Do edit in place in the editor service. If the end user clicks on the button, then the callback will be called.
                    service.DropDownControl(button);
            
                    return result;
                }
            
                public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
                {
                    //The style is drop-down list box
                    return UITypeEditorEditStyle.DropDown;
                }
            }
            
            
            //Some data object
            public class Car 
            {
                //Some fields
                private double price;
                private double maxSpeed;
                private Color color;
            
                //Declaration of the CustomEditor. This declaration is also used by the System.Windows.Forms.PropertyGrid, so your object 
                //can be edited in the same way in various grids. 
                [Editor(typeof(CustomEditor), typeof(UITypeEditor))]
                public double MaxSpeed
                {
                    get { return maxSpeed; }
                    set { maxSpeed = value; }
                }
            
                //The declaration of the Editor can be done in the column
                public double Price
                {
                    get { return price; }
                    set { price = value; }
                }
            
                //Default color editor is used (System.Drawing.Design.ColorEditor). 
                //This editor is returned by the TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor)) call; 
                public Color Color
                {
                    get { return color; }
                    set { color = value; }
                }
            }
            
            //Initialize the grid
            public void AddDataObjectToGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("MaxSpeed"));
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Color"));
            
                grid.Headers[0]["MaxSpeed"].Editable = true;
                grid.Headers[0]["Price"].Editable = true;
                //Declare the editor only for the current grid
                grid.Headers[0]["Price"].Editor = new CustomEditor();
                grid.Headers[0]["Color"].Editable = true;
            
                //Add a data object
                grid.Rows.Add(new Car());
            
                //Edit the cell programmatically
                grid.Rows[0]["Price"].Edit();
            
                //...
            }        
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridEditInPlace.NavigationEnabled">
            <summary>
            Gets or sets a value indicating whether the navigation between editors is enabled.
            </summary>
            <value><c>true</c> if the navigation enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridEditInPlace.EditingCell">
            <summary>
            Gets the currently editing <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <value>The editing cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridEditInPlace.Enabled">
            <summary>
            Gets or sets a value indicating whether edit in place in <see cref="T:Dapfor.Net.Ui.Grid"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridEditInPlace.HotFrameEnabled">
            <summary>
            Gets or sets a value indicating whether a hot frame around the editing or ready to be edited <see cref="T:Dapfor.Net.Ui.Cell"/> is enabled.
            </summary>
            <value><c>true</c> if the hot frame is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridEditInPlace.HotFrameColor">
            <summary>
            Gets or sets the color of the hot frame.
            </summary>
            <value>The color of the hot frame.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridEditInPlace.AlwaysShowDropButtons">
            <summary>
            Gets or sets a value, indicating whether the <see cref="T:Dapfor.Net.Ui.Grid"/> should always show drop buttons in the editable cells.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Dapfor.Net.Ui.Grid"/> should always shows drop buttons; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridEditInPlace.AdjustAfterEdit">
            <summary>
            Gets or sets a value indicating whether the cell should be adjusted to the optimal size after it has been edited.
            </summary>
            <value><c>true</c> if the cell should be adjusted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridEditInPlace.DropDownTextEditor">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Cell"/>, having dropdown <see cref="T:System.Drawing.Design.UITypeEditor"/>, can also be edited with the textbox editor.
            </summary>
            <value><c>true</c> if the cell can be edited; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridSort">
            <summary>
            Sorting settings of the <see cref="T:Dapfor.Net.Ui.Grid"/>. Enables or disables sorting and multiple sorting.
            </summary>
            <threadsafety>The class is not thread safe.</threadsafety>
            <example>Demonstrates how to work with the sort
            <code>
            public void HowToWorkWithSort(Grid grid)
            {
                //Add an event handler that print out all sort notifications 
                grid.SortChanged += delegate
                {
                    Console.WriteLine("column[Price] = {0}, column[Quantity] = {1}", grid.Headers[0]["Price"].SortDirection, grid.Headers[0]["Quantity"].SortDirection);
                };
            
                //Enables the multiple sort in the grid
                grid.Sort.Enabled = true;
                grid.Sort.MultipleEnabled = true;
            
                //Add a header on the top level and some columns
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Quantity"));
            
                //Clear existing sort
                grid.Sort.Clear();
            
                //Set multiple sort
                grid.Headers[0]["Price"].SortDirection = SortDirection.Descending;
                grid.Headers[0]["Quantity"].SortDirection = SortDirection.Ascending;
            
                //Enumerate all sorted columns in the in the top header
                foreach (Column column in grid.Headers[0].SortedColumns)
                {
                    //Do something...
                }
            
                //Reverse the sort in the 'price' column
                grid.Headers[0]["Price"].SortDirection = SortDirection.Ascending;
            }
            
            //Console output:
            //column[Price] = Descending, column[Quantity] = Undefined
            //column[Price] = Descending, column[Quantity] = Ascending
            //column[Price] = Ascending, column[Quantity] = Ascending
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridSort.Clear">
            <summary>
            Clears the sort in all <see cref="T:Dapfor.Net.Ui.Header"/>s.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSort.Enabled">
            <summary>
            Gets or sets a value indicating whether the sort in the <see cref="T:Dapfor.Net.Ui.Grid"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSort.MultipleEnabled">
            <summary>
            Gets or sets a value indicating whether the sort by multiple columns in the <see cref="T:Dapfor.Net.Ui.Grid"/> is enabled.
            </summary>
            <value><c>true</c> if the multiple sort is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridSort.AvailableLevels">
            <summary>
            Gets the maximum sort levels, available for each <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <value>The available count of sort levels.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridDataObjects">
            <summary>
            Collection of data objects that enables searching rows by a data object.
            </summary>
            <remarks>
            <para>If you work with reference-type data objects, you can use convenient grid features to search row or rows that contain the required data object.</para>
            <para>You can get a data object that is associated with a row by calling <see cref="P:Dapfor.Net.Ui.Row.DataObject">Row.DataObject</see> property. The same data object may be contained in
            multiple grid rows. You can get them using <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.Find(System.Object)">Grid.DataObjects.Find(object)</see> method. If you need only the first row, you can use
            <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.FindFirstRow(System.Object)">Grid.DataObjects.FindFirstRow(object)</see> method.</para>
            <code>
            public void ReverseSearchExample(Grid grid)
            {
                //Add some products...
                Product product1 = new Product();
                Product product2 = new Product();
                grid.Rows.Add(product1);
                grid.Rows.Add(product2);
                
                //The first found row (not the first visible - just the first found!)
                Row row1 = grid.DataObjects.FindFirstRow(product1);
                //Enumerate all rows, related to the data object
                foreach (Row row in grid.DataObjects.Find(product1))
                {
                    //Do something here
                }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridDataObjects.FindFirstRow(System.Object)">
            <summary>
            Searches a <see cref="T:Dapfor.Net.Ui.Row"/> that contains the required data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns>
            First found <see cref="T:Dapfor.Net.Ui.Row"/>, otherwese <c>null</c>.
            </returns>
            <remarks>
            <para>If you work with reference-type data objects, you can use convenient grid features to search row or rows that contain the required data object.</para>
            <para>You can get a data object that is associated with a row by calling <see cref="P:Dapfor.Net.Ui.Row.DataObject">Row.DataObject</see> property. The same data object may be contained in
            multiple grid rows. You can get them using <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.Find(System.Object)">Grid.DataObjects.Find(object)</see> method. If you need only the first row, you can use
            <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.FindFirstRow(System.Object)">Grid.DataObjects.FindFirstRow(object)</see> method.</para>
            <code>
            public void ReverseSearchExample(Grid grid)
            {
                //Add some products...
                Product product1 = new Product();
                Product product2 = new Product();
                grid.Rows.Add(product1);
                grid.Rows.Add(product2);
                
                //The first found row (not the first visible - just the first found!)
                Row row1 = grid.DataObjects.FindFirstRow(product1);
                //Enumerate all rows, related to the data object
                foreach (Row row in grid.DataObjects.Find(product1))
                {
                    //Do something here
                }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridDataObjects.Find(System.Object)">
            <summary>
            Searches a collection of <see cref="T:Dapfor.Net.Ui.Row"/>s that contain the required data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns>
            Collection of <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </returns>
            <remarks>
            <para>If you work with reference-type data objects, you can use convenient grid features to search row or rows that contain the required data object.</para>
            <para>You can get a data object that is associated with a row by calling <see cref="P:Dapfor.Net.Ui.Row.DataObject">Row.DataObject</see> property. The same data object may be contained in
            multiple grid rows. You can get them using <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.Find(System.Object)">Grid.DataObjects.Find(object)</see> method. If you need only the first row, you can use
            <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.FindFirstRow(System.Object)">Grid.DataObjects.FindFirstRow(object)</see> method.</para>
            <code>
            public void ReverseSearchExample(Grid grid)
            {
                //Add some products...
                Product product1 = new Product();
                Product product2 = new Product();
                grid.Rows.Add(product1);
                grid.Rows.Add(product2);
                
                //The first found row (not the first visible - just the first found!)
                Row row1 = grid.DataObjects.FindFirstRow(product1);
                //Enumerate all rows, related to the data object
                foreach (Row row in grid.DataObjects.Find(product1))
                {
                    //Do something here
                }
            }
            </code>
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridPrintSettings">
             <summary>
             Print settings
             </summary>
             <remarks><para>Grid provides standard printing and print preview features via <see cref="T:System.Drawing.Printing.PrintDocument"/> object that enables document printing and previewing.</para>
             <para>The example below demonstrates implementation of document preview feature:
             <code>
             public void PrintPreview(Grid grid)
             {
                PrintPreviewDialog ppd = new PrintPreviewDialog();
                ppd.Document = grid.PrintDocument;
                ppd.ShowDialog(grid);
             }
             </code></para>
            <para>The following example demonstrates implementation of content printing feature.
             <code>
             public void PrintContent(Grid grid)
             {
                PrintDialog pd = new PrintDialog();
                pd.Document = grid.PrintDocument;
                pd.ShowDialog(grid);
             }
             </code></para>
             <para>
             The grid provides callback feature for print customization. This feature can also be used to customize page headers and footers:
             <code>
             grid.PrintPage += delegate(object sender, PrintGridPageEventArgs e)
             {
                 //Print a page header
                 Rectangle rcHeader = new Rectangle(e.MarginBounds.X, e.PageBounds.Y, e.MarginBounds.Width, e.MarginBounds.Y - e.PageBounds.Y);
                 using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcHeader.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Far;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString("This is a page header. Print your text here!", SystemFonts.MenuFont, SystemBrushes.GrayText, rcHeader, sf);    
                 }
             
                 //Print a page footer
                 Rectangle rcFooter = new Rectangle(e.MarginBounds.X, e.MarginBounds.Bottom, e.MarginBounds.Width, e.PageBounds.Bottom - e.MarginBounds.Bottom);
                 using (System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcFooter.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Near;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString(string.Format("Page {0} of {1}\r\nThis is a page footer. Print your text here!", e.PageNumber, e.PagesCount), SystemFonts.MenuFont, SystemBrushes.GrayText, rcFooter, sf);
                 }
             }
             </code></para>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridPrintSettings.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridPrintSettings.PrintHeader">
            <summary>
            Gets or sets a value indicating whether grid headers should be printed.
            </summary>
            <value><c>true</c> if grid should print headers; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridPrintSettings.RepeatHeader">
            <summary>
            Gets or sets a value indicating whether the grid should repeat headers on each page.
            </summary>
            <value><c>true</c> if headers are repeated on each page; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridPrintSettings.PrintChildHeader">
            <summary>
            Gets or sets a value indicating whether grid child headers should be printed.
            </summary>
            <value><c>true</c> if grid should print child headers; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridPrintSettings.PrintRowSelector">
            <summary>
            Gets or sets a value indicating whether row selectors should be printed.
            </summary>
            <value><c>true</c> if grid should print row selectors; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridPrintSettings.RepeatRowSelector">
            <summary>
            Gets or sets a value indicating whether the grid should repeat row selectors on each page.
            </summary>
            <value><c>true</c> if row selectors are repeated on each page; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridPrintSettings.PrintSelection">
            <summary>
            Gets or sets a value indicating whether cell or row selection should be printed.
            </summary>
            <value><c>true</c> if cell or row selection should be printed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridPrintSettings.PageSettings">
            <summary>
            Gets the page settings.
            </summary>
            <value>The page settings.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridDataConnection">
            <summary>
            Data source properties
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridDataConnection.FindRow(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Row"/>, corresponding to the index in the attached datasource.
            </summary>
            <param name="indexInDataSource">The index in the attached datasource.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Row"/>, corresponding to the index in the attached datasource</returns>
            <example>
            <code>
            public void SetDataSource(Grid grid)
            {
                //Build a small datatable
                DataTable table = new DataTable();
                table.Columns.Add(new DataColumn("Column1"));
                table.Columns.Add(new DataColumn("Column2"));
                table.Rows.Add(new object[] { "Row0, Col0", "Row0, Col1" });
                table.Rows.Add(new object[] { "Row1, Col0", "Row1, Col1" });
                table.Rows.Add(new object[] { "Row2, Col0", "Row2, Col1" });
            
                //Attach datatable to the grid
                grid.Headers.AutoGenerate = true;
                grid.DataSource = table;
            
                //Get the first row in Grid
                Row row1 = grid.Rows[0];
                Console.WriteLine("Row1, Column1: value = {0}", row1["Column1"].Value);
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Sort the grid
                grid.Headers[0]["Column1"].SortDirection = SortDirection.Descending;
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Filter the row1
                row1.Filtered = true;
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Other row...
                Row row2 = grid.Rows[0];
                Console.WriteLine("Row2: index in Grid: {0}, index in Datasource = {1}", row2.VisibleIndex, row2.DataSourceIndex);
                Console.WriteLine("Row2, Column1: value = {0}", row2["Column1"].Value);
            }
            
            Output:
            Row1, Column1: value = Row0, Col0
            Row1: index in Grid: 0, index in Datasource = 0
            Row1: index in Grid: 2, index in Datasource = 0
            Row1: index in Grid: -1, index in Datasource = 0
            Row2: index in Grid: 0, index in Datasource = 2
            Row2, Column1: value = Row2, Col0
            </code>
            </example>
            <seealso cref="P:Dapfor.Net.Ui.Row.DataSourceIndex"/>
            <seealso cref="P:Dapfor.Net.Ui.Grid.DataSource"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDataConnection.HandleCurrentChangedEvent">
            <summary>
            Gets or sets a value indicating whether the grid should handle <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged"/> event that causes selection changing and ensures the current row visible.
            </summary>
            <value><c>true</c> if the grid handles CurrentChanged event; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDataConnection.AllowEdit">
            <summary>
            Gets or sets a value indicating whether you can update items in the <see cref="P:Dapfor.Net.Ui.Grid.DataSource"/>.
            </summary>
            <value><c>true</c> if the updating is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDataConnection.AddNewRowToEnd">
            <summary>
            Gets or sets a value indicating whether a new row should always be added to the end of the grid regardless value in the <see cref="T:System.ComponentModel.ListChangedEventArgs"/>.
            </summary>
            <value><c>true</c> if a new row is added to the end; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDataConnection.AllowNew">
            <summary>
            Gets or sets a value indicating whether you can add items to the <see cref="P:Dapfor.Net.Ui.Grid.DataSource"/>.
            </summary>
            <value><c>true</c> if you can add items; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDataConnection.AllowRemove">
            <summary>
            Gets or sets a value indicating whether whether you can remove items from the <see cref="P:Dapfor.Net.Ui.Grid.DataSource"/>.
            </summary>
            <value><c>true</c> if you can remove items; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridMouseManager.BeginColumnDrag">
            <summary>
            Begins the column drag.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridFocus">
             <summary>
             Focus settings. Specifies focus mode, color, painting mode, etc...
             </summary>
             <example>
             <code>
             public void FocusExample(Grid grid)
             {
                 //Set a new color with the alpha channel for the focused row.
                 grid.FocusSettings.Color = Color.FromArgb(30, 128, 0, 30);
            
                 grid.FocusedRowChanged += delegate(object sender, FocusedRowEventArgs e)
                 {
                     Console.WriteLine("Previous focused row: {0}", e.PrevFocusedRow != null ? e.PrevFocusedRow.VisibleIndex.ToString() : "not specified");
                     Console.WriteLine("New focused row: {0}", e.NewFocusedRow != null ? e.NewFocusedRow.VisibleIndex.ToString() : "not specified");
                 };
            
                 //Add some data object
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Set the row focused
                 grid.Rows[1].Focused = true;
                 
                 Console.WriteLine("Focused row visible index: {0}", grid.FocusedRow.VisibleIndex);
            
                 //Clear the focus
                 grid.FocusedRow = null;
                 //Another way to clear focus:
                 grid.FocusSettings.Clear();
             }
             
             //Console output:
             Previous focused row: not specified
             New focused row: 1
             Focused row visible index: 1
             Previous focused row: 1
             New focused row: not specified
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridFocus.Clear">
            <summary>
            Clears the focus.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridFocus.Color">
             <summary>
             Gets or sets the color of the focused <see cref="T:Dapfor.Net.Ui.Row"/> or <see cref="T:Dapfor.Net.Ui.Cell"/>.
             </summary>
             <remarks>The <see cref="T:Dapfor.Net.Ui.Grid"/> supports the alpha channel for selected and focused rows and cells. 
             This prevents from erasing the initial background color for that rows and cells. 255 - opaque, 0 - transparent.</remarks>
             <value>The color of the focus.</value>
             <example>How to set transparent focus
             <code>
             public void HowToSetSemiTransparentFocus(Grid grid)
             {
                 //Globally for new created grids:
                 Preferences.Grid.FocusColor = Color.FromArgb(40, Color.Blue);
            
                 //Or individually for the grid:
                 grid.Focus.Color = Color.FromArgb(40, SystemColors.Highlight);
             }
             </code></example>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridFocus.Mode">
            <summary>
            Gets or sets the focus mode.
            </summary>
            <value>The focus mode.</value>
            <seealso cref="P:Dapfor.Net.Ui.Grid.FocusedRow"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.Focused"/>
            <seealso cref="P:Dapfor.Net.Ui.Column.Focused"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridFocus.PaintFocus">
            <summary>
            Gets or sets a value indicating whether the focused <see cref="T:Dapfor.Net.Ui.Row"/> or <see cref="T:Dapfor.Net.Ui.Cell"/> are painted.
            </summary>
            <value><c>true</c> if the focus is painted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridRowSelector">
             <summary>
             A visual element on the left side of the <see cref="T:Dapfor.Net.Ui.Grid"/> that enables a user to manipulate the <see cref="T:Dapfor.Net.Ui.Row"/>s, change their height, select them,
             show related images (error icons for example).
             </summary>
             <threadsafety>The class is not thread safe.</threadsafety>
             <example>
             <code>
             public void RowSelectorExample(Grid grid)
             {
                 //Configure the headers
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Set the appearance of the row selector
                 grid.RowSelector.Appearance.BackColor = Color.LightGray;
                 grid.RowSelector.Appearance.GradientEnabled = true;
                 grid.RowSelector.Appearance.GradientEndBackColor = Color.LightSlateGray;
                 grid.RowSelector.Appearance.GradientDirection = GradientDirection.Vertical;
            
                 //Make the selector visible and set its width
                 grid.RowSelector.Visible = true;
                 grid.RowSelector.Width = 25;
            
                 //Allow the end-user to resize rows
                 grid.RowSelector.Resizable = true;
            
                 //Populate the grid
                 grid.Rows.Add(new Product());
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridRowSelector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridRowSelector.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridRowSelector.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Grid.GridRowSelector"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridRowSelector.Width">
            <summary>
            Gets or sets the width of this <see cref="T:Dapfor.Net.Ui.Grid.GridRowSelector"/>.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridRowSelector.Appearance">
            <summary>
            Gets the appearance of row selectors.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridRowSelector.Resizable">
            <summary>
            Indicates whether the end-user can resize <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <value><c>true</c> if the end-user can resize <see cref="T:Dapfor.Net.Ui.Row"/>, otherwise <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridHierarchy">
             <summary>
             Hierarchy settings
             </summary>
             <threadsafety>The class is not thread safe.</threadsafety>
             <example>
             <code>
             public void ConfigureGrid(Grid grid)
             {
                 //Add a new header on the top hierarchical level (level 0)
                 grid.Headers.Add(new Header());
            
                 //Add a header for the 1st hierarchical level (level 1) and make it invisible
                 grid.Headers.Add(new Header());
            
                 //Create some columns and add them to the top-level header
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers[0].Add(new Column("Price"));
            
                 //Add a column on the 1st hierarchical level
                 grid.Headers[1].Add(new Column("Name"));
            
                 //Set hierarchical appearance
                 grid.Hierarchy.ButtonBehaviour = ExpansionButtonBehaviour.ShowAlways;
                 //The width of the (+/-) button
                 grid.Hierarchy.ButtonWidth = 15;
            
                 //Draw lines between headers and rows
                 grid.Hierarchy.EnableHierarchicalLines = true;
            
                 //Add a product
                 Row row = grid.Rows.Add(new Product());
            
                 //Add two purchasers of this product at the 1st hierarchical level
                 row.Add(new Customer());
                 row.Add(new Customer());
                 row.ExpandAll();
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHierarchy.ExpandAll">
            <summary>
            Expands all <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHierarchy.CollapseAll">
            <summary>
            Collapses all <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHierarchy.ButtonBehaviour">
            <summary>
            Gets or sets the expansion button behavior.
            </summary>
            <value>The expansion button behavior.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHierarchy.ButtonWidth">
            <summary>
            Gets or sets the width of the expansion button.
            </summary>
            <value>The width of the button.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHierarchy.EnableHierarchicalLines">
            <summary>
            Gets or sets a value indicating whether the hierarchical lines are visible.
            </summary>
            <value>
            	<c>true</c> if hierarchical lines are visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHierarchy.HierarchicalLinesColor">
            <summary>
            Gets or sets the color of the hierarchical lines.
            </summary>
            <value>The color of the hierarchical lines.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHierarchy.EnableHierarchicalFields">
            <summary>
            Gets a value indicating whether the grid should build a hierarchy if the <see cref="P:Dapfor.Net.Data.IDataField.IsHierarchical">IDataField.IsHierarchical</see> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> returns true
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Dapfor.Net.Ui.Grid"/> should build hierarchy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridThreadsafety">
            <summary>
            Thread safety parameters of the <see cref="T:Dapfor.Net.Ui.Grid"/>
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridThreadsafety.AsynchronousUpdates">
            <summary>
            Gets or sets a value indicating whether notifications from <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface coming from a non-GUI thread are processed in the asynchronous way.
            </summary>
            <value><c>true</c> if notification from non-GUI thread are processed in the asynchronous way; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridTooltips">
            <summary>
            Tooltip settings
            </summary>
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Cell"/>'s tooltip settings.
            </summary>
            <value>The tooltips.</value>
            <remarks>Displaying auxiliary information above a grid cell is a typical task. In the .Net Grid this process is considerably simplified. 
            To display a tooltip is is sufficient to set text calling <see cref="P:Dapfor.Net.Ui.Cell.TooltipMessage">Cell.TooltipMessage</see><b> = "some text"</b>. Color management, 
            display time and tooltip location can be set with <see cref="P:Dapfor.Net.Ui.Grid.Tooltips">Grid.Tooltips</see> property. The programmer can control tooltips via .Net Grid notifications.
            <code>
            public void ShowTooltip(Grid grid)
            {
                grid.Tooltips.TooltipEnabled = true;                      // enable tooltips
                grid.Rows[4][4].TooltipMessage = "My Custom Message";     // setting tooltip for a specific cell
                grid.Tooltips.TooltipDuration = TimeSpan.FromSeconds(3);  // hiding tooltip after 3 seconds
                grid.Tooltips.IsBalloon = true;                           // balloon-like tooltip style
                grid.Tooltips.CellFrameColor = Color.Orange;              // color of the cell's frame
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridTooltips.#ctor(Dapfor.Net.Ui.Grid)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Grid.GridTooltips"/> class.
            </summary>
            <param name="grid">The _grid.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridTooltips.ShowTooltip(Dapfor.Net.Ui.Cell,System.String,System.TimeSpan)">
            <summary>
            Displays a tooltip with the specified text for the specified duration.
            </summary>
            <param name="cell">The cell.</param>
            <param name="message">The message.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridTooltips.HideTooltip">
            <summary>
            Hides the tooltip.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridTooltips.ClearCellMessages">
            <summary>
            Clears all cell tooltip messages.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridTooltips.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridTooltips.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridTooltips.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.TooltipEnabled">
            <summary>
            Gets or sets a value indicating whether tooltips are enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.CellFrameEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Grid"/> can paint a frame around the <see cref="T:Dapfor.Net.Ui.Cell"/> if a tooltip is currently displayed.
            </summary>
            <value><c>true</c> if <see cref="T:Dapfor.Net.Ui.Grid"/> can paint a frame around a <see cref="T:Dapfor.Net.Ui.Cell"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.CellFrameColor">
            <summary>
            Gets or sets the color to paint a frame around the <see cref="T:Dapfor.Net.Ui.Cell"/> if a tooltip is currently displayed.
            </summary>
            <value>The color of the frame.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.TooltipColor">
            <summary>
            Gets or sets the background color of the tooltip.
            </summary>
            <value>The color of the tooltip.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.TooltipDuration">
            <summary>
            Gets or sets the duration to display the tooltip.
            </summary>
            <value>The duration of the tooltip.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.IsBalloon">
            <summary>
            Gets or sets a value indicating whether the tooltip should use a balloon window.
            </summary>
            <value>
            	<c>true</c> if a balloon window should be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.Orientation">
            <summary>
            Gets or sets the preferred orientation of the ToolTip relative to the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.CurrentCell">
            <summary>
            Gets the current <see cref="T:Dapfor.Net.Ui.Cell"/>, for which the tooltip is displayed.
            </summary>
            <value>The current cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.CellMessageImage">
            <summary>
            Gets or sets image to be displayed in <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.CellMessageImageAlignment">
            <summary>
            Gets or sets the alignment of cell tooltip image.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridTooltips.CellMessageImageEnabled">
            <summary>
            Gets or sets a value indicating whether cell tooltip messages are enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridHitTests">
            <summary>
            Provides elements by their location inside the grid.
            </summary>
            <remarks>
            The grid has a convenient system of getting elements by their location inside the grid. This is done with <see cref="M:Dapfor.Net.Ui.Grid.HitTest(System.Drawing.Point)">Grid.HitTest()</see> 
            method that returns type of element in specified position. To get the element itself you can use one of <see cref="P:Dapfor.Net.Ui.Grid.HitTests">Grid.HitTests</see> methods 
            that return element pointers. We tried to create an API to avoid unnecessary type casting. An example of its use is provided below. 
            <code>
            public void HitTestExample(Grid grid)
            {
                //Get the current cursor position
                Point position = System.Windows.Forms.Cursor.Position;
            
                //Get position in the client coordinates
                position = grid.PointToClient(position);
            
                //Get a part of the grid, the cursor points to.
                HitTestInfo info = grid.HitTest(position);
            
                //Try get a header, the cursor points to.
                Header header = grid.HitTests.HeaderTest(position);
            
                //Try get a row, the cursor points to.
                Row row = grid.HitTests.RowTest(position);
            
                //Try get a cell, the cursor points to.
                Cell cell = grid.HitTests.CellTest(position);
            
                //Try get a column, the cursor points to.
                Column column = grid.HitTests.ColumnTest(position);
            
                //Do something...
            }
            </code>
            </remarks> 
            <seealso cref="M:Dapfor.Net.Ui.Grid.HitTest(System.Drawing.Point)"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.RowTest(System.Drawing.Point)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Row"/> at the specified location.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Row"/> if found. Otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.CellTest(System.Drawing.Point)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Cell"/> at the specified location.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Cell"/> if found. Otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.HeaderTest(System.Drawing.Point)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Header"/> at the specified location.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Header"/> if found. Otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.ColumnTest(System.Drawing.Point)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Column"/> at the specified location.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Column"/> if found. Otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.RowSeparatorTest(System.Drawing.Point)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Row"/> above the separator.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Row"/> above the separator if found. Otherwise <c>null</c> is returned.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.ColumnSeparatorTest(System.Drawing.Point)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Column"/> on the left of the separator.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Column"/> on the left of the separator if found. Otherwise <c>null</c> is returned.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.HeaderVisibleBoundsTest(System.Drawing.Point)">
            <summary>
            Gets bounds of a <see cref="T:Dapfor.Net.Ui.Header"/> at the specified location.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns>Header bounds if found. Otherwise <see cref="F:System.Drawing.Rectangle.Empty"/>.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.ColumnVisibleBoundsTest(System.Drawing.Point)">
            <summary>
            Gets bounds of a <see cref="T:Dapfor.Net.Ui.Column"/> at the specified location.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns>Column bounds if found. Otherwise <see cref="F:System.Drawing.Rectangle.Empty"/>.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHitTests.ColumnVirtualBoundsTest(System.Drawing.Point)">
            <summary>
            Gets bounds of a <see cref="T:Dapfor.Net.Ui.Column"/> at the specified location.
            </summary>
            <param name="pt">Location inside the grid.</param>
            <returns>Column bounds if found. Otherwise <see cref="F:System.Drawing.Rectangle.Empty"/>.</returns>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridDragAndDrop">
             <summary>
             Drag and drop settings.
             </summary>
             <value>The drag and drop settings.</value>
             <remarks>.Net Grid supports drag &amp; drop operations with grid rows, moving the rows within a grid and between grids, changing hierarchy, exporting data to 
             applications like Word and Excel in text format and importing data from other applications.
             The following properties should be set to true to use drag &amp; drop feature:
             <code>
             Grid.AllowDrop = true;
             Grid.DragAndDrop.Enabled = true;
             </code>
             <para>To start drag &amp; drop operation the end user should place the cursor over grid rows, left-click and start moving the row. First of all, drag &amp; drop 
             operation raises <see cref="E:Dapfor.Net.Ui.Grid.DragBegin">Grid.DragBegin</see> event that can be used to define available drag &amp; drop effects and content and, if desired, to 
             set <see cref="P:Dapfor.Net.Ui.DragContentBeginEventArgs.Data">DragContentBeginEventArgs.Data</see> property that is an object passed to <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">Control.DoDragDrop()</see> method 
             that can be used to export data to Word or Excel.</para>
             <para>The following events are called during drag &amp; drop operation when the cursor is moved to the target grid, passes over it and leaves it:
             <list type="bullet">
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent">Grid.DragEnterContent</see></item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragOverContent">Grid.DragOverContent</see></item>
             <item><see cref="E:System.Windows.Forms.Control.DragLeave">Control.DragLeave</see></item>
             </list></para>
             <para>The grid calculates the required values and data insertion position, checks whether drag &amp; drop is possible and enables customization of drag &amp; drop effects, 
             data location and data hierarchy. During drag &amp; drop operation the grid shows data insertion location indicators that enable the end user to see where exactly the 
             data will be inserted, including its position in hierarchy. The grid has user-friendly interface. If during drag &amp; drop operation the user keeps the cursor over a 
             row for 1 second, this row is automatically expanded. If the grid has a vertical scrollbar, the grid automatically scrolls if the user moves the cursor above or below the grid.</para>
             <para><b>Data insertion</b></para>
             <para>To insert data into the grid the end user moves the cursor over the grid with left mouse button pressed and the grid highlights the place of data insertion. 
             Two data insertion modes are available:
             <list type="bullet">
             <item>Flat mode, when data is inserted above the row at the current cursor position at the same hierarchy level.</item>
             <item>Data can also be inserted as a child row of the row at the current cursor position.</item>
             </list></para>
             <para>There are 3 other modes that control data insertion and are controlled by <see cref="T:Dapfor.Net.Ui.Grid.GridDragAndDrop">Grid.DragAndDrop.DropMode</see> property:
             <list type="bullet">
             <item>Flat mode only</item>
             <item>Hierarchical mode only</item>
             <item>Combined mode. In this mode the grid has special areas that can be used to set data insertion mode by placing the cursor over those areas. For flat mode such 
             areas are any place above the row except for small +/- icon. To insert data in hierarchical mode you have to place the cursor over this icon. 
             It is also possible to switch from flat mode to hierarchical mode using Shift key.</item>
             </list>
             </para>
             <para>In accordance with possible DragAndDrop effect, the grid supports 3 operations: Copy, Move and Link</para>
             <list type="bullet">
             <item>Copy. This operation creates new rows for data set in <b>DragDropContentEventArgs.Content</b>. <b>DragDropContentEventArgs.Content</b> 
             often contains a collection of rows created in the beginning of drag. In such case hierarchy, selection and expansion are preserved for newly created rows. 
             If <b>DragDropContentEventArgs.Content</b> contains other data than <see cref="T:Dapfor.Net.Ui.Row"/>, the new rows shall be created with relevant <see cref="T:Dapfor.Net.Data.IDataAccessor">DataAccessor</see>. 
             In any case data itself is not copied. If data supports <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface, newly created rows will also get data object notification.</item>
             <item>Move. Data is moved with all information of hierarchy, expansion and selection either within a grid or between grids.</item>
             <item>Link. This operation is similar to Copy, but in this operation DragDropContentEventArgs.Content may contain only Row collection.</item>
             </list>
             <para><b>Drag &amp; drop customization</b></para>
             <para>The grid provides a lot of customization opportunities in the form of event subscription that enable you to modify insertion content, mode and location and 
             to control visual effects of drag &amp; drop operation:
             <list type="bullet">
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragBegin">Grid.DragBegin</see> - controls content and initiation of drag &amp; drop operation. When grids copy or move data in an application they work with content. 
             If you need to send data to Excel, you can set a Data object containing image, string or any other object implementing IDataObject interface. This object is transferred to 
             <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">Control.DoDragDrop</see> method enabling data exchange with external applications.</item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent">Grid.DragEnterContent</see> and <see cref="E:Dapfor.Net.Ui.Grid.DragOverContent">Grid.DragOverContent</see> enable controlling various visual 
             effects and defining data insertion location, data hierarchy and inserted content.</item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragDropContent">Grid.DragDropContent</see> enables direct control of content insertion. If data is inserted from another grid, 
             <b>DragDropContentEventArgs.Content</b> should be defined in advance. It is possible to call any content insertion operation, 
             i.e. <b>DoCopy()/DoMove()/DoLink()</b>. Data will be inserted to the current position via <b>DragDropContentEventArgs.TargetRow</b> and 
             <b>DragDropContentEventArgs.TargetPosition</b>. These parameters can be modified at any moment. If drag &amp; drop operation 
             is initiated by another control or outside the application, <b>DragDropContentEventArgs.Content</b> will have null value. 
             In this case data can be received from <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.Data">DragContentEventArgs.Data</see>, which is an <see cref="T:System.Windows.Forms.IDataObject"/> object. 
             <see cref="T:Dapfor.Net.Ui.DragDropContentEventArgs"/> also provides methods for inserting data to the grid via <see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoCopy">DoCopy(...)</see>/
             <see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoMove">DoMove(...)</see>/<see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoLink(System.Boolean)">DoLink(...)</see> to the position determined by current value of 
             <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.TargetRow"/> and <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.TargetPosition"/>. This provides a possibility to import data to the grid from external applications.</item>
             </list>
             </para>
             </remarks>
             <example>
             To import data, Excel sends a text string formatted with the above-described method. The grid cannot process such string directly, but it has powerful features for 
             transforming data from Excel format to the format of application business data. Below is an example demonstrating exporting/importing data to/from Excel. 
             <code>
             //Implementation of the method, dragging data from the grid   
             private void OnDragBegin(object sender, DragContentBeginEventArgs e)
             {
                  //Create a string to put it to Excel
                  StringBuilder sb = new StringBuilder();
                  foreach (Row row in e.Content)
                  {
                      if (sb.Length &gt; 0) sb.AppendLine();
                      StringBuilder sbRow = new StringBuilder();
                      foreach (Column column in row.Header)
                      {
                          if (sbRow.Length &gt; 0) sbRow.Append("\t");
                          sbRow.Append(row[column.Id].Text);
                      }
                      sb.Append(sbRow);
                  }
                 e.Data = sb.ToString();
             }
            
             //Drag over event handler
             private void OnDragOverContent(object sender, DragContentEventArgs e)
             {
                 //The content is not specified. The data can be found in e.Data (IDataObject)
                 if (e.Content == null)
                 {
                     e.Effect = DragDropEffects.Copy;
                 }
             }
            
             //Drop data event handler
             private void OnDragDropContent(object sender, DragDropContentEventArgs e)
             {
                 if (e.Content == null)
                 {
                     string data = e.Data.GetData(typeof(string)) as string;
                     if (!string.IsNullOrEmpty(data))
                     {
                         string[] lines = data.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                         foreach (string line in lines)
                         {
                             string[] values = line.Split(new string[] { "\t" }, StringSplitOptions.None);
            
                             //Add an array of values to the grid. Here you can also create your own object and insert it to the grid 
                             e.DoCopy(values);
                         }
                         e.Handled = true;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridDragAndDrop.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridDragAndDrop.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDragAndDrop.Enabled">
            <summary>
            Gets or sets a value indicating whether the user can drag the content from the grid.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDragAndDrop.ExpandTargetRowAfterDropping">
            <summary>
            Gets or sets a value indicating whether the target is expanded when the content is added <see cref="F:Dapfor.Net.Ui.GridDropMode.AsChild">as child</see>.
            </summary>
            <value>
            	<c>true</c> if the target is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDragAndDrop.LinkWithHierarchy">
            <summary>
            Gets or sets a value indicating whether in case of the <see cref="F:System.Windows.Forms.DragDropEffects.Link"/> operation the content is linked with the whole hierarchy.
            </summary>
            <value><c>true</c> if the content is linked with hierarchy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDragAndDrop.EnsureVisibleDroppingRow">
            <summary>
            Gets or sets a value indicating that after inserting the target row should remain in the visible area of the grid.
            </summary>
            <value>
            	<c>true</c> if the target row should remain in the visible area of the grid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDragAndDrop.AllowedDragEffects">
            <summary>
            Gets or sets <see cref="T:System.Windows.Forms.DragDropEffects">effects</see> permitted by the source grid.
            </summary>
            <value>The allowed drag effects.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDragAndDrop.AllowedDropEffects">
            <summary>
            Gets or sets <see cref="T:System.Windows.Forms.DragDropEffects">effects</see> permitted by the target grid.
            </summary>
            <value>The allowed drop effects.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridDragAndDrop.DropMode">
            <summary>
            Gets or sets the drop mode indicating how the content should be added to the grid during drag and drop operation.
            </summary>
            <value>The drop mode.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Grid.GridHighlighting">
             <summary>
             Highlighting settings such as highlighting interval, color, mode, fading effect parameters...
             </summary>
             <remarks>
             <para>While <see cref="T:Dapfor.Net.Ui.Cell"/> highlighting, the <see cref="T:Dapfor.Net.Ui.Grid"/> blends the highlighting color with the background color of the <see cref="T:Dapfor.Net.Ui.Cell"/>. It takes into account the alpha-channel 
             of the <see cref="P:Dapfor.Net.Ui.Grid.GridHighlighting.Color"/> to prevent from the background color erasing. 255 value of the alpha channel means that the highlighting color is opaque, 0 - transparent. </para>
             <para>If the fading effect is enabled, the alpha-value of the highlighting color will evaluate with time. During the highlighting <see cref="P:Dapfor.Net.Ui.Grid.GridHighlighting.Interval"/> each 
             <see cref="P:Dapfor.Net.Ui.Grid.GridHighlighting.RefreshInterval"/> the <see cref="T:Dapfor.Net.Ui.Cell"/> will be repainted with a new highlighting color.</para>
             </remarks>
             <threadsafety>The class is not thread safe, but notifications from the data object are safe.</threadsafety>
             <example>
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 //Some fields
                 private double price;
                 private DateTime maturity;
            
                 [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                 public double Price
                 {
                     get { return price; }
                     set
                     {
                         if (price != value)
                         {
                             price = value;
                             //Notify about color changing
                             if (PropertyChanged != null)
                             {
                                 PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                             }
                         }
                     }
                 }
            
                 public DateTime Maturity
                 {
                     get { return maturity; }
                 }
            
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             //Using sample
             public void HoToHighlightCell(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Maturity"));
            
                 //Enable the highlighting 
                 grid.Highlighting.Enabled = true;
            
                 //Set a highlighting color, which is blended with the color of the cell
                 //The grid supports alpha-channel. This prevents from the background color erasing.
                 //255 - opaque, 0 - transparent
                 grid.Highlighting.Color = System.Drawing.Color.FromArgb(200, 210, 60, 84);
            
                 //Enable the fading effect
                 grid.Highlighting.Fading = true;
            
                 //Set an interval of 2 seconds to highlight the cell
                 grid.Highlighting.Interval = new TimeSpan(0, 0, 0, 2);
            
                 //Set a refresh interval of 30 milliseconds to repaint the cell
                 //With the fading effect the alpha-value of the highlighting color will evaluate with time.
                 //Each 30 milliseconds the grid will repaint the cell with a new highlighting color.
                 grid.Highlighting.RefreshInterval = new TimeSpan(0, 0, 0, 0, 30);
            
            
                 //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                 Product product = new Product();
                 grid.Rows.Add(product);
            
                 //The object will notify the grid through the INotifyPropertyChanged, and the grid will automatically 
                 //start the highlighting process for the affected cell.
                 //If the call comes from the non-GUI thread, the grid will synchronize them without blocking the calling thread.
                 product.Price = 12.34;
            
                 //Another way to highlight the cell. The cell will be highlighted for 2 seconds with the red color and fading effect
                 Cell cell = grid.Rows[0]["Price"];
                 cell.Highlight(new TimeSpan(0, 0, 0, 3), Color.Red);
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHighlighting.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Grid.GridHighlighting.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHighlighting.Enabled">
            <summary>
            Gets a value indicating whether the highlighting in the <see cref="T:Dapfor.Net.Ui.Grid"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHighlighting.Interval">
            <summary>
            Gets or sets the interval during of which the <see cref="T:Dapfor.Net.Ui.Cell"/> is highlighted. 
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHighlighting.RefreshInterval">
            <summary>
            Gets or sets the invalidating interval after which the <see cref="T:Dapfor.Net.Ui.Cell"/> should be repainted. 
            </summary>
            <value>The interval.</value>
            <remarks>The <see cref="T:Dapfor.Net.Ui.Grid"/> invalidates highlighting <see cref="T:Dapfor.Net.Ui.Cell"/> each <see cref="P:Dapfor.Net.Ui.Grid.GridHighlighting.RefreshInterval"/>, which
            can be useful in implementing fading effects.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHighlighting.Color">
            <summary>
            Gets or sets the color to highlight the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Grid.GridHighlighting.Fading">
            <summary>
            Gets or sets a value indicating whether the fading effect is enabled.
            </summary>
            <value><c>true</c> if fading is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Theming.ThemeRenderer">
            <summary>
            Default <see cref="T:Dapfor.Net.Theming.Theme"/> renderer
            </summary>
        </member>
        <member name="T:Dapfor.Net.Theming.IThemeRenderer">
            <summary>
            Provides renderers to draw various dapfor's controls
            </summary>
        </member>
        <member name="M:Dapfor.Net.Theming.IThemeRenderer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapfor.Net.Theming.IThemeRenderer.GridRenderer">
            <summary>
            Gets a renderer to draw the <see cref="T:Dapfor.Net.Ui.Grid">.Net Grid</see>.
            </summary>
            <value>The grid renderer.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.IThemeRenderer.RoundButtonRenderer">
            <summary>
            Gets a renderer to draw the <see cref="T:Dapfor.Net.Ui.RoundButton">RoundButton</see>.
            </summary>
            <value>The round button renderer.</value>
        </member>
        <member name="M:Dapfor.Net.Theming.ThemeRenderer.#ctor(Dapfor.Net.Theming.IGridRenderer,Dapfor.Net.Theming.IRoundButtonRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Theming.ThemeRenderer"/> class.
            </summary>
            <param name="gridRenderer">The grid renderer.</param>
            <param name="roundButtonRenderer">The round button renderer.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.ThemeRenderer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapfor.Net.Theming.ThemeRenderer.GridRenderer">
            <summary>
            Gets the grid renderer.
            </summary>
            <value>The grid renderer.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.ThemeRenderer.RoundButtonRenderer">
            <summary>
            Gets the round button renderer.
            </summary>
            <value>The round button renderer.</value>
        </member>
        <member name="T:Dapfor.Net.Internal.Node">
            <summary>
            Summary description for Node.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Internal.Node"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.Node.#ctor(Dapfor.Net.Internal.Node,Dapfor.Net.Data.IDataAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Internal.Node"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="dataAccessor">The data accessor.</param>
        </member>
        <member name="M:Dapfor.Net.Internal.Node.SafeExpandAll(System.Boolean)">
            <summary>
            Expands all in GUI thread.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Internal.Node.ChildrenCount">
            <summary>
            Gets the total (visible and filtered) children count. 
            </summary>
            <value>The children count.</value>
        </member>
        <member name="P:Dapfor.Net.Internal.Node.VisibleChildren">
            <summary>
            Gets count of visible children belong to the given parent (without sub children).
            </summary>
            <value>The visible children number.</value>
        </member>
        <member name="P:Dapfor.Net.Internal.Node.TotalVisibleChildren">
            <summary>
            Gets the total number of visible children on all hierarchical levels that have 
            this <see cref="T:Dapfor.Net.Internal.Node"/> as direct or indirect parent.
            </summary>
            <value>The total visible children count.</value>
        </member>
        <member name="P:Dapfor.Net.Internal.Node.IsFirstVisibleChild">
            <summary>
            Gets a value indicating whether this instance is the first visible child of its parent.
            </summary>
            <value>
            	<c>true</c> if this instance is first visible child; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dapfor.Net.Threading.ITask">
            <summary>
            Represents a task, that can be executed in the <see cref="T:Dapfor.Net.Threading.IDispatcher"/> thread
            </summary>
            <remarks>
            Following example demonstrates how to use tasks:
            <code>
            //Synchronization code
            private void ExplicitSynchronizationCall(object data)
            {
                if(dispatcher.SynchronizationRequired)
                {
                    //Create a task that will be executed in dispatcher thread without blocking the calling thread
                    dispatcher.Dispatch(new SynchronizationTask(data));
                }
                else
                {
                    Console.WriteLine("No synchronization required: object = {0}", data);
                }
            }
            
            //Task implementstion
            private class SynchronizationTask : ITask
            {
                private readonly object data;
                public SynchronizationTask(object data)
                {
                    this.data = data;
                }
            
                public void Execute()
                {
                    Console.WriteLine("Called in the expliceit task: object = {0}", data);
                }
            }
            
            
            //The same example with anonymous methods. 
            private void ImplicitSynchronizationCall(object data)
            {
                if (dispatcher.SynchronizationRequired)
                {
                    //Create a task that will be executed in dispatcher thread without blocking the calling thread
                    dispatcher.Dispatch(new DelegateTask(delegate
                    {
                        Console.WriteLine("Called in the anonymous method: object = {0}", data);
                    }));
                }
                else
                {
                    Console.WriteLine("No synchronization required: object = {0}", data);
                }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Threading.ITask.Execute">
            <summary>
            Executes the user-defined code in the <see cref="T:Dapfor.Net.Threading.IDispatcher"/>'s thread.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.Appearance">
            <summary>
            Appearance of UI elements (<see cref="T:Dapfor.Net.Ui.Cell"/>, <see cref="T:Dapfor.Net.Ui.Column"/>, etc.)
            </summary>
            <threadsafety>Any instance members are not guaranteed to be thread safe.</threadsafety>
            <remarks>
            <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
            colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
            <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
            However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
            can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
            properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
            </para>
            <code>
            public void HowToCustomizeAppearance(Grid grid)
            {
                //Set default background color for even rows in all the grids
                Preferences.Grid.EvenRowsAppearance.BackColor = Color.White;
            
                //Create headers and columns
                Header header1 = new Header();
                Column column = new Column("SomeId");
                //Show icons in all cells, belong to this column
                column.CaptionImage = Image.FromFile("SomeImage.jpg");
                header1.Add(column);
            
                //Add headers to the grid
                Header header2 = new Header();
                grid.Headers.Add(header1);
                grid.Headers.Add(header2);
            
                //Add a new row to the grid
                Row row = grid.Rows.Add(new SomeObject());
            
                //Change default behavior and set a new text color for the already added row
                row.Appearance.ForeColor = Color.Green;
            
                //Change the color only for the specified cell
                row["SomeId"].Appearance.BackColor = Color.Red;  
            }
            </code>
            
            <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
            <code>
            grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
            {
                //custom paint...
                e.Appearance.BackColor = Color.Red;
                e.Font = SystemFonts.MenuFont;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Appearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Appearance"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Appearance.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Appearance"/> class.
            </summary>
            <param name="foreColor">Foreground color.</param>
            <param name="backColor">Background color.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Appearance.#ctor(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Drawing.Color,Dapfor.Net.Ui.GradientDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Appearance"/> class.
            </summary>
            <param name="foreColor">Foreground color.</param>
            <param name="backColor">Background color or the beginning background color of the linear gradient</param>
            <param name="gradientEnabled">Specifies whether the gradient is enabled.</param>
            <param name="gradientEndBackColor">Ending background color of the linear gradient.</param>
            <param name="gradientDirection">The gradient direction.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Appearance.#ctor(Dapfor.Net.Ui.Appearance)">
            <summary>
            Copy constructor to initialize a new instance of the <see cref="T:Dapfor.Net.Ui.Appearance"/> class.
            </summary>
            <param name="appearance">The appearance.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Appearance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Appearance.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Appearance.ForeColor">
            <summary>
            Gets or sets the foreground color (color of the text).
            </summary>
            <value>The foreground color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Appearance.BackColor">
            <summary>
            Gets or sets the background color or the beginning background color of the linear gradient.
            </summary>
            <value>The background color.</value>
            <remarks>If <see cref="P:Dapfor.Net.Ui.Appearance.GradientEnabled"/> is false, then this value indicates a background color of 
            the UI element. Otherwise, this value means the beginning color of the linear gradient.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Appearance.GradientEnabled">
            <summary>
            Gets or sets a value indicating whether the gradient is enabled.
            </summary>
            <value><c>true</c> if the gradient is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Appearance.GradientDirection">
            <summary>
            Gets or sets the gradient direction.
            </summary>
            <value>The gradient direction.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Appearance.GradientEndBackColor">
            <summary>
            Gets or sets the ending background color of the linear gradient.
            </summary>
            <value>The ending background color of the linear gradient.</value>
        </member>
        <member name="T:Dapfor.Net.Formats.DecimalFormat">
            <summary>
            Formats and parses <see cref="T:System.Decimal"/> values.
            </summary>
            <remarks>
            <para>A very important feature in .Net Grid is its ability to work directly with application business logic. Business logic is a set of classes that may 
            have certain properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Decimal, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling 
            <see cref="M:System.Object.ToString">Object.ToString()</see> or <see cref="M:System.String.Format(System.String,System.Object[])">String.Format("{0}", value)</see>. However, this approach 
            is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to convert 
            values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a value 
            equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. For application programming 
            it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DecimalFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc.</item>
            <item>In a column: <see cref="P:Dapfor.Net.Ui.Column.Format">Column.Format</see> = 'your format';</item>
            <item>Directly in a cell (this method requires a lot of memory): <see cref="P:Dapfor.Net.Ui.Cell.Format">Cell.Format</see> = 'your format';</item>
            </list>
            </para>
            <para>
            This format can be declared with the <see cref="T:Dapfor.Net.Formats.DecimalFormatAttribute"/>. The following example demonstrates this:</para>
            <code>
            public class Product
            {
                private decimal price;
                
                [DecimalFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public decimal Price
                {
                    get { return price; }
                }
            }
            
            //Populate the grid and set a specified format for the 'Price' column
            public void PopulateGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
            
                //Another way to set up the format
                grid.Headers[0]["Price"].Format = new DecimalFormat(2, false, false);
            
                //Populate the grid
                grid.Rows.Add(new Product());
            }
            </code>
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Formats.IFormat">
            <summary>
            Objects implementing this interface format and parse values in cells.
            </summary>
            <remarks>
            <para>A very important feature in .Net Grid is its ability to work directly with application business logic. Business logic is a set of classes that may 
            have certain properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling 
            <see cref="M:System.Object.ToString">Object.ToString()</see> or <see cref="M:System.String.Format(System.String,System.Object[])">String.Format("{0}", value)</see>. However, this approach 
            is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to convert 
            values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a value 
            equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. For application programming 
            it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc.</item>
            <item>In a column: <see cref="P:Dapfor.Net.Ui.Column.Format">Column.Format</see> = 'your format';</item>
            <item>Directly in a cell (this method requires a lot of memory): <see cref="P:Dapfor.Net.Ui.Cell.Format">Cell.Format</see> = 'your format';</item>
            </list>
            </para>
            <para>The .Net Grid looks for IFofmat object to format values or parse strings in the following order: 
            <list type="bullet">
            <item>In a cell</item>
            <item>In a column returned by the <see cref="P:Dapfor.Net.Ui.Cell.Column">Cell.Column</see> property</item>
            <item>In a <see cref="T:Dapfor.Net.Data.IDataField"/> object, returned by the <see cref="P:Dapfor.Net.Ui.Cell.DataField">Cell.DataField</see> property.</item>
            <item>If the format is still not found, the grid uses default format for the specified object type.</item>
            </list>
            </para>
            <para>Some formats greatly simplify application development. For example, StringFormat, enables use of standard patterns for formatting values through <see cref="M:System.String.Format(System.String,System.Object[])">String.Format()</see>: 
            <code>
            column.Format = new StringFormat("### ### ### ###", string.Empty, " $");
            The value 12345 is displayed as "12 345 $"
            </code>
            </para>
            <para>You can also write your own formats for more complex formatting and parsing. Below you will find an example of a hexadecimal format: 
            <code>
            class HexFormat : IFormat
            {
                //Formats numeric value into a hexadecimal string
                public string Format(IDataField dataField)
                {
                    return string.Format("0x{0:X}", dataField.Value);
                }
            
                //Verifies whether the string can be parsed
                public bool CanParse(string text, IDataField dataField)
                {
                    text = text.Replace("0x", "");
                    text = text.Trim();
                    int value;
                    return string.IsNullOrEmpty(text) || int.TryParse(text, NumberStyles.HexNumber, CultureInfo.InvariantCulture, out value);
                }
            
                //Parses the string 
                public void Parse(string text, IDataField dataField)
                {
                    text = text.Replace("0x", "");
                    text = text.Trim();
                    int value = 0;
                    if (string.IsNullOrEmpty(text))
                    {
                        dataField.Value = value;
                    }
                    else if (int.TryParse(text, NumberStyles.HexNumber, CultureInfo.InvariantCulture, out value))
                    {
                        dataField.Value = value;
                    }
                }
            }
            
            //This code shows how to set format into a column
            column.Format = new HexFormat();
            //...
            grid.Rows.Add(new object[]{123}});
            
            
            //This example shows how to declare the format in a property - all grids will display hexadecimal values in cells
            class SomeClass
            {
                private int intValue;
            
                [Format(typeof(HexFormat))]
                public int SomeHexdecimalValue
                {
                    get { return intValue;  }
                    set { intValue = value; }
                }
            }
            //grid.Rows.Add(new SomeClass());
            </code>
            </para>
            <para>.NET Framework has similar system of type conversion based on the <see cref="T:System.ComponentModel.TypeConverter">System.ComponentModel.TypeConverter</see> class that enables conversion of values to strings and vice 
            versa. This conversion system is more complete, but a little bit cumbersome in the context of formating and data parsing. Althrough converters are bulky, such approach 
            enables development of a business logic independently from data presentation. In a perfect case all these mechanisms can be completely based on Microsoft's 
            component model and therefore have no physical dependencies on libraries of other vendors and on the Dapfor libraries as well.</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Formats.IFormat.Format(Dapfor.Net.Data.IDataField)">
            <summary>
            Formats the specified value of the specified data object.
            </summary>
            <param name="dataField">The data field.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Dapfor.Net.Formats.IFormat.CanParse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Indicates whether the format can parse the specified text to a unformatted value.
            </summary>
            <param name="text">The text.</param>
            <param name="dataField">The data field.</param>
            <returns>
            	<c>true</c> if this instance can parse the specified text; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Formats.IFormat.Parse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Parses the specified text to the value of the specified data object.
            </summary>
            <param name="text">The text to be parsed.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> class with the <see cref="P:Dapfor.Net.Formats.DecimalFormat.Precision"/> set to <c>2</c>, <see cref="P:Dapfor.Net.Formats.DecimalFormat.ShortForm"/> set to <c>false</c> and <see cref="P:Dapfor.Net.Formats.DecimalFormat.ShowZero"/> set to <c>true</c>.
            </summary>
            <example>
            <code>
            void DecimalFormat()
            {
                IFormat format = new DecimalFormat();
                UnboundValueAccessor accessor = new UnboundValueAccessor();
                accessor["Price"].Value = 123456789.123456;
            
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123 456 789.12
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.#ctor(System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> class.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <example>
            <code>
            void DecimalFormat()
            {
                IFormat format = new DecimalFormat(CultureInfo.InvariantCulture);
            
                UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                accessor["Price"].Value = 123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            
                accessor["Price"].Value = -123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123 456 789.12
            -123 456 789.12
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> class.
            </summary>
            <example>
            <code>
            void DecimalFormat()
            {
                IFormat format = new DecimalFormat(4);
                UnboundValueAccessor accessor = new UnboundValueAccessor();
                accessor["Price"].Value = 123456789.123456;
            
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123 456 789,1235
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.#ctor(System.Int32,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="formatProvider">The format provider.</param>
            <example>
            <code>
            void DecimalFormat()
            {
                IFormat format = new DecimalFormat(4, CultureInfo.InvariantCulture);
                UnboundValueAccessor accessor = new UnboundValueAccessor();
                
                accessor["Price"].Value = 123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123 456 789.1235
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="shortForm">if set to <c>true</c> the values will be shown in the short form.</param>
            <param name="showZero">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> will show '0' symbol for the zero values.</param>
            <example>
            <code>
            void DecimalFormat()
            {
                IFormat format = new DecimalFormat(4, true, true);
                UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                accessor["Price"].Value = 123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123,4568 M
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.#ctor(System.Int32,System.Boolean,System.Boolean,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="shortForm">if set to <c>true</c> the values will be shown in the short form.</param>
            <param name="showZero">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> will show '0' symbol for the zero values.</param>
            <param name="formatProvider">The format provider.</param>
            <example>
            <code>
            void DecimalFormat()
            {
                IFormat format = new DecimalFormat(4, true, true, CultureInfo.InvariantCulture);
                UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                accessor["Price"].Value = 123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123.4568 M
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.#ctor(Dapfor.Net.Formats.DecimalFormat)">
            <summary>
            Copy constructor. Copies all fields from the original format.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.Format(Dapfor.Net.Data.IDataField)">
            <summary>
            Formats the specified value of the specified data object.
            </summary>
            <param name="dataField">The data field.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.CanParse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Indicates whether the format can parse the specified text to a unformatted value.
            </summary>
            <param name="text">The text.</param>
            <param name="dataField">The data field.</param>
            <returns>
            	<c>true</c> if this instance can parse the specified text; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormat.Parse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Parses the specified text to the value of the specified data object.
            </summary>
            <param name="text">The text to be parsed.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormat.FormatProvider">
            <summary>
            Gets or sets the format provider.
            </summary>
            <value>The format provider.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormat.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormat.ShortForm">
            <summary>
            Gets or sets a value indicating whether the value is shown in short form.
            </summary>
            <value><c>true</c> if value is shown in short form; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormat.ShowZero">
            <summary>
            Gets or sets a value indicating whether the symbol '0' is shown when the value equals to zero.
            </summary>
            <value><c>true</c> if '0' is shown when the value equals to zero; otherwise, empty string will be a result of formatting.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormat.DefaultCulture">
            <summary>
            Gets or sets the default culture for all instances of the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> class.
            </summary>
            <value>The default culture.</value>
            <example>This example demonstrates how to set invariant culture as a default format provider for all
            instances of <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> class.
            <code>
            DecimalFormat.DefaultCulture = CultureInfo.InvariantCulture;
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormat.DefaultFormat">
            <summary>
            Gets the default format.
            </summary>
            <value>The default format.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.IScrollManager">
            <summary>
            An interface that handles scrolling of the grid. 
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.SetVerticalScroll(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the vertical scroll.
            </summary>
            <param name="pos">The pos.</param>
            <param name="max">The max.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="redraw">if set to <c>true</c> the vertical scrollbars will be redrawn.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.LineUp">
            <summary>
            Scrolls one line up.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.LineDown">
            <summary>
            Scrolls one line down.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.PageUp">
            <summary>
            Scrolls one page up.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.PageDown">
            <summary>
            Scrolls one page down.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.Top">
            <summary>
            Scrolls to top.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.Bottom">
            <summary>
            Scrolls to bottom.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.SetHorizontalScroll(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the horizontal scroll.
            </summary>
            <param name="pos">The pos.</param>
            <param name="max">The max.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.LineLeft">
            <summary>
            Scrolls one line left.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.LineRight">
            <summary>
            Scrolls one line right.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.PageLeft">
            <summary>
            Scrolls one page left.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.PageRight">
            <summary>
            Scrolls one page right.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.Left">
            <summary>
            Scrolls to left.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.IScrollManager.Right">
            <summary>
            Scrolls to right.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.IScrollManager.VerticalMaxRange">
            <summary>
            Gets the maximal vertical scroll range.
            </summary>
            <value>Maximal vertical scroll range.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.IScrollManager.VerticalPosition">
            <summary>
            Gets or sets the current vertical scroll position.
            </summary>
            <value>Current vertical scroll position.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.IScrollManager.VerticalPageSize">
            <summary>
            Gets the vertical scroll page size.
            </summary>
            <value>Vertical scroll page size.</value>
            <remarks>The value must in range [0, <see cref="P:Dapfor.Net.Ui.IScrollManager.VerticalMaxRange"/>]</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.IScrollManager.HorizontalMaxRange">
            <summary>
            Gets the maximal horizontal scroll range.
            </summary>
            <value>Maximal horizontal scroll range.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.IScrollManager.HorizontalPosition">
            <summary>
            Gets or sets the current horizontal scroll position.
            </summary>
            <value>Current horizontal scroll position.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.IScrollManager.HorizontalPageSize">
            <summary>
            Gets the horizontal scroll page size.
            </summary>
            <value>horizontal scroll page size.</value>
            <remarks>The value must in range [0, <see cref="P:Dapfor.Net.Ui.IScrollManager.HorizontalMaxRange"/>]</remarks>
        </member>
        <member name="E:Dapfor.Net.Ui.IScrollManager.HorizontalScrollChanged">
            <summary>
            Occurs when the horizontal scroll position is changed.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Internal.SortInfo">
            <summary>
            Summary description for SortInfo.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.SortInfo.#ctor(System.String,System.Int32,Dapfor.Net.Ui.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Internal.SortInfo"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="index">The index.</param>
            <param name="sortDirection">The sort direction.</param>
        </member>
        <member name="M:Dapfor.Net.Internal.SortInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="P:Dapfor.Net.Internal.SortInfo.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Dapfor.Net.Internal.SortInfo.Index">
            <summary>
            Gets the index of a sorted column.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Dapfor.Net.Internal.SortInfo.SortDirection">
            <summary>
            Gets the sort direction.
            </summary>
            <value>The sort direction.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Row">
             <summary>
             Contains a collection of <see cref="T:Dapfor.Net.Ui.Cell"/>s and information about data object, its location, hierarchy in the data grid, color, etc.
             </summary>
             <remarks>
             <para>Data can be added into the grid via Grid.Rows.Add(object dataObject) method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type. 
             To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)">Row.Add(object)</see> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. This way a programmer 
             can build almost any hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by <see cref="P:Dapfor.Net.Ui.Header.Level">Header.Level</see> 
             and <see cref="P:Dapfor.Net.Ui.Row.Level">Row.Level</see> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that level doesn't 
             have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave like Microsoft Windows Explorer.</para>
             <para> .Net Grid supports many data types because of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface that is one of the most crucial part of the grid. The main purpose 
             of this interface is to normalize presentation of different data types in the grid. There are lots of implementations of IDataAccessor interface. This way, a programmer can 
             add his own implementation to broaden the list of data types that can be used by the .Net Grid. When you call <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)">Grid.Rows.Add('your object')</see>, an implementation of the 
             <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface is created implicitly for 'your object' and the .Net Grid works with it only via the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> proxy, making no 
             difference between the data types.</para>
             
             <para>For different objects the process of getting or setting values of a data object may vary. For user-defined classes you can use the reflection mechanism to get 
             or set values. For IList&lt;T&gt; the grid gets them with a certain index; for IDictionary&lt;string, object&gt; with a string key so on. <see cref="T:Dapfor.Net.Data.IDataAccessor"/> may 
             support or not support data field identifiers it merely depends on its nature. If an object of user defined class is inserted into the grid, than its property name 
             become the identifiers in the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> by default. However, sometimes identifiers may be absent, e.g. if you you use an IList&lt;T&gt; object as a 
             parameter of the method Grid.Rows.Add('your object'). In such case, to display data in cells the .Net Grid uses indices of IList&lt;T&gt; and index of 
             the column which is calculated when it is inserted into the header.</para>
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 //Some fields
                 private double price;
                 private DateTime maturity;
             
                 [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                 public double Price
                 {
                     get { return price; }
                     set
                     {
                         price = value;
                         if (PropertyChanged != null)
                         {
                             PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                         }
                     }
                 }
             
                 public DateTime Maturity
                 {
                     get { return maturity; }
                 }
             
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             //Using sample
             public void PopulateGridWithDataObjects(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Maturity"));
             
                 grid.Headers.Add(new Header());
                 grid.Headers[1].Add(new Column("FirstName"));
                 grid.Headers[1].Add(new Column("SecondName"));
             
             
                 //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                 Product product = new Product();
                 Row productRow = grid.Rows.Add(product);
             
                 //Build some hierarchy ()...
                 productRow.Add(new Customer("John", "Smith"));
             
                 //Or from another thread - this is safe.
                 ThreadPool.QueueUserWorkItem(delegate
                 {
                     productRow.Add(new Customer("Sherlock", "Holmes"));
                 });
             
                 //This call will notify the grid through the INotifyPropertyChanged
                 //The grid will automatically repaint affected cells, and also sort and filter the row.
                 product.Price = 12.36;
             
                 //Or from another thread - this is safe.
                 ThreadPool.QueueUserWorkItem(delegate
                 {
                     product.Price = 14.21;
                 });
             }
             </code>
             </remarks>
             <threadsafety>If needed, the <see cref="T:Dapfor.Net.Ui.Row"/> synchronizes the calling thread with the GUI without blocking the calling thread.</threadsafety> 
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Add(System.Object)">
            <summary>
            Adds a data object of user-defined class as a child to this <see cref="T:Dapfor.Net.Ui.Row"/>. 
            </summary>
            <param name="dataObject">Data object.</param>
            <returns>A new <see cref="T:Dapfor.Net.Ui.Row"/>, having this row as the parent.</returns>
            <remarks>
            <para>Data can be added into the grid via Grid.Rows.Add(object dataObject) method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type. 
            To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)">Row.Add(object)</see> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. This way a programmer 
            can build almost any data hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by <see cref="P:Dapfor.Net.Ui.Header.Level">Header.Level</see> 
            and <see cref="P:Dapfor.Net.Ui.Row.Level">Row.Level</see> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that level doesn't 
            have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave like Microsoft Windows Explorer.</para>
            <code>
            void PopulateGrid(Grid grid)
            {
                //Add a new object to the scrollable rows on the top hierarchical level
                Row row = grid.Rows.Add(new SomeObject());
                //Add some children to the already inserted row
                row.Add(new SomeChild());
                row.Add(new SomeChild());
            }
            </code>
            </remarks>
            <threadsafety>The function is thread safe. New <see cref="T:Dapfor.Net.Ui.Row"/> is added with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Add(System.Collections.IList)">
            <summary>
            Adds a data object that implements <see cref="T:System.Collections.IList"/> interface as a child to this <see cref="T:Dapfor.Net.Ui.Row"/>. 
            </summary>
            <param name="collection">Data object.</param>
            <returns>A new <see cref="T:Dapfor.Net.Ui.Row"/>, having this row as the parent.</returns>
            <remarks>
            <para>Data can be added into the grid via Grid.Rows.Add(object dataObject) method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type. 
            To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)">Row.Add(object)</see> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. This way a programmer 
            can build almost any data hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by <see cref="P:Dapfor.Net.Ui.Header.Level">Header.Level</see> 
            and <see cref="P:Dapfor.Net.Ui.Row.Level">Row.Level</see> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that level doesn't 
            have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave like Microsoft Windows Explorer.</para>
            <code>
            void PopulateGrid(Grid grid)
            {
                //Add a new object to the scrollable rows on the top hierarchical level
                Row row = grid.Rows.Add(new SomeObject());
                //Add some children to the already inserted row
                row.Add(new object[] { "Mercedes", Color.Black, 25000d });
                row.Add(new object[] { "BMW", Color.White, 35000d });
            }
            </code>
            </remarks>
            <threadsafety>The function is thread safe. New <see cref="T:Dapfor.Net.Ui.Row"/> is added with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Add(System.Collections.IDictionary)">
            <summary>
            Adds a data object that implements <see cref="T:System.Collections.IDictionary"/> interface as a child to this <see cref="T:Dapfor.Net.Ui.Row"/>. 
            </summary>
            <param name="collection">Data object.</param>
            <returns>A new <see cref="T:Dapfor.Net.Ui.Row"/>, having this row as the parent.</returns>
            <remarks>
            <para>Data can be added into the grid via Grid.Rows.Add(object dataObject) method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type. 
            To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)">Row.Add(object)</see> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. This way a programmer 
            can build almost any data hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by <see cref="P:Dapfor.Net.Ui.Header.Level">Header.Level</see> 
            and <see cref="P:Dapfor.Net.Ui.Row.Level">Row.Level</see> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that level doesn't 
            have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave like Microsoft Windows Explorer.</para>
            </remarks>
            <threadsafety>The function is thread safe. New <see cref="T:Dapfor.Net.Ui.Row"/> is added with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Add(Dapfor.Net.Data.IDataAccessor)">
            <summary>
            Adds a user-defined <see cref="T:Dapfor.Net.Data.IDataAccessor"/> as a child to this <see cref="T:Dapfor.Net.Ui.Row"/>. 
            </summary>
            <param name="dataAccessor">Data accessor.</param>
            <returns>A new <see cref="T:Dapfor.Net.Ui.Row"/>, having this row as the parent.</returns>
            <remarks>
            <para>Data can be added into the grid via Grid.Rows.Add(object dataObject) method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type. 
            To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)">Row.Add(object)</see> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. This way a programmer 
            can build almost any data hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by <see cref="P:Dapfor.Net.Ui.Header.Level">Header.Level</see> 
            and <see cref="P:Dapfor.Net.Ui.Row.Level">Row.Level</see> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that level doesn't 
            have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave like Microsoft Windows Explorer.</para>
            </remarks>
            <threadsafety>The function is thread safe. New <see cref="T:Dapfor.Net.Ui.Row"/> is added with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Add(System.Object,System.Int32)">
            <summary>
            Adds a data object of user-defined class as a child to this <see cref="T:Dapfor.Net.Ui.Row"/> at specified position.
            </summary>
            <param name="dataObject">Data object.</param>
            <param name="childIndex">Index in <see cref="P:Dapfor.Net.Ui.Row.Children"/> collection.</param>
            <returns>
            A new <see cref="T:Dapfor.Net.Ui.Row"/>, having this row as the parent.
            </returns>
            <remarks>
            <para>Data can be added into the grid via Grid.Rows.Add(object dataObject) method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type. 
            To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)">Row.Add(object)</see> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. This way a programmer 
            can build almost any data hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by <see cref="P:Dapfor.Net.Ui.Header.Level">Header.Level</see> 
            and <see cref="P:Dapfor.Net.Ui.Row.Level">Row.Level</see> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that level doesn't 
            have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave like Microsoft Windows Explorer.</para>
            	<code>
            void PopulateGrid(Grid grid)
            {
                //Add a new object to the scrollable rows on the top hierarchical level
                Row row = grid.Rows.Add(new SomeObject());
                //Add some children to the already inserted row
                row.Add(new SomeChild());
                row.Add(new SomeChild());
            }
            </code>
            </remarks>
            <threadsafety>The function is thread safe. New <see cref="T:Dapfor.Net.Ui.Row"/> is added with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Add(Dapfor.Net.Data.IDataAccessor,System.Int32)">
            <summary>
            Adds a user-defined <see cref="T:Dapfor.Net.Data.IDataAccessor"/> as a child to this <see cref="T:Dapfor.Net.Ui.Row"/> at specified position.
            </summary>
            <param name="dataAccessor">Data accessor.</param>
            <param name="childIndex">Index in <see cref="P:Dapfor.Net.Ui.Row.Children"/> collection.</param>
            <returns>
            A new <see cref="T:Dapfor.Net.Ui.Row"/>, having this row as the parent.
            </returns>
            <remarks>
            <para>Data can be added into the grid via Grid.Rows.Add(object dataObject) method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type. 
            To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)">Row.Add(object)</see> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. This way a programmer 
            can build almost any data hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by <see cref="P:Dapfor.Net.Ui.Header.Level">Header.Level</see> 
            and <see cref="P:Dapfor.Net.Ui.Row.Level">Row.Level</see> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that level doesn't 
            have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave like Microsoft Windows Explorer.</para>
            </remarks>
            <threadsafety>The function is thread safe. New <see cref="T:Dapfor.Net.Ui.Row"/> is added with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new data object at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="dataObject">The data object.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Row"/> object if success. Otherwise <c>null</c>.</returns>
            <seealso cref="M:Dapfor.Net.Ui.NodeCollection.Insert(System.Int32,System.Object)">Grid.Nodes.Insert</seealso>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Move(Dapfor.Net.Ui.Row)">
            <summary>
            Moves the specified row as a child to this row.
            </summary>
            <param name="childRow">The row to be moved.</param>
            <returns>True if the row was successfully moved. Otherwise false.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Move(Dapfor.Net.Ui.Row,System.Int32)">
            <summary>
            Moves the specified row as a child to this row.
            </summary>
            <param name="childRow">The row to be moved.</param>
            <param name="index">Index to which the row should be moved.</param>
            <returns>True if the row was successfully moved. Otherwise false.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Remove">
            <summary>
            Removes this <see cref="T:Dapfor.Net.Ui.Row"/> with all children from the <see cref="P:Dapfor.Net.Ui.Row.Grid"/>.
            </summary>
            <returns>
            True if the row has been successfully removed. Otherwise false.
            </returns>
            <remarks>All resources, holding by the <see cref="T:Dapfor.Net.Ui.Row"/> will be released, and the <see cref="T:Dapfor.Net.Ui.Row"/> will be unsubscribed from receiving notifications
            from the user-defined object if it implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. All children, attached to the specified <see cref="T:Dapfor.Net.Ui.Row"/> will also be removed.
            The removing of the <see cref="T:Dapfor.Net.Ui.Row"/> does not affect the user-defined data objects, so they can be used in the application.</remarks>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/> is removed with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.RemoveChildren">
            <summary>
            Removes all children (but not this <see cref="T:Dapfor.Net.Ui.Row"/>).
            </summary>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/>s are removed with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Update">
            <summary>
            Updates sorting, grouping and filtering of this <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <remarks>
            <para>When data is changed in business logic layer, the rows where this data is displayed should be sorted, filtrated, and grouped, and cells with this are 
            repainted and highlighted as well</para>
            <para><b>Data updates in non-event model</b><br/>
            These processes are automatically launched when <see cref="M:Dapfor.Net.Ui.Row.Update"/> / <see cref="M:Dapfor.Net.Ui.Cell.Update"/> methods are invoked. Moreover, .Net Grid constantly monitors row 
            state including their visibility, sorting position, grouping position and matching filtering conditions. Invocation of Row.Update() method initiates verification 
            of all the above conditions for a single row among ordered rows in a grid. This process is much more efficient than working with unsorted data, especially 
            during sorting. Invocation of Row.Update() in the event-driven model occurs regularly upon notification from the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. 
            The Row.Update() method call is thread-safe, and therefore you don't have to write your own thread synchronization logic. It is extremely convenient when 
            you develop multi-threaded applications.</para>
            <para>Therefore, when data is changed in the non-event model, you just have to invoke <see cref="M:Dapfor.Net.Ui.Row.Update"/> / <see cref="M:Dapfor.Net.Ui.Cell.Update"/> methods or 
            <see cref="P:Dapfor.Net.Ui.Cell.Value"/> setter, and .Net Grid will automatically perform all necessary operations with the row or with the cell
            <code>
            public void DataUpdating(Grid grid)
            {
                object[] data = new object[] { "value 1", 125, true, DockStyle.Fill };
                Row row = grid.Rows.Add(data);
            
                //The next calls will invalidate and highlight cells, and sort, filter and regroup the row
                row[2].Value = false;
                row[3].Value = DockStyle.Top;
            
                //The last value in the data should equal to 'DockStyle.Top'.
                Assert.AreEqual(data[3], DockStyle.Top);
            
                //This call will also invalidate and highlight the cell, and sort, filter and regroup the row
                data[1] = 125;
                row[1].Update();
            
                //The next call will just sort, filter and regroup the row
                data[0] = "value 2";
                row.Update();
            }
            </code>
            </para>
            
            <para><b>Event-driven model</b><br/>
            <para>In the event-driven model it is sufficient to implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface to notify grid about data changes. This approach has very important 
            advantages. The aforementioned interface is located in <see cref="N:System.ComponentModel"/> namespace and has only one public event - <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>. 
            Because of that business logic can notify subscribers (GUI controls) through this interface and the .Net Grid itself performs data sorting, filtration and other operations. 
            Moreover, a subscriber makes necessary actions for thread synchronization with the GUI thread. In other words, with good application architecture your assemblies with application 
            logic will have no dependencies from <see cref="N:System.Windows.Forms"/> and Dapfor assemblies.</para>
            <para>This is an implementation of the popular OOP design pattern that is known as Observer or Publisher / Subscriber. This approach provides a considerable advantage 
            over conventional programming models. Your applications may have multiple Graphic User Interfaces (multiple grids) that are subscribed to <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> 
            event as event-listeners to the business object. A business object is an event generator or event publisher. When an object field changes in the setter of any property, 
            the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event is fired and all subscribers get guaranteed notification about it:</para>
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        price = value;
                        if(PropertyChanged != null)
                        {
                            PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                        }
                    }
                }
                public DateTime Maturity
                {
                    get { return maturity; }
                }
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Add a data object to the grid. 
            Product product = new Product();
            Row row = grid.Rows.Add(product);
            
            //The grid will automatically sort, filter, group and highlight corresponding row!
            //The product is your business logic and may be placed in any assembly that doesn't need to have references to Dapfor assemblies!
            product.Price = 123;
            
            //The value in the "Price" cell should equal to '123'.
            Assert.AreEqual(row["Price"].Value, 123);
            </code>
            
            <para><b>Performance</b><br/>
            We would also like to emphasize performance advantages of the .Net Grid. In an unsorted grid all rows are systematically indexed, and when sorting is enabled, 
            the search occurs at most <b>ln(N)</b> iterations due to efficient algorithms used in .Net Grid. It's obvious that storing row state data consumes memory. 
            Average memory consumption per row equals to <b>160</b> bytes, and that results in <b>16 MB</b> per <b>100,000</b> data objects inserted into the grid, 
            while the performance advantage is tremendous! The grid with <b>2,000</b> rows enables updating of more than <b>50,000</b> cells and sorting of more than <b>3,000</b>
             rows per second in realtime!
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Invalidate">
            <summary>
            Invalidates the entire surface of the <see cref="T:Dapfor.Net.Ui.Row"/> and causes it to be redrawn. 
            </summary>
            <remarks><para>This method does not force the <see cref="P:Dapfor.Net.Ui.Row.Grid"/> to resort or refilter <see cref="T:Dapfor.Net.Ui.Row"/>.</para>
            <para>It is well known that <see cref="N:System.Windows.Forms">System.Windows.Forms</see> controls use standard Windows API based on window messages. To repaint a certain part of a control, 
            it should invoke the <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">Control.Invalidate(Rectangle)</see> method, where Rectangle specifies location and size of the client surface that should be repainted. 
            In general, the calculation of screen coordinates of an element is a quite complicated process, especially in a hierarchical data grid. The .Net Grid provides 
            very convenient API to repaint different elements such as cells, rows, columns etc.</para>
            <para>Below you may see a list of elements that can be repainted in the grid:</para>
            <list type="bullet">
            <item><see cref="M:Dapfor.Net.Ui.Cell.Invalidate">Cell.Invalidate()</see> - Repainting of a single cell.</item>
            <item><see cref="M:Dapfor.Net.Ui.Row.Invalidate">Row.Invalidate()</see> - Repainting of a single row.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.Invalidate">Header.Invalidate()</see> - Header invalidation. If the header is located in the hierarchical grid (not top-level header), all duplicates in visible surface are repainted.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.InvalidateRows">Header.InvalidateRows()</see> - Repaint all rows in the grid on the same hierarchical level as the header.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.Invalidate">Column.Invalidate()</see> - Column title invalidation.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.InvalidateCells">Column.InvalidateCells()</see> - Repainting of all cells in the grid that are related to a certain column located on the same hierarchical level as a header.</item>
            </list>
            <code>
            public void InvalidateUiElements(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header1 = new Header();
                header1.Add(new Column("Name"));
                header1.Add(new Column("Price"));
                header1.Add(new Column("Quantity"));
                grid.Headers.Add(header1);
            
                Header header2 = new Header();
                header2.Add(new Column("Name"));
                header2.Add(new Column("Date"));
                grid.Headers.Add(header2);
            
            
                //Add some data objects 
                Row product1 = grid.Rows.Add(new Product());
                Row product2 = grid.Rows.Add(new Product());
            
                //Add some customers to the first product
                Row customer1 = product1.Add(new Customer());
                Row customer2 = product1.Add(new Customer());
            
                //Add some customers to the another product
                Row customer3 = product2.Add(new Customer());
            
                //Expand all rows
                grid.Rows.ExpandAll();
            
            
                //Invalidate the cell
                customer1["Date"].Invalidate();
            
                //Invalidate the row
                customer1.Invalidate();
            
                //Invalidate the top-level header
                header1.Invalidate();
            
                //Invalidate product1 and product2
                header1.InvalidateRows();
            
                //Invalidate the column title 'Date' on the header2
                header2["Date"].Invalidate();
            
                //Invalidate all cells in the column 'Date'
                header2["Date"].InvalidateCells();
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.ExpandAll">
            <summary>
            Expands all child <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <threadsafety>The function is thread safe. <see cref="T:Dapfor.Net.Ui.Row"/>s are expaneded without blocking the calling thread.</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Expanded"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.CollapseAll"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.CollapseAll">
            <summary>
            Collapses all child <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <threadsafety>The function is thread safe. <see cref="T:Dapfor.Net.Ui.Row"/>s are collapsed without blocking the calling thread.</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.Expanded"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.ExpandAll"/>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.EnsureVisible">
            <summary>
            Ensures the <see cref="T:Dapfor.Net.Ui.Row"/> visible.
            </summary>
            <threadsafety>The function is thread safe. <see cref="T:Dapfor.Net.Ui.Row"/> is ensured visible without blocking the calling thread.</threadsafety>
            <remarks>The grid provides a simple ability to place rows or cells in visible area of the grid with <see cref="M:Dapfor.Net.Ui.Row.EnsureVisible">Row.EnsureVisible()</see> and 
            <see cref="M:Dapfor.Net.Ui.Cell.EnsureVisible">Cell.UnsureVisible()</see>. If necessary, the grid scrolls rows and columns.
            <code>
             public void EnsureVisibleExample(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 //Add more columns...
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 //Add more rows...
            
                 //Ensure the row visible
                 row.EnsureVisible();
            
                 //Ensure the column visible
                 grid.Headers[0]["Price"].EnsureVisible();
            
            
                 //Ensure the cell visible
                 row["Price"].EnsureVisible();
             }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.Adjust">
            <summary>
            Adjusts the height of the <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.InvalidateHeader">
            <summary>
            Invalidates the corresponding <see cref="P:Dapfor.Net.Ui.Row.Header"/>.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.Row.Grid"/>.
            </summary>
            <value><see cref="P:Dapfor.Net.Ui.Row.Grid"/> object.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.DataSource">
             <summary>
             Gets or sets the data source for the specified <see cref="T:Dapfor.Net.Ui.Row"/>.
             </summary>
             <value>The data source.</value>
             <remarks><para>In addition to <see cref="P:Dapfor.Net.Ui.Grid.DataSource">Grid.DataSource</see> property that has become a common method of data binding in the grid, 
             starting from version 2.5.0 the grid provides a new API to bind either the grid or individual rows to data sources.</para>
             <para>The bound data source may implement <b>IList</b> or <b>IBindingList</b> interfaces. If the bound data source implements <b>IBindingList</b> interface, 
             the grid subscribes to notifications of this data collection and enables automated thread-safe management of content changes.
             </para>
             </remarks>
             <example>
             <code>
             //Basket class
             public class Basket
             {
                 //Private fields
                 private readonly BindingList&lt;Order&gt; _orders = new BindingList&lt;Order&gt;();
            
                 //Public properties    
                 public IList&lt;Order&gt; Orders
                 {
                     get { return _orders; }
                 }
             }
            
             //Initialize the grid
             public void InitializeGrid(Grid grid, IList&lt;Order&gt; baskets)
             {
                 //Bind the grid to a basket collection
                 grid.DataSource = baskets;
            
                 //Bind an order collection to each basket row
                 foreach (Basket basket in baskets)
                 {
                     Row row = grid.DataObjects.FindFirstRow(basket);
                     if (row != null)
                     {
                         row.DataSource = basket.Orders;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.IsInVisibleBounds">
            <summary>
            Gets a value indicating whether this row is in visible bounds of the Grid.
            </summary>
            <value>
            	<c>true</c> if this instance is in visible bounds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Item(System.String)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Cell"/> by the specified identifier.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Cell"/></value>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Cell"/> at the specified index.
            </summary>
            <value><see cref="T:Dapfor.Net.Ui.Cell"/> object.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Header">
            <summary>
            Gets a row <see cref="P:Dapfor.Net.Ui.Row.Header"/>.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Appearance">
             <summary>
             Gets row <see cref="P:Dapfor.Net.Ui.Row.Appearance"/>.
             </summary>
             <value><see cref="P:Dapfor.Net.Ui.Row.Appearance"/> object.</value>
             <remarks>
             <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
             colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
             <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
             However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="P:Dapfor.Net.Ui.Row.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
             can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
             properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
             </para>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             
             <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
             <code>
             grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
             {
                 //custom paint...
                 e.Appearance.BackColor = Color.Red;
                 e.Font = SystemFonts.MenuFont;
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Parent">
            <summary>
            Gets parent <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>
            Parent if exists. If the <see cref="T:Dapfor.Net.Ui.Row"/> is on the top hierarchical level, then the parent row will be <c>null</c>.
            </value>
            <threadsafety>The function is thread safe.</threadsafety>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Children">
            <summary>
            Gets a collection of child <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <value>Collection of children.</value>
            <threadsafety>The function is thread safe.</threadsafety>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            
            <code>
            public void PopulateGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
            
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("Song"));
            
                Row rowPlaylist = grid.Rows.Add(new Playlist("Queen"));
            
                rowPlaylist.Add(new Song("Keep Yourself Alive"));
                rowPlaylist.Add(new Song("Great King Rat"));
                rowPlaylist.Add(new Song("White Queen"));
            
                grid.Rows.ExpandAll();
            
                Console.WriteLine("{0} Rows at the top hierarchy level", grid.Nodes.Count);
                //Iterate all playlists (top-level items)
                foreach (Row playlist in grid.Nodes)
                {
                    Console.WriteLine("Playlist '{0}':", playlist["Name"].Text);
            
                    //Iterate all songs
                    foreach (Row song in playlist.Children)
                    {
                        Console.WriteLine("Song '{0}'", song["Song"].Text);
                    }
                }
            }
            
            //Console output:
            1 Rows at the top hierarchy level
            Playlist 'Queen':
            Song 'Keep Yourself Alive'
            Song 'Great King Rat'
            Song 'White Queen'
            </code>
            </remarks>
            <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.HasNonFilteredChildren">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> at last one non-filtered child.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Dapfor.Net.Ui.Row"/> has at last one non-filtered child <see cref="T:Dapfor.Net.Ui.Row"/>; otherwise, <c>false</c>.
            </value>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Level">
            <summary>
            Gets zero-based hierarchical level of this <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The hierarchical level.</value>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.VisibleIndex">
            <summary>
            Gets row index in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> collection.
            </summary>
            <value>Row index if this row is visible. Otherwise -1.</value>
            <threadsafety>The function is thread safe.</threadsafety>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            </remarks>
            <seealso cref="P:Dapfor.Net.Ui.Row.ChildIndex"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.ChildIndex">
            <summary>
            Gets or sets a position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see>.
            By setting a new index, you can move this <see cref="T:Dapfor.Net.Ui.Row"/> in grid.
            </summary>
            <value>
            Index in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see>.
            </value>
            <remarks>
            <para>When you modify data in real time, you often call <see cref="M:Dapfor.Net.Ui.Row.Update">Row.Update()</see> method. It helps the grid to perform the required operations to define new row position, compliance with filtering, grouping and hierarchy sorting criteria, etc. In addition to automatically moving a row, the grid provides a convenient API for changing its position.</para>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <para><list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list></para>
            <para>Considering all the above, you may move rows with Row.ChildIndex only if the grid is not sorted. This property has been selected because it defines row position in the grid disregarding hierarchy and visibility of previous rows.</para>
            <code>
            public void MoveToTop(Row row)
            {
                row.ChildIndex = 0;
            }
            
            public void MoveToBottom(Row row)
            {
                Row parent = row.Parent;
                row.ChildIndex = parent != null
                    ? parent.Children.Count - 1
                    : row.Grid.Nodes.Count - 1;
            }
            </code>
            </remarks>
            <threadsafety>The function is thread safe.</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.VisibleChildIndex">
            <summary>
            Gets or sets a position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> collection. Please note, that this row should be visible.
            </summary>
            <value>
            Index in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> collection.
            </value>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <para><list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list></para>
            </remarks>
            <threadsafety>The function is thread safe.</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.DataSourceIndex">
            <summary>
            Gets an index of this Row in <see cref="P:Dapfor.Net.Ui.Grid.DataSource"/> collection. May differ to <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/>.
            </summary>
            <value>The index of the data source.</value>
            <code>
            public void SetDataSource(Grid grid)
            {
                //Build a small datatable
                DataTable table = new DataTable();
                table.Columns.Add(new DataColumn("Column1"));
                table.Columns.Add(new DataColumn("Column2"));
                table.Rows.Add(new object[] { "Row0, Col0", "Row0, Col1" });
                table.Rows.Add(new object[] { "Row1, Col0", "Row1, Col1" });
                table.Rows.Add(new object[] { "Row2, Col0", "Row2, Col1" });
            
                //Attach datatable to the grid
                grid.Headers.AutoGenerate = true;
                grid.DataSource = table;
            
                //Get the first row in Grid
                Row row1 = grid.Rows[0];
                Console.WriteLine("Row1, Column1: value = {0}", row1["Column1"].Value);
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Sort the grid
                grid.Headers[0]["Column1"].SortDirection = SortDirection.Descending;
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Filter the row1
                row1.Filtered = true;
                Console.WriteLine("Row1: index in Grid: {0}, index in Datasource = {1}", row1.VisibleIndex, row1.DataSourceIndex);
            
                //Other row...
                Row row2 = grid.Rows[0];
                Console.WriteLine("Row2: index in Grid: {0}, index in Datasource = {1}", row2.VisibleIndex, row2.DataSourceIndex);
                Console.WriteLine("Row2, Column1: value = {0}", row2["Column1"].Value);
            }
            
            Output:
            Row1, Column1: value = Row0, Col0
            Row1: index in Grid: 0, index in Datasource = 0
            Row1: index in Grid: 2, index in Datasource = 0
            Row1: index in Grid: -1, index in Datasource = 0
            Row2: index in Grid: 0, index in Datasource = 2
            Row2, Column1: value = Row2, Col0
            </code>
            <seealso cref="P:Dapfor.Net.Ui.Grid.DataSource"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Dock">
            <summary>
            Gets or sets a value, indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is docked. 
            </summary>
            <remarks>
            <para>Docked rows are simple data rows that can be docked on top or bottom at any hierarchical level. Such rows don't depend on data sorting direction and constantly stay 
            on their fixed positions. This feature is useful when you need to display important information, e.g. an average value or a total, or when you need to create a row 
            that acts as a filter (drop-down boxes containing value ranges).</para>
            
            <para>Programmer may specify multiple docked rows. If your data grid already has docked rows, the next docked row will be placed after the previously docked row and the 
            first non-docked row. Docked rows can also be filtered or grouped as any other data rows.</para>
            <code>
            //Dock row to the bottom
            grid.Rows[8].Dock = RowDockStyle.Bottom;
            
            //Dock row to the top
            grid.Rows[9].Dock = RowDockStyle.Top;
            
            //Undock row
            grid.Rows[0].Dock = RowDockStyle.None;
            </code>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.VisibleChildren">
             <summary>
             Gets a collection of visible child <see cref="T:Dapfor.Net.Ui.Row"/>s.
             </summary>
             <value>Collection of visible children.</value>
             <remarks>
             <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
             It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
             a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
             be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
             may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
             <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
             in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
             hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
             
             <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
             <list type="bullet">
             <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
             <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
             <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
             <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
             <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
             <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
             <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
             <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
             <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
             <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
             <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
             <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
             <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
             <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
             <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
             </list>
             </remarks>
             <seealso cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/>
             <code>
             public void PopulateGrid(Grid grid)
             {
                 //Configure the headers
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Name"));
             
                 grid.Headers.Add(new Header());
                 grid.Headers[1].Add(new Column("Song"));
             
                 Row rowPlaylist = grid.Rows.Add(new Playlist("Queen"));
             
                 rowPlaylist.Add(new Song("Keep Yourself Alive"));
                 rowPlaylist.Add(new Song("Great King Rat"));
                 rowPlaylist.Add(new Song("White Queen"));
             
                 grid.Rows.ExpandAll();
             
                 Console.WriteLine("{0} Rows at the top hierarchical level", grid.Nodes.Count);
                 //Iterate all playlists (top-level items)
                 foreach (Row playlist in grid.Nodes)
                 {
                     Console.WriteLine("Playlist '{0}':", playlist["Name"].Text);
             
                     //Iterate all songs
                     foreach (Row song in playlist.VisibleChildren)
                     {
                         Console.WriteLine("Song '{0}'", song["Song"].Text);
                     }
                 }
             
                 //Collapse the rowPlaylist - All children become invisible
                 rowPlaylist.Expanded = false;
             
                 Console.WriteLine("Count of Songs '{0}'", rowPlaylist.Children.Count);
                 Console.WriteLine("Count of visible Songs '{0}'", rowPlaylist.VisibleChildren.Count);
             }
            
             // Console output:
             1 Rows at the top hierarchical level
             Playlist 'Queen':
             Song 'Keep Yourself Alive'
             Song 'Great King Rat'
             Song 'White Queen'
             Count of Songs '3'
             Count of visible Songs '0'
             </code>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.IsFirstVisibleChild">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is the first visible child in its parent.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Dapfor.Net.Ui.Row"/> is the first visible child; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.IsLastVisibleChild">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is the lastest visible child in its parent.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Dapfor.Net.Ui.Row"/> is the lastest visible child; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.PrevVisible">
            <summary>
            Gets a previous visible <see cref="T:Dapfor.Net.Ui.Row"/> on the same hierarchical level.
            </summary>
            <value>The previous visible <see cref="T:Dapfor.Net.Ui.Row"/> if exists. Otherwise <c>null</c>.</value>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            </remarks>
            <seealso cref="P:Dapfor.Net.Ui.Row.NextVisible"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.NextVisible">
            <summary>
            Gets a next visible <see cref="T:Dapfor.Net.Ui.Row"/> on the same hierarchical level.
            </summary>
            <value>The next visible <see cref="T:Dapfor.Net.Ui.Row"/> if exists. Otherwise <c>null</c>.</value>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            </remarks>
            <seealso cref="P:Dapfor.Net.Ui.Row.PrevVisible"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
            <remarks>
            Visible row can't be <see cref="P:Dapfor.Net.Ui.Row.Filtered"/> and can not be collapsed by its parent.
            </remarks>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Filtered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is filtered.
            </summary>
            <value><c>true</c> if filtered; otherwise, <c>false</c>.</value>
            <remarks>
            <para>Simply put, data filtration is managing visibility of rows in the grid. Row invisibility in the grid means that the row is still in the grid, but it is invisible 
            together with its children. It's important to say that this row can be accessed only via <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>/<see cref="P:Dapfor.Net.Ui.Row.Children"/> collection properties. 
            In the <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> property invisible rows are absent, as it shows only visible rows. Filtration is particularly important when data is grouped. 
            If there are no visible rows, the whole group becomes invisible (but is not removed!). If a filtered row should be made visible again, it takes 
            certain position according to the sorting rules if any.</para>
            <para>.Net Grid presents 3 ways of data filtration: 
            <list type="bullet">
            <item>Setting boolean in the <see cref="P:Dapfor.Net.Ui.Row.Filtered"/> property</item>
            <item>Implementing the <see cref="T:Dapfor.Net.Ui.IFilter"/> interface and setting it with the <see cref="T:Dapfor.Net.Ui.Filter"/> property</item>
            <item>Filters in columns</item>
            </list>
            </para>
            <para>The first way is the easiest to use, however, we recommend you to favor the second one that provides definite advantages.</para>
            <para>The <see cref="T:Dapfor.Net.Ui.IFilter"/> interface has only one property <see cref="M:Dapfor.Net.Ui.IFilter.IsFiltered(Dapfor.Net.Ui.Row)"/>. This method is invoked when data is inserted into the data grid. 
            It is also invoked every time <see cref="M:Dapfor.Net.Ui.Row.Update"/> and <see cref="M:Dapfor.Net.Ui.Grid.FilterRefresh"/> methods are called. Therefore, grid rows always meed the filtration criteria. 
            However, when <see cref="T:Dapfor.Net.Ui.IFilter"/> interface is not implemented, the invocation of <see cref="M:Dapfor.Net.Ui.Row.Update"/> doesn't result in data filtration and newly added data is 
            always visible in the grid until the <see cref="P:Dapfor.Net.Ui.Row.Filtered"/> call. Besides, when filtering conditions are changed, invocation of <see cref="M:Dapfor.Net.Ui.Grid.FilterRefresh"/> 
            doesn't make the row visible the programmer should iterate through every row in the data grid via <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/> and <see cref="P:Dapfor.Net.Ui.Row.Children"/> collections 
            to verify new conditions. There is an important thing to add regarding multi-threaded applications. Invocation of <see cref="M:Dapfor.Net.Ui.IFilter.IsFiltered(Dapfor.Net.Ui.Row)"/> method occurs 
            regularly in the GUI thread, and it should be considered during development of multi-threaded applications. Please note that <see cref="M:Dapfor.Net.Ui.Row.Update"/> method is 
            thread-safe and can be invoked in any thread.</para>
            <para>Data filtration implemented via IFilter interface of non-event-driven model consists in the Row.Update() method call:
            <code>
            public class CustomFilter : IFilter
            {
                public bool IsFiltered(Row row)
                {
                    //There are three ways to get cell's value: 
                    //1. Via Cell.Value property: double value = (double)row["Price"].Value
                    //2. Via IDataAccessor and IDataField: double value = (double) row.DataAccessor["Price"].Value
                    //3. Directly from the data object: double value = (double)((IList)row.DataObject)[2];
            
                    if ((double)row["Price"].Value &lt; 30000)
                    {
                        //Filter the row
                        return true;
                    }
            
                    //The row is not filtered
                    return false;
                }
            
                public event EventHandler&lt;EventArgs&gt; FilterUpdated;
            }
            
            public void FilterUsing(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
                grid.Headers[0].Add(new Column("Color"));
                grid.Headers[0].Add(new Column("Price"));
            
                //Set filter
                grid.Filter = new CustomFilter();
            
                //Populate the grid
                Row row1 = grid.Rows.Add(new object[] { "Mercedes", Color.Black, 25000d});
                Assert.IsFalse(row1.Visible);
            
                Row row2 = grid.Rows.Add(new object[] { "BMW", Color.White, 35000d });
                Assert.IsTrue(row2.Visible);
            
                //Set a new price for "Mercedes"
                row1["Price"].Value = 32000d;
                Assert.IsTrue(row1.Visible);
            }
            </code>
            </para>
            </remarks>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is expanded.
            </summary>
            <remarks>If this property is set to <c>false</c> then all children are hidden (but not <see cref="P:Dapfor.Net.Ui.Row.Filtered"/>!).</remarks>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
            <seealso cref="M:Dapfor.Net.Ui.Row.ExpandAll"/>
            <seealso cref="M:Dapfor.Net.Ui.Row.CollapseAll"/>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.IsGroup">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is a group (pseudo-item without data object that groups the rows with specified criteria).
            </summary>
            <remarks>
            <para>.Net Grid enables multiple data grouping in headers of the .Net Grid by any columns at any hierarchical level. 
            When data is grouped by a specific column, .Net Grid searches all rows within a group that has similar values. 
            When a group is organized, a row that doesn't contain a data object is added to the data grid. The <b>Row.IsGroup</b> property 
            of such row will always return true, and <b>Row["column id"].Value</b> will return a value by which data is grouped. 
            All rows with values that meet grouping conditions are attached to the newly created group. Before a new data object is added, .Net Grid 
            verifies whether there is any group with the required value on the current hierarchical level. If there is no such group, a new group is created. 
            When the <b>Row.Update()</b> method is invoked, the grid checks whether a row conforms to group value. 
            If there are no more rows in the group, the group is removed from the grid.</para>
            
            <para>In programming the grouping feature can be enabled via the <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property. Sequential invocation of this property for several columns results in 
            data grouping of these columns. The column with grouping remains visible unless <see cref="P:Dapfor.Net.Ui.Column.Visible">Column.Visible</see> property is set to false. 
            Sorting (and multiple sorting) can be enabled or disabled for grouped columns because sorting and grouping are completely independent processes. The list of grouped 
            columns can be viewed with <see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> collection property. A user can also group columns in the data grid. 
            To use this ability the user just needs to drag a column to a special panel on the grid's header. However, this is not possible if height of this panel is set to 0.</para>
            
            <para><b>Grouping and data filtering</b><br/>
            When grouping and filtering are enabled simultaneously, the .Net Grid checks every group for visible rows. If there are no visible rows, the group is filtered. 
            If a single unfiltered row appears, the row of the group also becomes visible.
            </para>
            <para><b>Non-event model</b><br/>
            Real-time grouping in non event-driven model is done with <see cref="M:Dapfor.Net.Ui.Row.Update"/> method. 
            <code>
            public void NonEventModelGrouping(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
                grid.Headers[0].Add(new Column("Color"));
                grid.Headers[0].Add(new Column("Price"));
            
                //Group data by color
                grid.Headers[0]["Color"].Grouped = true;
            
                //Populate the grid
                Row blackMercedes = grid.Rows.Add(new object[] { "Mercedes", Color.Black, 25000d });
                Row whiteMercedes = grid.Rows.Add(new object[] { "Mercedes", Color.White, 23000d });
                Row whiteBMW = grid.Rows.Add(new object[] { "BMW", Color.White, 35000d });
            
                //The grid has two groups - 1=&gt; black mercedes 2=&gt; white mercedes and bmw
            
                //The first group has only the black mercedes
                Assert.AreEqual(1, grid.Nodes[0].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[0].Children[0]["Name"].Value);
            
                //The second group has two cars: white mercedes and white bmw
                Assert.AreEqual(2, grid.Nodes[1].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[1].Children[0]["Name"].Value);
                Assert.AreEqual("BMW", grid.Nodes[1].Children[1]["Name"].Value);
            
                //Change color of the white mercedes
                whiteMercedes["Color"].Value = Color.Green;
            
                //Now we have 3 groups. The last contains only the green mercedes
                Assert.AreEqual(1, grid.Nodes[2].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[2].Children[0]["Name"].Value);
                Assert.AreEqual(Color.Green, grid.Nodes[2].Children[0]["Color"].Value);
            }
            </code>
            </para>
            
            <para><b>Event-driven model</b><br/>
            In the event-driven model <see cref="M:Dapfor.Net.Ui.Row.Update"/> method is called every time when a data object sends a notification. Once again we'd like to emphasize the importance 
            of such model as it removes dependency of the business layer on <see cref="N:System.Windows.Forms"/> controls and on Dapfor assemblies as well.
            </para>
            </remarks>
            <value><c>true</c> if this <see cref="T:Dapfor.Net.Ui.Row"/> is a group; otherwise, <c>false</c>.</value>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Selected">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is selected.
             </summary>
             <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
             <remarks>
             You can select single or multiple rows in the grid with <see cref="P:Dapfor.Net.Ui.Row.Selected">Row.Selected</see> property and <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.Enabled">Grid.Selection.Enabled</see> / 
             <see cref="P:Dapfor.Net.Ui.Grid.GridSelection.MultipleEnabled">Grid.Selection.MultipleEnabled</see> property. All selected lines are added to <see cref="P:Dapfor.Net.Ui.Grid.Selection">Grid.Selection</see> collection
             that supports iteration. To unselect all rows, call <see cref="M:Dapfor.Net.Ui.Grid.GridSelection.Clear">Grid.Selection.Clear()</see> method. 
             <code>
             public void ExampleSelection(Grid grid)
             {
                 //Set a new semi-transparent color for selected rows
                 grid.Selection.Color = Color.FromArgb(80, 102, 36, 10);
            
                 //Allow selection in grid
                 grid.Selection.Enabled = true;
            
                 //Allow multiple selection in grid
                 grid.Selection.MultipleEnabled = true;
            
                 //Rows in the collection should be in order
                 grid.Selection.Sorted = true;
            
            
                 //Select the 5th row
                 grid.Rows[5].Selected = true;
            
                 //Enumerate the selected rows...
                 foreach (Row row in grid.Selection)
                 {
                     //Do something here...
                 }
            
                 //Clear the selection
                 grid.Selection.Clear();
             }
             </code>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Focused">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is focused.
             </summary>
             <value><c>true</c> if focused; otherwise, <c>false</c>.</value>
             <code>
             public void FocusExample(Grid grid)
             {
                 //Set a new color with the alpha channel for the focused row.
                 grid.FocusSettings.Color = Color.FromArgb(30, 128, 0, 30);
            
                 grid.FocusedRowChanged += delegate(object sender, FocusedRowEventArgs e)
                 {
                     Console.WriteLine("Previous focused row: {0}", e.PrevFocusedRow != null ? e.PrevFocusedRow.VisibleIndex.ToString() : "not specified");
                     Console.WriteLine("New focused row: {0}", e.NewFocusedRow != null ? e.NewFocusedRow.VisibleIndex.ToString() : "not specified");
                 };
            
                 //Add some data object
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Set the row focused
                 grid.Rows[1].Focused = true;
                 
                 Console.WriteLine("Focused row visible index: {0}", grid.FocusedRow.VisibleIndex);
            
                 //Clear the focus
                 grid.FocusedRow = null;
                 //Another way to clear focus:
                 grid.FocusSettings.Clear();
             }
             
             //Console output:
             Previous focused row: not specified
             New focused row: 1
             Focused row visible index: 1
             Previous focused row: 1
             New focused row: not specified
             </code>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.FirstVisibleChild">
            <summary>
            Gets the first visible child of this <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The first visible child <see cref="T:Dapfor.Net.Ui.Row"/> if exists. Otherwise <c>null</c>.</value>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.LastVisibleChild">
            <summary>
            Gets the last visible child of this <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The last visible child <see cref="T:Dapfor.Net.Ui.Row"/> if exists. Otherwise <c>null</c>.</value>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.DataObject">
            <summary>
            Gets a data object, wrapped by <see cref="T:Dapfor.Net.Data.IDataAccessor"/>.
            </summary>
            <value>The data object.</value>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.DataAccessor">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Data.IDataAccessor"/> to call methods or properties of the <see cref="P:Dapfor.Net.Ui.Row.DataObject"/>.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Data.IDataAccessor"/>.</value>
            <remarks>
            <para> .Net Grid supports many data types because of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface that is one of the most crucial part of the grid. The main purpose 
            of this interface is to normalize presentation of different data types in the grid. There are lots of implementations of IDataAccessor interface. This way, a programmer can 
            add his own implementation to broaden the list of data types that can be used by the .Net Grid. When you call Grid.Rows.Add('your object'), an implementation of the 
            <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface is created implicitly for 'your object' and the .Net Grid works with it only via the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> proxy, making no 
            difference between the data types.</para>
            
            <para>For different objects the process of getting or setting values of a data object may vary. For user-defined classes you can use the reflection mechanism to get 
            or set values. For IList&lt;T&gt; the grid gets them with a certain index; for IDictionary&lt;string, object&gt; with a string key so on. <see cref="T:Dapfor.Net.Data.IDataAccessor"/> may 
            support or not support data field identifiers it merely depends on its nature. If an object of user defined class is inserted into the grid, than its property name 
            become the identifiers in the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> by default. However, sometimes identifiers may be absent, e.g. if you you use an IList&lt;T&gt; object as a 
            parameter of the method Grid.Rows.Add('your object'). In such case, to display data in cells the .Net Grid uses indices of IList&lt;T&gt; and index of 
            the column which is calculated when it is inserted into the header.</para>
            </remarks>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.IsDataInserter">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is specially designed to add new <see cref="T:Dapfor.Net.Ui.Row"/>s to the <see cref="P:Dapfor.Net.Ui.Grid.DataSource"/> through the user interface.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Dapfor.Net.Ui.Row"/> has a special meaning; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Tag">
            <summary>
            Gets or sets user-defined data.
            </summary>
            <value>The user-defined object.</value>
            <threadsafety>The function is thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Bounds">
            <summary>
            Gets the visible bounds of the current <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The visible bounds of the <see cref="T:Dapfor.Net.Ui.Row"/>.</value>
            <remarks>If the <see cref="T:Dapfor.Net.Ui.Row"/> is visible then the bounds do not include surface, allocated for the selectors and hierarchical (+/-) indents. In other words the <see cref="T:Dapfor.Net.Ui.Row"/> 
            begins from the left corner of the left visible <see cref="T:Dapfor.Net.Ui.Cell"/>. If the row is hidden, collapsed or placed outside of the visible area, then <see cref="F:System.Drawing.Rectangle.Empty"/> 
            is returned. 
            </remarks>
            <seealso cref="P:Dapfor.Net.Ui.Row.ExpandButtonBounds"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.HierarchicalIndent"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.RowSelectorBounds"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.RowSelectorBounds">
            <summary>
            Gets the bounds of the row selector of this <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The bounds of the row selector.</value>
            <remarks>If the row is hidden, collapsed or placed outside of the visible area, then <see cref="F:System.Drawing.Rectangle.Empty"/> is returned. 
            </remarks>
            <seealso cref="P:Dapfor.Net.Ui.Row.ExpandButtonBounds"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.HierarchicalIndent"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.ExpandButtonBounds">
            <summary>
            Gets the bounds needed to show the +/- expansion button if it exists.
            </summary>
            <value>The bounds needed to show collapse/expansion buttons.</value>
            <seealso cref="P:Dapfor.Net.Ui.Row.Bounds"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.HierarchicalIndent"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.RowSelectorBounds"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.HeaderBounds">
            <summary>
            Gets the bounds of <see cref="P:Dapfor.Net.Ui.Row.Header"/> which corresponds to this <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The header bounds.</value>
            <remarks>If the <see cref="T:Dapfor.Net.Ui.Row"/> is on the top hierarchical level, then the bounds of the top <see cref="P:Dapfor.Net.Ui.Row.Header"/> are returned. If this <see cref="T:Dapfor.Net.Ui.Row"/> is a child 
            of other <see cref="T:Dapfor.Net.Ui.Row"/>, then the bounds of subheader are returned.
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.HierarchicalIndent">
            <summary>
            Gets the bounds of the hierarchical indent (space between the row selector and the left corner of the <see cref="T:Dapfor.Net.Ui.Row"/>).
            </summary>
            <value>The hierarchical indent.</value>
            <remarks>The hierarchical indent is the surface to show expansion buttons and hierarchical lines</remarks>
            <seealso cref="P:Dapfor.Net.Ui.Row.Bounds"/>
            <seealso cref="P:Dapfor.Net.Ui.Row.RowSelectorBounds"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Height">
            <summary>
            Gets or sets the height of the <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The height.</value>
            <threadsafety>The function is thread safe. The height is updated in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.Adjustable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Row"/> is adjustable.
            </summary>
            <value><c>true</c> if adjustable; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Row.VisibleRowCollection">
             <summary>
             A collection of visible child <see cref="T:Dapfor.Net.Ui.Row"/>s.
             </summary>
             <remarks>The first visible child index in this collection always equals to 0 and may diff to <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/>.
             </remarks>
             <seealso cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/>
             <seealso cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/>
             <example>
             <code>
             public void PopulateGrid(Grid grid)
             {
                 //Configure the headers
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Name"));
             
                 grid.Headers.Add(new Header());
                 grid.Headers[1].Add(new Column("Song"));
             
                 Row rowPlaylist = grid.Rows.Add(new Playlist("Queen"));
             
                 rowPlaylist.Add(new Song("Keep Yourself Alive"));
                 rowPlaylist.Add(new Song("Great King Rat"));
                 rowPlaylist.Add(new Song("White Queen"));
             
                 grid.Rows.ExpandAll();
             
                 Console.WriteLine("{0} Rows at the top hierarchical level", grid.Nodes.Count);
                 //Iterate all playlists (top-level items)
                 foreach (Row playlist in grid.Nodes)
                 {
                     Console.WriteLine("Playlist '{0}':", playlist["Name"].Text);
             
                     //Iterate all songs
                     foreach (Row song in playlist.VisibleChildren)
                     {
                         Console.WriteLine("Song '{0}'", song["Song"].Text);
                     }
                 }
             
                 //Collapse the rowPlaylist - All children become invisible
                 rowPlaylist.Expanded = false;
             
                 Console.WriteLine("Count of Songs '{0}'", rowPlaylist.Children.Count);
                 Console.WriteLine("Count of visible Songs '{0}'", rowPlaylist.VisibleChildren.Count);
             }
            
             // Console output:
             1 Rows at the top hierarchical level
             Playlist 'Queen':
             Song 'Keep Yourself Alive'
             Song 'Great King Rat'
             Song 'White Queen'
             Count of Songs '3'
             Count of visible Songs '0'
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.VisibleRowCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Row.VisibleRowCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.VisibleRowCollection.Count">
            <summary>
            Gets a count of visible <see cref="T:Dapfor.Net.Ui.Row"/>s, directly attached to the parent <see cref="T:Dapfor.Net.Ui.Row"/>. 
            </summary>
            <value>The count of visible child <see cref="T:Dapfor.Net.Ui.Row"/>s.</value>
            <see cref="P:Dapfor.Net.Ui.Row.VisibleRowCollection.TotalCount"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.VisibleRowCollection.TotalCount">
            <summary>
            Gets a number of all visible child <see cref="T:Dapfor.Net.Ui.Row"/>s on all hierarchical levels that are directly or indirectly attached to this <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The total visible children count.</value>
            <seealso cref="P:Dapfor.Net.Ui.Row.VisibleRowCollection.Count"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Row.VisibleRowCollection.Item(System.Int32)">
            <summary>
            Gets a visible <see cref="T:Dapfor.Net.Ui.Row"/> at the specified index.
            </summary>
            <value>A <see cref="T:Dapfor.Net.Ui.Row"/> if found. Otherwise <c>null</c> is returned.</value>
            <remarks>The first visible child of this collection always has the index 0 and may be different to the 
            index, returned by the <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> and <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> properties. The indexes of the visible 
            child <see cref="T:Dapfor.Net.Ui.Row"/>s can be obtained from the <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property.</remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.RowDockStyle">
            <summary>
            Row docking style
            </summary>
            <remarks>
            <para>Docked rows are simple data rows that can be docked on top or bottom at any hierarchical level. Such rows don't depend on data sorting direction and constantly stay 
            on their fixed positions. This feature is useful when you need to display important information, e.g. an average value or a total, or when you need to create a row 
            that acts as a filter (drop-down boxes containing value ranges).</para>
            
            <para>Programmer may specify multiple docked rows. If your data grid already has docked rows, the next docked row will be placed after the previously docked row and the 
            first non-docked row. Docked rows can also be filtered or grouped as any other data rows.</para>
            <code>
            //Dock row to the bottom
            grid.Rows[8].Dock = RowDockStyle.Bottom;
            
            //Dock row to the top
            grid.Rows[9].Dock = RowDockStyle.Top;
            
            //Undock row
            grid.Rows[0].Dock = RowDockStyle.None;
            </code>
            </remarks>
        </member>
        <member name="F:Dapfor.Net.Ui.RowDockStyle.None">
            <summary>
            <see cref="T:Dapfor.Net.Ui.Row"/> is not docked.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RowDockStyle.Top">
            <summary>
            <see cref="T:Dapfor.Net.Ui.Row"/> is docked to the top of its parent <see cref="T:Dapfor.Net.Ui.Row"/> or to the top of the grid if this <see cref="T:Dapfor.Net.Ui.Row"/> is on the top hierarchical level. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RowDockStyle.Bottom">
            <summary>
            <see cref="T:Dapfor.Net.Ui.Row"/> is docked to the bottom of its parent <see cref="T:Dapfor.Net.Ui.Row"/> or to the bottom of the grid if this <see cref="T:Dapfor.Net.Ui.Row"/> is on the top hierarchical level.  
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.TextSettings">
            <summary>
            Specifies text settings (padding, text orientation, wrapping, trimming, etc...)
            </summary>
            <seealso cref="T:Dapfor.Net.Ui.Appearance"/>
        </member>
        <member name="M:Dapfor.Net.Ui.TextSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.TextSettings"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.TextSettings.#ctor(Dapfor.Net.Ui.TextSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.TextSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.TextSettings.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.TextSettings.Padding">
            <summary>
            Gets or sets the amount of space in pixels to add to the left, top, right and bottom of the content 
            </summary>
            <value>The padding.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.TextSettings.Trimming">
            <summary>
            Gets or sets a value indicating  how to trim characters from a string that does not completely fit into a layout shape. 
            </summary>
            <value>The string trimming.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.TextSettings.Wrapping">
            <summary>
            Gets or sets a value indicating whether a text can be wrapped.
            </summary>
            <value><c>true</c> if the text can be wrapped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.TextSettings.RightToLeft">
            <summary>
            Gets or sets a value indicating whether the text direction is from right to left.
            </summary>
            <value><c>true</c> if the text direction is from right to left; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.TextSettings.VerticalOrientation">
            <summary>
            Gets or sets a value indicating whether the text is orientated vertically.
            </summary>
            <value><c>true</c> if the text is orientated vertically; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridRowExpansionEventArgs">
            <summary>
            Provides information about the <see cref="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.Row"/> when it is collapsed or expanded.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.GridRowExpansionEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Row,System.Boolean)">
            <summary>
            Provides information on the <see cref="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.Row"/> in the <see cref="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.Grid"/>.
            </summary>
            <param name="grid">The grid.</param>
            <param name="row">The row.</param>
            <param name="newValue">New value of expansion.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.NewValue">
            <summary>
            Gets a value indicating whether the Row is to be collapsed or expanded.
            </summary>
            <value>A new state to be applied to Row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether expansion shouldn't be changed.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.Row">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridRowExpansionEventArgs.Row"/>.
            </summary>
            <value>The row.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridRowEventArgs">
            <summary>
            Provides information on the <see cref="P:Dapfor.Net.Ui.GridRowEventArgs.Row"/> of the <see cref="P:Dapfor.Net.Ui.GridRowEventArgs.Grid"/>.
            </summary>
            <example>
            <code>
            public void InitializeGrid(Grid grid)
            {
                grid.RowAdded += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} has been added on the {1} hierarchical level", e.Row.VisibleIndex, e.Row.Level);
                };
            
                grid.RowMoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been moved to {0} position", e.Row.VisibleIndex);
                };
            
                grid.RowRemoving += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row {0} is removing from the grid", e.Row.VisibleIndex);
                };
            
                grid.RowRemoved += delegate(object sender, GridRowEventArgs e)
                {
                    Console.WriteLine("The row has been removed from the grid");
                };
            
                //Add header and some columns
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Quantity"));
                grid.Headers.Add(new Header());
            
                //Add 3 row on the top hierarchical level (level 0)
                Row row1 = grid.Rows.Add(new Product());
                Row row2 = grid.Rows.Add(new Product());
                Row row3 =grid.Rows.Add(new Product());
                grid.Rows.ExpandAll();
            
                //Add a data object on the 1st level as subitem of the row1
                row1.Add(new Product());
            
                //Add some data objects on the 1st level as subitems of the row2
                row2.Add(new Product());
                row2.Add(new Product());
            
                //Move the row between row1 and row2. (The grid has only 3 rows on the top level!)
                row3.VisibleChildIndex = 1;
            
                //Remove child of row2
                grid.Rows.Remove(row2.Children[1]);
            }
            
            //Console output:
            The row 0 has been added on the 0 hierarchical level
            The row 1 has been added on the 0 hierarchical level
            The row 2 has been added on the 0 hierarchical level
            The row 1 has been added on the 1 hierarchical level
            The row 3 has been added on the 1 hierarchical level
            The row 4 has been added on the 1 hierarchical level
            The row has been moved to 2 position
            The row 5 is removing from the grid
            The row has been removed from the grid
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Ui.GridRowEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Row)">
            <summary>
            Provides information on the <see cref="P:Dapfor.Net.Ui.GridRowEventArgs.Row"/> in the <see cref="P:Dapfor.Net.Ui.GridRowEventArgs.Grid"/>.
            </summary>
            <param name="grid">The grid.</param>
            <param name="row">The row.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridRowEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowEventArgs.Row">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridRowEventArgs.Row"/>.
            </summary>
            <value>The row.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.InsertionType">
            <summary>
            Possible actions upon data insertion to the grid
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.InsertionType.AsChild">
            <summary>
            Regular method of data object insertion to parent. A programmer may replace the inserted object with any other object on his own discretion.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.InsertionType.AsCollection">
            <summary>
            A programmer may replace a data object with any collection that shall be added instead of the specified object.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.InsertionType.AsChildAndCollection">
            <summary>
            The grid adds a data object and a new collection. The data object is added to the specified parent as with AsChild, and the collection is added 
            on the next hierarchy level to the data object that has just been added.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.InsertionType.AsDataRelation">
            <summary>
            Indicates that the grid should add the specified DataRow and related children.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.InsertionType.Skip">
            <summary>
            The data object is not added to the grid
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.GridRowAddingEventArgs">
             <summary>
             Information related to conditional binding
             </summary>
             <remarks>
             <para>Conditional binding is one of the most powerful and convenient types of binding. It is an API provided by the grid that enables the programmer to specify 
             insertion method when a data object is added to the grid. The API is implemented as an event that is called when data is added to the grid.</para>
             <para>This event contains a reference to the added object, a parent row if any and insertion method for this object. Below is the list of possible actions upon 
             data insertion to the grid:
             <list type="bullet">
             <item><b>AsChild</b> - regular method of data object insertion to parent. A programmer may replace the inserted object with any other object on his own discretion.</item>
             <item><b>AsCollection</b> - a programmer may replace a data object with any collection that shall be added instead of the specified object.</item>
             <item><b>AsChildAndCollection</b> - the grid adds a data object and a new collection. The data object is added to the specified parent as with AsChild, and the collection is added on the next hierarchy level to the data object that has just been added.</item>
             <item><b>Skip</b> - the data object is not added to the grid.</item>
             </list>
             </para>
             <para>It is important to note that if a collection implements <see cref="T:System.ComponentModel.IBindingList"/> interface, the grid subscribes to events of this collection 
             and inserts or modifies data on corresponding hierarchy level of the grid. All binding list operations are thread safe.</para>
             </remarks>
             <example>
             <code>
             //Basket class
             public class Basket 
             {
                 //Private fields
                 private readonly BindingList&lt;Order&gt; _orders = new BindingList&lt;Order&gt;();
             
                 //Public properties    
                 public IList&lt;Order&gt; Orders
                 {
                     get { return _orders; }
                 }
             }
            
             //Initialize the grid
             public void InitializeGrid(Grid grid, IList&lt;Basket&gt; baskets)
             {
                 grid.RowAdding += OnGridRowAdding;
            
                 //Bind the grid to basket collection
                 grid.DataSource = baskets;
             }
             
            
             private void OnGridRowAdding(object sender, GridRowAddingEventArgs e)
             {
                 //Skip the 'basket' level and bind orders directly to basket's parent
                 Basket basket = e.DataObject as Basket;
                 if (basket != null)
                 {
                      e.DataObject = basket.Orders;
                      e.InsertionType = InsertionType.AsCollection;
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.GridRowAddingEventArgs.#ctor(Dapfor.Net.Ui.Row,System.Object,Dapfor.Net.Ui.InsertionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GridRowAddingEventArgs"/> class.
            </summary>
            <param name="parentRow">The parent row.</param>
            <param name="dataObject">The data object.</param>
            <param name="insertionType">Type of the insertion.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowAddingEventArgs.ParentRow">
            <summary>
            Gets the parent row.
            </summary>
            <value>The parent row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowAddingEventArgs.DataObject">
            <summary>
            Gets or sets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowAddingEventArgs.InsertionType">
            <summary>
            Gets or sets the type of the insertion.
            </summary>
            <value>The type of the insertion.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridRowSelectionEventArgs">
            <summary>
            Provides information on the <see cref="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Row"/> before its selection state is changed.
            </summary>
            <example>
            <code>
            grid.SelectionChanging += delegate(object sender, GridRowSelectionEventArgs e)
            {
                //The first row will always be selected
                if(e.Row.VisibleIndex == 0)
                {
                    e.NewSelectionState = true;
                }
            
                //The second row will always be unselected
                if (e.Row.VisibleIndex == 1)
                {
                    e.NewSelectionState = false;
                }
            };
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Ui.GridRowSelectionEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Row,System.Boolean)">
            <summary>
            Provides information on the <see cref="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Row"/> in the <see cref="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Grid"/>.
            </summary>
            <param name="grid">The grid.</param>
            <param name="row">The row.</param>
            <param name="newSelectionState">if set to <c>true</c>, the <see cref="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Row"/> should be selected.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Row">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Row"/>.
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.NewSelectionState">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Row"/> should be selected.
            </summary>
            <value><c>true</c> if the <see cref="P:Dapfor.Net.Ui.GridRowSelectionEventArgs.Row"/> should be selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridRowUpdateEventArgs">
            <summary>
            Provides information on the <see cref="P:Dapfor.Net.Ui.GridRowUpdateEventArgs.Row"/> and the <see cref="T:Dapfor.Net.Data.IDataField"/> in the <see cref="P:Dapfor.Net.Ui.GridRowUpdateEventArgs.Grid"/> that have been updated.
            </summary>
            <threadsafety>The event <see cref="E:Dapfor.Net.Ui.Grid.RowUpdated"/> is raised only in the GUI thread even the data object had notified the <see cref="P:Dapfor.Net.Ui.GridRowUpdateEventArgs.Grid"/> from other thread.</threadsafety>
            <example>
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        if (price != value)
                        {
                            price = value;
                            //Notify about color changing
                            if (PropertyChanged != null)
                            {
                                PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                            }
                        }
                    }
                }
            
                public DateTime Maturity
                {
                    get { return maturity; }
                }
            
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Using sample
            public void InitializeGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Maturity"));
            
                Console.WriteLine("Current thread: {0}", Thread.CurrentThread.ManagedThreadId);
            
                grid.RowUpdated += delegate(object sender, GridRowUpdateEventArgs e)
                {
                    int threadId = Thread.CurrentThread.ManagedThreadId;
                    Console.WriteLine("The data object has been updated. Row = {0}, Field = {1}, Value = {2}, Thread = {3}", e.Row.VisibleIndex, e.DataField.Id, e.DataField.Value, threadId);
                };
            
                //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                Product product = new Product();
                grid.Rows.Add(product);
            
                //The object will notify the grid through the INotifyPropertyChanged, and the grid will automatically 
                //invalidate, sort, filter and highlight the affected cells.
                product.Price = 12.34;
            
                //Notify the grid from the non-GUI thread
                ThreadPool.QueueUserWorkItem(delegate
                {
                    int threadId = Thread.CurrentThread.ManagedThreadId;
                    Console.WriteLine("Update data object from non-GUI thread (Thread = {0})", threadId);
            
                    //If the call comes from the non-GUI thread, the grid will synchronize them without blocking the calling thread.
                    product.Price = 25.66;
                });
            }
            
            //Console output:
            //Current thread: 7
            //The data object has been updated. Row = 0, Field = Price, Value = 12,34, Thread = 7
            //Update data object from non-GUI thread (Thread = 9)
            //The data object has been updated. Row = 0, Field = Price, Value = 25,66, Thread = 7
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Ui.GridRowUpdateEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Row,Dapfor.Net.Data.IDataField)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GridRowUpdateEventArgs"/> class.
            </summary>
            <param name="grid">The grid.</param>
            <param name="row">The row.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowUpdateEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridRowUpdateEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowUpdateEventArgs.Row">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridRowUpdateEventArgs.Row"/>.
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridRowUpdateEventArgs.DataField">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/>.
            </summary>
            <value>The data field.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridCellEventArgs">
             <summary>
             Information about a <see cref="P:Dapfor.Net.Ui.GridCellEventArgs.Cell"/>.
             </summary>
             <code>
             public void PopulateGrid(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.CellClicking += delegate(object sender, GridCellEventArgs e)
                 {
                     Console.WriteLine("The user is clicking on the cell: row = {0}, column = {1})", e.Cell.Row.VisibleIndex, e.Cell.Column.Id);
                 };
             
                 grid.CellClicked += delegate(object sender, GridCellEventArgs e)
                 {
                     Console.WriteLine("The user has clicked on the cell: row = {0}, column = {1})", e.Cell.Row.VisibleIndex, e.Cell.Column.Id);
                 };
             }
             </code>
        </member>
        <member name="M:Dapfor.Net.Ui.GridCellEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Cell)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GridCellEventArgs"/> class.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridCellEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEventArgs.Cell">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridCellEventArgs.Cell"/>.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridCellEndEditEventArgs">
            <summary>
            Information about end of cell editing process
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.GridCellEndEditEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StopEditReason,System.Drawing.Design.UITypeEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GridCellEndEditEventArgs"/> class.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="reason">The reason.</param>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GridCellEndEditEventArgs.DoEndEdit">
            <summary>
            Finishes edit in the <see cref="P:Dapfor.Net.Ui.GridCellEndEditEventArgs.Cell"/>. Navigates between <see cref="P:Dapfor.Net.Ui.GridCellEndEditEventArgs.Cell"/>s.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEndEditEventArgs.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEndEditEventArgs.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEndEditEventArgs.Editor">
            <summary>
            Gets the editor.
            </summary>
            <value>The editor.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEndEditEventArgs.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEndEditEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.GridCellEndEditEventArgs"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridCellBeginEditEventArgs">
            <summary>
            Information about the beginning of cell editing
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.GridCellBeginEditEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StartEditReason,System.Drawing.Design.UITypeEditor,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GridCellBeginEditEventArgs"/> class.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="reason">The reason.</param>
            <param name="editor">The editor.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GridCellBeginEditEventArgs.DoBeginEdit">
            <summary>
            Starts edit in <see cref="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Cell"/>.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Cell">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Cell"/>.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Editor">
            <summary>
            Gets or sets the editor.
            </summary>
            <value>The editor.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Location">
            <summary>
            Gets or sets the location in client coordinates where the user has clicked.
            </summary>
            <value>The point.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellBeginEditEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.GridCellBeginEditEventArgs"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridCellEditableEventArgs">
            <summary>
            Information about editable cell 
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.GridCellEditableEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Cell,System.Drawing.Design.UITypeEditor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GridCellEditableEventArgs"/> class.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cell">The cell.</param>
            <param name="editor">The editor.</param>
            <param name="editable">if set to <c>true</c>, the <see cref="P:Dapfor.Net.Ui.GridCellEditableEventArgs.Cell"/> is editable.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEditableEventArgs.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEditableEventArgs.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEditableEventArgs.Editor">
            <summary>
            Gets or sets an editor to edit the <see cref="P:Dapfor.Net.Ui.GridCellEditableEventArgs.Cell"/>.
            </summary>
            <value>The editor.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridCellEditableEventArgs.Editable">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Dapfor.Net.Ui.GridCellEditableEventArgs.Cell"/> is editable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridHeaderEventArgs">
             <summary>
             Information about a <see cref="P:Dapfor.Net.Ui.GridHeaderEventArgs.Header"/>.
             </summary>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.HeaderAdded += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been added on the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoving += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header is removing from the {0} hierarchical level", e.Header.Level);
                 };
            
                 grid.HeaderRemoved += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("A header has been removed from the grid");
                 };
            
                 grid.HeaderHeightChanged += delegate(object sender, GridHeaderEventArgs e)
                 {
                     Console.WriteLine("The new height of the header = {0}", e.Header.Height);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 grid.Headers.Add(new Header());
            
                 //Set a new height of the column panel
                 grid.Headers[0].ColumnPanelHeight = 25;
                 
                 //Hide the header
                 grid.Headers[1].Visible = false;
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
            
                 //Remove the header
                 grid.Headers.RemoveAt(0);
             }
             </code>
        </member>
        <member name="M:Dapfor.Net.Ui.GridHeaderEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Header)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GridHeaderEventArgs"/> class.
            </summary>
            <param name="grid">The grid.</param>
            <param name="header">The header.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridHeaderEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridHeaderEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridHeaderEventArgs.Header">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridHeaderEventArgs.Header"/>.
            </summary>
            <value>The header.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridColumnEventArgs">
             <summary>
             Information about a <see cref="P:Dapfor.Net.Ui.GridColumnEventArgs.Column"/>
             </summary>
             <code>
             public void InitializeGrid(Grid grid)
             {
                 grid.ColumnAdded += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been added to the grid", e.Column.Id);
                 };
            
                 grid.ColumnMoved += delegate(object sender, GridColumnEventArgs e)
                 {
                     Console.WriteLine("The column '{0}' has been moved to {1} position", e.Column.Id, e.Column.VisibleIndex);
                 };
            
                 //Add header and some columns
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Move the first column
                 grid.Headers[0]["Price"].VisibleIndex = 1;
             }
             
             //Console output:
             //The column 'Price' has been added to the grid
             //The column 'Quantity' has been added to the grid
             //The column 'Price' has been moved to 1 position
             </code>
        </member>
        <member name="M:Dapfor.Net.Ui.GridColumnEventArgs.#ctor(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Column)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GridColumnEventArgs"/> class.
            </summary>
            <param name="grid">The grid.</param>
            <param name="column">The column.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GridColumnEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridColumnEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridColumnEventArgs.Column">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridColumnEventArgs.Column"/>.
            </summary>
            <value>The column.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.MeasureCellWidthEventArgs">
            <summary>
            Information related to cell width measurement.
            </summary>
            <code>
            grid.MeasureCellWidth += delegate(object sender, MeasureCellWidthEventArgs e)
            {
                //Add extra width to be taken into account when adjusting columns.
                e.TotalWidth += 30;
            };
            </code>
        </member>
        <member name="P:Dapfor.Net.Ui.MeasureCellWidthEventArgs.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MeasureCellWidthEventArgs.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MeasureCellWidthEventArgs.EditorImageWidth">
            <summary>
            Gets the width of the editor image.
            </summary>
            <value>The width of the editor image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MeasureCellWidthEventArgs.CellImageWidth">
            <summary>
            Gets the width of the cell image with its padding settings.
            </summary>
            <value>The width of the cell image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MeasureCellWidthEventArgs.TextWidth">
            <summary>
            Gets the width of the text with its padding settings.
            </summary>
            <value>The width of the text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MeasureCellWidthEventArgs.TotalWidth">
            <summary>
            Gets or sets the total width.
            </summary>
            <value>The total width.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.LassoSelectionEventArgs">
            <summary>
            Data related to the lasso selection.
            </summary>
            <remarks>This object contains information about the lasso selection bounds as well as <see cref="P:Dapfor.Net.Ui.LassoSelectionEventArgs.Handled">LassoSelectionEventArgs.Handled</see> variable
            enabling to cancel the selection or prevent rows from selection state changing.
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.LassoSelectionEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.LassoSelectionEventArgs"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.LassoSelectionEventArgs.LassoBounds">
            <summary>
            Gets the lasso bounds.
            </summary>
            <value>The lasso bounds expressed in client coordinates of the <see cref="T:Dapfor.Net.Ui.Grid"/>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridEditableCellEventArgs">
            <summary>
            Contains information about the next or previous editable cells
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.GridEditableCellEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.GridEditableCellEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridEditableCellEventArgs.EditingCell">
            <summary>
            Gets the currently editing cell.
            </summary>
            <value>The currently editing cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GridEditableCellEventArgs.NewEditableCell">
            <summary>
            Gets or sets a new editable cell.
            </summary>
            <value>The new editable cell.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintGroupPanelEventArgs">
            <summary>
            Provides data and methods for painting group panel on the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Header"/>
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Grid"/>, <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Graphics"/> object, or do it vice versa!</para>
            
            
            <para>The following example shows how customize painting in column</para>
            <code>
            public void InitializeGrid(Grid grid)
            {
                Bitmap image = new Bitmap("image.ico");
            
                //Subscribe for column painting event
                grid.PaintColumnCaption += delegate(object sender, PaintColumnCaptionEventArgs e)
                {
                    using (Brush brush = new SolidBrush(Color.DeepPink))
                    {
                        //Prevent from text painting
                        e.Parts &amp;= e.Parts ^ PaintPart.Text;
            
                        //Another way to paint the custom text (do not turn off the PaintPart.Text):
                        e.Text = "New text to show in column";
            
                        //Set a new background color
                        e.Appearance.BackColor = Color.Yellow;
            
                        //Do default painting
                        e.PaintAll();
                        e.Handled = true;
            
                        //Draw a custom image above already pained cell
                        e.Graphics.DrawImage(image, e.VirtualBounds);
                    }
                };
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupPanelEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the group panel. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Grid"/> from default painting by setting 
            the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupPanelEventArgs.PaintLinesBetweenCaptions">
            <summary>
            Paints the lines between captions.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupPanelEventArgs.PaintBackground">
            <summary>
            Atomic operation to paint the background. The method <see cref="M:Dapfor.Net.Ui.PaintGroupPanelEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Background"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupPanelEventArgs.PaintText">
            <summary>
            Atomic operation to paint the text on the panel. The method <see cref="M:Dapfor.Net.Ui.PaintGroupPanelEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Text"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupPanelEventArgs.PaintColumnCaptions">
            <summary>
            Atomic operation to paint grouped <see cref="T:Dapfor.Net.Ui.Column"/>s on the panel. The method <see cref="M:Dapfor.Net.Ui.PaintGroupPanelEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.ColumnCaptions"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Header">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Header"/>.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.ParentRow">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Row"/> to which the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Header"/> is attached. The parameter can be not <c>null</c> for the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Header"/>s on the first and higher hierarchical levels.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Row"/> object if the hierarchical level of the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Header"/> is greater than 0; Otherwise <c>null</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Appearance">
            <summary>
            Gets the appearance of the <see cref="T:Dapfor.Net.Ui.Column"/> (Colors, gradient...).
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.TextSettings">
            <summary>
            Gets the text settings (padding, text orientation, wrapping, trimming, etc...).
            </summary>
            <value>The text settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Text">
            <summary>
            Gets or sets the text to be painted on the group panel.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> to draw the text.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.DefaultColumnCaptionHeight">
            <summary>
            Gets or sets the default height of the <see cref="T:Dapfor.Net.Ui.Column"/> to paint it on the group panel and may be different from one of the column panel. 
            </summary>
            <value>The default height of the column caption.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Bounds">
            <summary>
            Gets the visible bounds of the group panel.
            </summary>
            <value>The visible bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Render">
            <summary>
            Gets or sets the render that performs basic painting operations
            </summary>
            <value>The render.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupPanelEventArgs.Parts">
            <summary>
            Gets or sets the parts of header's caption that are to be painted. 
            </summary>
            <value>The parts.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintRectangleEventArgs">
            <summary>
            Provides data and methods for painting in specified <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid"/> area
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Graphics"/> object, or do it vice versa!</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRectangleEventArgs.#ctor(Dapfor.Net.Ui.Grid,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.PaintRectangleEventArgs"/> class.
            </summary>
            <param name="grid">The <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid"/>.</param>
            <param name="clipRectangle">A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid"/> that needs to be repainted.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRectangleEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the clipped rectangle. You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid"/> 
            from default painting by setting the <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid"/>.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRectangleEventArgs.ClipRectangle">
            <summary>
            Gets a rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip rectangle.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintRectangleEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Threading.GuiDispatcher">
             <summary>
             Executes tasks in GUI thread. 
             </summary>
             <remarks>
             Following example demonstrates how to use dispatcher:
             <code>
             void Initialize()
             {
                 //Create a GUI dispatcher
                 IDispatcher dispatcher = new GuiDispatcher();
            
                 //The control will use dispatcher to synchronize threads
                 SomeControl control = new SomeControl(dispatcher);
             }
             
             class SomeControl : UserControl
             {
                 private readonly IDispatcher dispatcher;
            
                 public SomeControl(IDispatcher dispatcher)
                 {
                     this.dispatcher = dispatcher;
                 }
            
                 //This method can be called from non-GUI thread
                 private void DrawTextInControl(string text)
                 {
                     if (dispatcher.SynchronizationRequired)
                     {
                         //Create a task that will be executed in dispatcher thread without blocking the calling thread
                         dispatcher.Dispatch(new DelegateTask(delegate
                         {
                             this.Text = text;
                         }));
                     }
                     else
                     {
                         //This is the GUI thread. 
                         this.Text = text;
                     }
                 }
             }
             </code>
             </remarks>
        </member>
        <member name="T:Dapfor.Net.Threading.IDispatcher">
             <summary>
             Executes <see cref="T:Dapfor.Net.Threading.ITask"/> objects with or without blocking the calling thread
             </summary>
             <remarks>
             Following example demonstrates how to use dispatcher:
             <code>
             void Initialize()
             {
                 //Create a GUI dispatcher
                 IDispatcher dispatcher = new GuiDispatcher();
            
                 //The control will use dispatcher to synchronize threads
                 SomeControl control = new SomeControl(dispatcher);
             }
             
             class SomeControl : UserControl
             {
                 private readonly IDispatcher dispatcher;
            
                 public SomeControl(IDispatcher dispatcher)
                 {
                     this.dispatcher = dispatcher;
                 }
            
                 //This method can be called from non-GUI thread
                 private void DrawTextInControl(string text)
                 {
                     if (dispatcher.SynchronizationRequired)
                     {
                         //Create a task that will be executed in dispatcher thread without blocking the calling thread
                         dispatcher.Dispatch(new DelegateTask(delegate
                         {
                             this.Text = text;
                         }));
                     }
                     else
                     {
                         //This is the GUI thread. 
                         this.Text = text;
                     }
                 }
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Threading.IDispatcher.Dispatch(Dapfor.Net.Threading.ITask)">
            <summary>
            Dispatches a task without blocking the calling thread.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Dapfor.Net.Threading.IDispatcher.SyncDispatch(Dapfor.Net.Threading.ITask)">
            <summary>
            Dispatches a task with blocking the calling thread.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Dapfor.Net.Threading.IDispatcher.SynchronizationRequired">
            <summary>
            Gets a value indicating whether the synchronization is required.
            </summary>
            <value>
            	<c>true</c> if the synchronization required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Dapfor.Net.Threading.GuiDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Threading.GuiDispatcher"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Threading.GuiDispatcher.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Threading.GuiDispatcher.Dispatch(Dapfor.Net.Threading.ITask)">
            <summary>
            Dispatches a task to GUI thread without blocking the calling thread.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Dapfor.Net.Threading.GuiDispatcher.SyncDispatch(Dapfor.Net.Threading.ITask)">
            <summary>
            Dispatches a task to GUI thread with blocking the calling thread.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Dapfor.Net.Threading.GuiDispatcher.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"></see> to process.</param>
        </member>
        <member name="P:Dapfor.Net.Threading.GuiDispatcher.SynchronizationRequired">
            <summary>
            Gets a value indicating whether the synchronization with the GUI thread is required.
            </summary>
            <value>
            	<c>true</c> if the synchronization required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dapfor.Net.Internal.PrivateContext">
            <summary>
            Summary description for PrivateContext.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.PrivateContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.AnimationAppearance">
            <summary>
            Specifies different <see cref="T:Dapfor.Net.Ui.Appearance"/>s of UI elements (<see cref="T:Dapfor.Net.Ui.Cell"/>, <see cref="T:Dapfor.Net.Ui.Column"/>, etc.) in various states. 
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.AnimationAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.AnimationAppearance"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.AnimationAppearance.#ctor(Dapfor.Net.Ui.AnimationAppearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.AnimationAppearance"/> class.
            </summary>
            <param name="appearance">The appearance.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.AnimationAppearance.#ctor(Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.Appearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.AnimationAppearance"/> class.
            </summary>
            <param name="normal">Appearance of UI element in the normal state.</param>
            <param name="hover">Appearance of UI element when the mouse os over it.</param>
            <param name="active">Appearance of UI element when the end user clicks on this element.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.AnimationAppearance.Normal">
            <summary>
            Gets or sets the <see cref="T:Dapfor.Net.Ui.Appearance"/> of UI element in the normal state.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Appearance"/> of UI element in the normal state.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.AnimationAppearance.Hover">
            <summary>
            Gets or sets the <see cref="T:Dapfor.Net.Ui.Appearance"/> when the mouse is over the UI element.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Appearance"/> when the mouse is over the UI element.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.AnimationAppearance.Active">
            <summary>
            Gets or sets the <see cref="T:Dapfor.Net.Ui.Appearance"/> when the end user clicks by the mouse on the UI element.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Appearance"/> when the end user clicks on the UI element.</value>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.NamespaceDoc">
            <summary>
            Diagnostic tools: <see cref="T:Dapfor.Net.Diagnostics.Inspector">.Net Inspector</see> and <see cref="T:Dapfor.Net.Diagnostics.LogViewer">.Net Logger</see>.
            </summary>
            <remarks>
            <para><see cref="T:Dapfor.Net.Diagnostics.Inspector">.Net Inspector</see> is a powerful and thread-safe tool for applications debugging. It can be used to inspect business logic level 
            of an application in real-time mode and to alter various application parameters. It's a common practice in software development to put break points 
            in certain lines of code to view and alter values of certain variables in the IDE. When a developer inspects values through the IDE, the application is 
            suspended. It is convenient for debugging simple applications. But if your application has lots of threads and timers, the debugging process becomes a really challenging task.</para>
            <para><see cref="T:Dapfor.Net.Diagnostics.Logger">.Net Logger</see> is a thread-safe system for storing and representation of various log messages. Besides text messages, programmer 
            can associate with data any object that can carry extended information. For example, it can be a price snapshot, quantity value of a product or a pointer 
            to the product object. When a programmer analyzes a log file, he can not just review messages, but also vizw product characteristics that can be dynamically changed. 
            There are several possibilities of object association:  
            <list type="bullet">
            <item>Creating a hierarchical representation of associated object's properties and its values</item>
            <item>Displaying a list of properties with its values in a popup tooltip</item>
            <item>Transferring an object associated with message to the <see cref="T:Dapfor.Net.Diagnostics.Inspector">.Net Inspector</see> for detailed viewing and editing</item>
            </list>
            </para>
            <code>
            public enum Way
            {
                Buy,
                Sell,
            }
            
            public sealed class Quote
            {
                private readonly long qty;
                private readonly decimal price;
                private readonly Way way;
            	
                public Quote(long qty, decimal price, Way way)
                {
                    this.qty = qty;
                    this.price = price;
                    this.way = way;
                }
            
                public long Qty
                {
                    get { return qty; }
                }
                public decimal Price
                {
            	    get { return price; }
                }
                public Way Way
                {
                    get { return way; }
                }
            }
            
            Logger.Info("Hey, I just got a new price", new Quote(31911, 41, Way.Buy));
            </code>
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.ToolStripGridGroupBoxPanel">
             <summary>
             Represents a group panel visibility option displayed on a Grid.HeaderContextMenu
             </summary>
             <code>
             grid.HeaderContextMenu.ItemClicked += delegate(object sender, ToolStripItemClickedEventArgs e)
             {
                 ToolStripGridGroupBoxPanel item = e.ClickedItem as ToolStripGridGroupBoxPanel;
                 Header headerItem = item != null ? item.Header : null;
            
                 //Do something...
             };
             </code>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolStripGridGroupBoxPanel.#ctor(Dapfor.Net.Ui.Header)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ToolStripGridGroupBoxPanel"/> class.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolStripGridGroupBoxPanel.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.ToolStripItem.Click"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolStripGridGroupBoxPanel.Header">
            <summary>
            Gets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.RoundButton">
            <summary>
            Represents a Windows round button control.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains information about the control to paint.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.RoundButton.PaintControl"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnPaintControl(Dapfor.Net.Ui.RoundButtonPaintEventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.RoundButton.PaintControl"/> event.
            </summary>
            <param name="e">A <see cref="T:Dapfor.Net.Ui.RoundButtonPaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.RoundButton"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.NotifyDefault(System.Boolean)">
            <summary>
            Notifies a control that it is the default button so that its appearance and behavior is adjusted accordingly.
            </summary>
            <param name="value">true if the control should behave as a default button; otherwise false.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.PerformClick">
            <summary>
            Generates a <see cref="E:System.Windows.Forms.Control.Click"/> event for the control.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Dapfor.Net.Ui.RoundButton.CheckedChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.BackColor">
            <summary>
            This property is not not used. To set background colors, use the <see cref="P:Dapfor.Net.Ui.RoundButton.Appearance">RoundButton.Appearance</see> property.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.RoundButton.PaintControl">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Ui.RoundButton"/> is redrawn.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.Appearance">
            <summary>
            Gets or sets the appearance of the <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.RoundButton"/> is in the checked state.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.Style">
            <summary>
            Gets or sets the style of the <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.BorderStyle">
            <summary>
            Gets or sets the border style of the <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
            <value></value>
            <returns>
            One of the <see cref="T:System.Windows.Forms.BorderStyle">System.Windows.Forms.BorderStyle</see> values. The default is <see cref="F:System.Windows.Forms.BorderStyle.FixedSingle"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.State">
             <summary>
             Gets the state of the <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
             </summary>
             <value>        
             One of the <see cref="T:Dapfor.Net.Ui.RoundButton.ButtonState">RoundButton.ButtonState</see> values.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.Theme">
            <summary>
            Gets or sets the theme.
            </summary>
            <value>The theme.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.Image">
            <summary>
            Gets or sets the image that will be displayed on the control.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.ImageIndex">
            <summary>
            Gets or sets the index of the image in the <see cref="P:Dapfor.Net.Ui.RoundButton.ImageList">RoundButton.ImageList</see> to display on the control.
            </summary>
            <value>The index of the image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.ImageList">
            <summary>
            Gets or sets the <see cref="P:Dapfor.Net.Ui.RoundButton.ImageList"/> to get the image to display on the control.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.RoundButton.ImageList"/> object.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.BackgroundImage">
            <summary>
            This property is not not used. To set an image, use <see cref="P:Dapfor.Net.Ui.RoundButton.Image">RoundButton.Image</see>, <see cref="P:Dapfor.Net.Ui.RoundButton.ImageList">RoundButton.ImageList</see> and 
            <see cref="P:Dapfor.Net.Ui.RoundButton.ImageIndex">RoundButton.ImageIndex</see> properties
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.BackgroundImageLayout">
            <summary>
            This property is not not used.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.AutoScrollOffset">
            <summary>
            This property is not not used.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.AutoScroll">
            <summary>
            This property is not not used.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.AutoScrollMargin">
            <summary>
            This property is not not used.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.AutoScrollMinSize">
            <summary>
            This property is not not used.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.Text">
            <summary>Gets or sets the text associated with this control.</summary>
            <value></value>
            <returns>
            The text associated with this control.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.TextAlign">
            <summary>
            Gets or sets the alignment of the text that will be displayed on the control.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.ImageAlign">
            <summary>
            Gets or sets the alignment of the image that will be displayed on the control.
            </summary>
            <value>The image alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.TextImageRelation">
            <summary>
            Gets or sets the value, specifying the relative location of the image to the text on the button.
            </summary>
            <value>Value, specifying the relative location of the image to the text on the button.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.AutoEllipsis">
            <summary>
            Gets or sets a value enabling the authomatic handling of text that extends beyond the width of the button.
            </summary>
            <value><c>true</c> if authomatic handling of text that extends beyond the width of the button is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.UseMnemonic">
            <summary>
            Gets or sets a value indicating whether the first character preceded by an ampersand (&amp;) will be used as the button's mnemonic key.
            </summary>
            <value><c>true</c> if the first character preceded by an ampersand (&amp;) will be used as the button's mnemonic key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.DialogResult">
            <summary>
            Gets or sets the value returned to the parent form when the button is clicked.
            </summary>
            <value></value>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="E:Dapfor.Net.Ui.RoundButton.CheckedChanged">
            <summary>
            Occurs when the <see cref="P:Dapfor.Net.Ui.RoundButton.Checked"/> property is changed.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.RoundButton.PaintPart">
            <summary>
            Specifies parts of UI element that are to be painted. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.PaintPart.Background">
            <summary>
            Background 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.PaintPart.Image">
            <summary>
            Image 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.PaintPart.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.PaintPart.All">
            <summary>
            All UI elements
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.RoundButton.ButtonAppearance">
            <summary>
            Provides properties that specify the appearance of <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.ButtonAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.RoundButton.ButtonAppearance"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.ButtonAppearance.#ctor(Dapfor.Net.Ui.RoundButton.ButtonAppearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.RoundButton.ButtonAppearance"/> class.
            </summary>
            <param name="appearance">The appearance.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.ButtonAppearance.#ctor(Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.Appearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.RoundButton.ButtonAppearance"/> class.
            </summary>
            <param name="normal">The normal.</param>
            <param name="pressedOrChecked">The pressed or checked.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.ButtonAppearance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButton.ButtonAppearance.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.ButtonAppearance.Normal">
            <summary>
            Gets or sets an appearance of the button in the normal state.
            </summary>
            <value>The appearance of the button in the normal state.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButton.ButtonAppearance.PressedOrChecked">
            <summary>
            Gets or sets an appearance of the pressed or checked button.
            </summary>
            <value>The appearance of the pressed or checked button.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.RoundButton.ButtonState">
            <summary>
            Specifies the appearance of a <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.ButtonState.Normal">
            <summary>
            The button has its normal appearance.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.ButtonState.Pressed">
            <summary>
            The button appears pressed.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.ButtonState.Hot">
            <summary>
            The mouse is over the button
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.ButtonState.Checked">
            <summary>
            The button has a checked or latched appearance. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.ButtonState.HotChecked">
            <summary>
            The mouse is over the button that is in the <see cref="P:Dapfor.Net.Ui.RoundButton.Checked">checked</see> state
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.ButtonState.Disabled">
            <summary>
            The button is inactive (grayed).
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.RoundButton.ButtonStyle">
            <summary>
            Specifies the <see cref="T:Dapfor.Net.Ui.RoundButton"/> style.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.ButtonStyle.PushButton">
            <summary>
            Push button
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.RoundButton.ButtonStyle.CheckButton">
            <summary>
            Toggle button
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.RoundButtonPaintEventArgs">
            <summary>
            Provides data for the <see cref="E:Dapfor.Net.Ui.RoundButton.PaintControl"/> event.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButtonPaintEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the <see cref="T:Dapfor.Net.Ui.RoundButton"/>. The <see cref="T:Dapfor.Net.Ui.RoundButton.PaintPart">RoundButton.PaintPart</see> 
            is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="T:Dapfor.Net.Ui.RoundButton"/> from default painting by setting 
            the <see cref="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButtonPaintEventArgs.PaintText">
            <summary>
            Atomic operation to paint a text in the <see cref="T:Dapfor.Net.Ui.RoundButton"/>. The method <see cref="M:Dapfor.Net.Ui.RoundButtonPaintEventArgs.PaintAll"/> does not call this method if 
            the <see cref="F:Dapfor.Net.Ui.RoundButton.PaintPart.Text">RoundButton.PaintPart.Text</see> flag is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButtonPaintEventArgs.PaintImage">
            <summary>
            Atomic operation to paint an image in the <see cref="T:Dapfor.Net.Ui.RoundButton"/>. The method <see cref="M:Dapfor.Net.Ui.RoundButtonPaintEventArgs.PaintAll"/> does not call this method if 
            the <see cref="F:Dapfor.Net.Ui.RoundButton.PaintPart.Image">RoundButton.PaintPart.Image</see> flag is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RoundButtonPaintEventArgs.PaintBackground">
            <summary>
            Atomic operation to paint a background in the <see cref="T:Dapfor.Net.Ui.RoundButton"/>. The method <see cref="M:Dapfor.Net.Ui.RoundButtonPaintEventArgs.PaintAll"/> does not call this method if 
            the <see cref="F:Dapfor.Net.Ui.RoundButton.PaintPart.Background">RoundButton.PaintPart.Background</see> flag is dropped.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Parts">
            <summary>
            Gets or sets the parts of <see cref="T:Dapfor.Net.Ui.RoundButton"/> that are to be painted. 
            </summary>
            <value>The parts of <see cref="T:Dapfor.Net.Ui.RoundButton"/> that are to be painted.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Text">
            <summary>
            Gets the text to be painted in <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Image">
            <summary>
            Gets or sets the image to be painted in <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Renderer">
            <summary>
            Gets or sets the renderer to paint the <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> to draw the text.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="T:Dapfor.Net.Ui.RoundButton"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Appearance">
            <summary>
            Gets the appearance of ths <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.ClipRectangle">
            <summary>
            A rectangle that represents the area of the <see cref="T:Dapfor.Net.Ui.RoundButton"/> that needs to be repainted.
            </summary>
            <value>The area of the <see cref="T:Dapfor.Net.Ui.RoundButton"/> that needs to be repainted.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Control">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.RoundButton"/> control.
            </summary>
            <value>The control.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RoundButtonPaintEventArgs.Graphics">
            <summary>
            The <see cref="T:System.Drawing.Graphics"/> used to paint the <see cref="T:Dapfor.Net.Ui.RoundButton"/>.
            </summary>
            <value>The <see cref="T:System.Drawing.Graphics"/>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Column">
             <summary>
             Represents a column
             </summary>
             <remarks>
             <para>Usually, the identifier of the <see cref="T:Dapfor.Net.Ui.Column"/> indicates which property of the data object will be
             called to get or set a value. An access to properties of the user-defined data objects is conducted through the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface, 
             which wraps the user-defined object.</para>
             <para>When a <see cref="T:Dapfor.Net.Ui.Column"/> is added to a <see cref="P:Dapfor.Net.Ui.Column.Header"/>, it can be found not only by identifier, but also by <see cref="P:Dapfor.Net.Ui.Column.Index">Column.Index</see>. The index does not specify the visible
             position of the <see cref="T:Dapfor.Net.Ui.Column"/>. It indicates the order in which it has been inserted. This <see cref="P:Dapfor.Net.Ui.Column.Index">Column.Index</see> is not changed when the user moves, 
             hides or shows <see cref="T:Dapfor.Net.Ui.Column"/>s. Only the <see cref="P:Dapfor.Net.Ui.Column.VisibleIndex">Column.VisibleIndex</see> is changed. This feature permits to access and index the 
             <see cref="T:Dapfor.Net.Data.IDataField"/> of <see cref="T:Dapfor.Net.Data.IDataAccessor"/>s that do not support identifiers. For example <see cref="T:System.Collections.IList"/> objects are inserted into the rows of the <see cref="T:Dapfor.Net.Ui.Grid"/>.</para>
             <para>Following example demonstrates how to configure header and columns:
             <code>
             void ConfigureGridHeaders(Grid grid)
             {
                 //Add a new header on the top hierarchical level (level 0)
                 grid.Headers.Add(new Header());
            
                 //Add a header on the 1st hierarchical level (level 1) and make it invisible
                 grid.Headers.Add(new Header());
                 grid.Headers[1].Visible = false;
            
                 //Create a column and add it to the top-level header
                 Column column = new Column("time");
                 grid.Headers[0].Add(column);
                 grid.Headers[0].Add(new Column("price"));
            
                 //Set the label for column, identified by the 'time' identifier on the top hierarchical level
                 grid.Headers[0]["time"].Name = "Time column";    
             
                 //Move the column
                 column.VisibleIndex = 1;
             }
             </code></para>
             </remarks>
             <threadsafety>The class is not thread safe.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.FilterRemove">
            <summary>
            Disables filtration by this column.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.ApplyFilter">
            <summary>
            Applies the current filter.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column"/> class.
            </summary>
            <param name="id">The column identifier.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column"/> class.
            </summary>
            <param name="id">The column identifier.</param>
            <param name="label">The column label.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column"/> class.
            </summary>
            <param name="id">The column identifier.</param>
            <param name="label">The column label.</param>
            <param name="width">The column width.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.#ctor(System.String,System.String,System.Int32,System.Nullable{System.Drawing.ContentAlignment})">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column"/> class.
            </summary>
            <param name="id">The column identifier.</param>
            <param name="label">The column label.</param>
            <param name="width">The column width.</param>
            <param name="alignment">The column text alignment.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.#ctor(System.String,System.String,System.Int32,System.Nullable{System.Drawing.ContentAlignment},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column"/> class.
            </summary>
            <param name="id">The column identifier.</param>
            <param name="label">The column label.</param>
            <param name="width">The column width.</param>
            <param name="alignment">The column text alignment.</param>
            <param name="visible"><c>true</c> if the column is visible. Otherwise <c>false</c>.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.#ctor(System.String,System.String,System.Int32,System.Nullable{System.Drawing.ContentAlignment},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column"/> class.
            </summary>
            <param name="id">The column identifier.</param>
            <param name="label">The column label.</param>
            <param name="width">The column width.</param>
            <param name="alignment">The column text alignment.</param>
            <param name="visible"><c>true</c> if the column is visible. Otherwise <c>false</c>.</param>
            <param name="editable">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Ui.Cell"/>s, belonging to this column can be edited.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.MeasureOptimalCellWidth(System.Boolean)">
            <summary>
            Gets the optimal width of <see cref="T:Dapfor.Net.Ui.Cell"/>s to display them without the loss of information.
            </summary>
            <param name="visibleRows">if set to <c>true</c>, only <see cref="T:Dapfor.Net.Ui.Cell"/>s in client area are taken into account.</param>
            <returns>The optimal width of cells</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.MeasureOptimalCaptionWidth">
            <summary>
            Gets the optimal width of the <see cref="T:Dapfor.Net.Ui.Column"/>'s caption to display it without the loss of information.
            </summary>
            <value>The optimal width of the column's caption.</value>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.EnsureVisible">
            <summary>
            Ensures the column totally visible.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.Invalidate">
            <summary>
            Invalidates this <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <example>
            <code>
            public void InvalidateUiElements(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header1 = new Header();
                header1.Add(new Column("Name"));
                header1.Add(new Column("Price"));
                header1.Add(new Column("Quantity"));
                grid.Headers.Add(header1);
            
                Header header2 = new Header();
                header2.Add(new Column("Name"));
                header2.Add(new Column("Date"));
                grid.Headers.Add(header2);
            
            
                //Add some data objects 
                Row product1 = grid.Rows.Add(new Product());
                Row product2 = grid.Rows.Add(new Product());
            
                //Add some customers to the first product
                Row customer1 = product1.Add(new Customer());
                Row customer2 = product1.Add(new Customer());
            
                //Add some customers to the another product
                Row customer3 = product2.Add(new Customer());
            
                //Expand all rows
                grid.Rows.ExpandAll();
            
            
                //Invalidate the cell
                customer1["Date"].Invalidate();
            
                //Invalidate the row
                customer1.Invalidate();
            
                //Invalidate the top-level header
                header1.Invalidate();
            
                //Invalidate product1 and product2
                header1.InvalidateRows();
            
                //Invalidate the column's caption 'Date' on the header2
                header2["Date"].Invalidate();
            
                //Invalidate the cell 'Date' of each customer
                header2["Date"].InvalidateCells();
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.InvalidateCells">
            <summary>
            Repainting of all cells in the grid that are related to a certain column located on the same hierarchical level as a header.
            </summary>
            <remarks>
            <para>It is well known that <see cref="N:System.Windows.Forms">System.Windows.Forms</see> controls use standard Windows API based on window messages. To repaint a certain part of a control, 
            it should invoke the <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">Control.Invalidate(Rectangle)</see> method, where Rectangle specifies location and size of the client surface that should be repainted. 
            In general, the calculation of screen coordinates of an element is a quite complicated process, especially in a hierarchical data grid. The .Net Grid provides 
            very convenient API to repaint different elements such as cells, rows, columns etc.</para>
            <para>Below you may see a list of elements that can be repainted in the grid:</para>
            <list type="bullet">
            <item><see cref="M:Dapfor.Net.Ui.Cell.Invalidate">Cell.Invalidate()</see> - Repainting of a single cell.</item>
            <item><see cref="M:Dapfor.Net.Ui.Row.Invalidate">Row.Invalidate()</see> - Repainting of a single row.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.Invalidate">Header.Invalidate()</see> - Header invalidation. If the header is located in the hierarchical grid (not top-level header), all duplicates in visible surface are repainted.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.InvalidateRows">Header.InvalidateRows()</see> - Repaint all rows in the grid on the same hierarchical level as the header.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.Invalidate">Column.Invalidate()</see> - Column title invalidation.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.InvalidateCells">Column.InvalidateCells()</see> - Repainting of all cells in the grid that are related to a certain column located on the same hierarchical level as a header.</item>
            </list>
            <code>
            public void InvalidateUiElements(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header1 = new Header();
                header1.Add(new Column("Name"));
                header1.Add(new Column("Price"));
                header1.Add(new Column("Quantity"));
                grid.Headers.Add(header1);
            
                Header header2 = new Header();
                header2.Add(new Column("Name"));
                header2.Add(new Column("Date"));
                grid.Headers.Add(header2);
            
            
                //Add some data objects 
                Row product1 = grid.Rows.Add(new Product());
                Row product2 = grid.Rows.Add(new Product());
            
                //Add some customers to the first product
                Row customer1 = product1.Add(new Customer());
                Row customer2 = product1.Add(new Customer());
            
                //Add some customers to the another product
                Row customer3 = product2.Add(new Customer());
            
                //Expand all rows
                grid.Rows.ExpandAll();
            
            
                //Invalidate the cell
                customer1["Date"].Invalidate();
            
                //Invalidate the row
                customer1.Invalidate();
            
                //Invalidate the top-level header
                header1.Invalidate();
            
                //Invalidate product1 and product2
                header1.InvalidateRows();
            
                //Invalidate the column's caption 'Date' on the header2
                header2["Date"].Invalidate();
            
                //Invalidate the cell 'Date' of each customer
                header2["Date"].InvalidateCells();
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.Adjust(System.Boolean,System.Boolean)">
            <summary>
            Adjusts this <see cref="T:Dapfor.Net.Ui.Column"/> to optimal width.
            </summary>
            <param name="withCaption">if set to <c>true</c>, adjusts to the best column caption and cell width. Otherwise it adjusts only to the best cell with.</param>
            <param name="visibleRows">if set to <c>true</c>, it adjusts only visible rows.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Filter">
            <summary>
            Gets or sets the filter editor.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.HasFilter">
            <summary>
            Gets a value indicating whether this column filters rows.
            </summary>
            <value>
            	<c>true</c> if the column has filter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Id">
            <summary>
            Gets the identifier of the column.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Header">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.Column.Header"/>, the <see cref="T:Dapfor.Net.Ui.Column"/> belongs to.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Width">
            <summary>
            Gets or sets a width of the <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value>The width.</value>
            <seealso cref="P:Dapfor.Net.Ui.Column.Resizable"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Name">
            <summary>
            Gets or sets a text displayed in the column's caption.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Description">
            <summary>
            Gets or sets a description of the column that is displayed as a tooltip over the column capiton.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.CaptionImage">
            <summary>
            Gets or sets a column's image.
            </summary>
            <value>The column's image.</value>
            <seealso cref="P:Dapfor.Net.Ui.Column.ColumnAppearance.CaptionImageSettings"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.CellImage">
            <summary>
            Gets or sets an image that is shown in <see cref="T:Dapfor.Net.Ui.Cell"/>s belonging to this <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value>The image.</value>
            <seealso cref="P:Dapfor.Net.Ui.Column.ColumnAppearance.CellImageSettings"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Focused">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Column"/> is focused.
             </summary>
             <value><c>true</c> if focused; otherwise, <c>false</c>.</value>
             <remarks>The column can be focused only if the focus <see cref="P:Dapfor.Net.Ui.Grid.GridFocus.Mode"/> of the <see cref="T:Dapfor.Net.Ui.Grid"/> is set to <see cref="F:Dapfor.Net.Ui.FocusMode.Cell"/>.</remarks>
             <example>
             <code>
             public void FocusedCellExample(Grid grid)
             {
                 //Add a new header on the top hierarchical level (level 0)
                 Header header = new Header();
                 header.Add(new Column("Name"));
                 header.Add(new Column("Price"));
                 header.Add(new Column("Quantity"));
                 grid.Headers.Add(header);
            
                 //Set the focus mode
                 grid.FocusSettings.Mode = FocusMode.Cell;
            
                 //Add some data objects 
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Focus the cell
                 grid.Rows[0]["Price"].Focused = true;
            
                 Console.WriteLine("Focused row = {0}", grid.FocusedRow.VisibleChildIndex);
                 Console.WriteLine("Focused column = {0}", grid.Headers[0].FocusedColumn.Id);
            
                 //Focus other column
                 grid.Headers[0]["Quantity"].Focused = true;
            
                 Console.WriteLine("The cell[0, 'Quantity'] is {0}", grid.Rows[0]["Quantity"].Focused ? "focused" : "not focused");
             }
             
             //Console output:
             Focused row = 0
             Focused column = Price
             The cell[0, 'Quantity'] is focused
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Index">
             <summary>
             Gets the index of the column within the <see cref="P:Dapfor.Net.Ui.Column.Header"/>. Usually it indicates the order in which the <see cref="T:Dapfor.Net.Ui.Column"/> has been inserted.
             </summary>
             <value>The index of the <see cref="T:Dapfor.Net.Ui.Column"/>.</value>
             <remarks>When a <see cref="T:Dapfor.Net.Ui.Column"/> is added to a <see cref="P:Dapfor.Net.Ui.Column.Header"/>, it can find not only by identifier, but also by <see cref="P:Dapfor.Net.Ui.Column.Index"/>. The index does not specify the visible
             position of the <see cref="T:Dapfor.Net.Ui.Column"/>. It indicates the order in which it has been inserted. This <see cref="P:Dapfor.Net.Ui.Column.Index"/> is not changed when the user moves, hides or shows <see cref="T:Dapfor.Net.Ui.Column"/>s.
             Only the <see cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/> is changed. This feature permits to access and index the <see cref="T:Dapfor.Net.Data.IDataField"/> of <see cref="T:Dapfor.Net.Data.IDataAccessor"/>s that do not support identifiers. For
             example <see cref="T:System.Collections.IList"/> objects are inserted into the rows of the <see cref="T:Dapfor.Net.Ui.Grid"/>.
            </remarks>
             <seealso cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Column"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
            <seealso cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.VisibleIndex">
            <summary>
            Gets or sets the visible index of this <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value>The visible index of the <see cref="T:Dapfor.Net.Ui.Column"/>.</value>
            <remarks>The visible index is zero-based number of the visible <see cref="T:Dapfor.Net.Ui.Column"/> in the <see cref="P:Dapfor.Net.Ui.Column.Header"/>. If the column is not visible, then the <see cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/> equals to -1.
            By setting a new index in range [0, <see cref="P:Dapfor.Net.Ui.Header.VisibleColumnCollection.Count"/> - 1], you move the <see cref="T:Dapfor.Net.Ui.Column"/> in the <see cref="P:Dapfor.Net.Ui.Column.Header"/>.</remarks>
            <seealso cref="P:Dapfor.Net.Ui.Column.Index"/>
            <seealso cref="T:Dapfor.Net.Ui.Header.VisibleColumnCollection"/>
            <seealso cref="P:Dapfor.Net.Ui.Column.Movable"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Grouped">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Column"/> is grouped.
            </summary>
            <value><c>true</c> if grouped; otherwise, <c>false</c>.</value>
            <remarks>
            <para>.Net Grid enables multiple data grouping in headers of the .Net Grid by any columns at any hierarchical level. 
            When data is grouped by a specific column, .Net Grid searches all rows within a group that has similar values. 
            When a group is organized, a row that doesn't contain a data object is added to the data grid. The <b>Row.IsGroup</b> property 
            of such row will always return true, and <b>Row["column id"].Value</b> will return a value by which data is grouped. 
            All rows with values that meet grouping conditions are attached to the newly created group. Before a new data object is added, .Net Grid 
            verifies whether there is any group with the required value on the current hierarchical level. If there is no such group, a new group is created. 
            When the <b>Row.Update()</b> method is invoked, the grid checks whether a row conforms to group value. 
            If there are no more rows in the group, the group is removed from the grid.</para>
            
            <para>In programming the grouping feature can be enabled via the <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property. Sequential invocation of this property for several columns results in 
            data grouping of these columns. The column with grouping remains visible unless <see cref="P:Dapfor.Net.Ui.Column.Visible">Column.Visible</see> property is set to false. 
            Sorting (and multiple sorting) can be enabled or disabled for grouped columns because sorting and grouping are completely independent processes. The list of grouped 
            columns can be viewed with <see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> collection property. A user can also group columns in the data grid. 
            To use this ability the user just needs to drag a column to a special panel on the grid's header. However, this is not possible if height of this panel is set to 0.</para>
            
            <para><b>Grouping and data filtering</b><br/>
            When grouping and filtering are enabled simultaneously, the .Net Grid checks every group for visible rows. If there are no visible rows, the group is filtered. 
            If a single unfiltered row appears, the row of the group also becomes visible.
            <code>
            public void GroupedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            
                header["Column1"].Grouped = true;
                header["Column3"].Grouped = true;
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            
                //Move the last grouped column to the upper level
                header.GroupedColumns[1].GroupIndex = 0;
            
                //Iterate all grouped columns
                foreach (Column column in header.GroupedColumns)
                {
                    Console.WriteLine("Grouped column: id = '{0}', index = {1}, group index = {2}, visible index = {3}", column.Id, column.Index, column.GroupIndex, column.VisibleIndex);
                }
            
                //Ungroup all columns
                header.GroupedColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            }
            
            //Console output:
            Grouped columns count: 0
            Columns count: 3
            Grouped columns count: 2
            Grouped column: id = 'Column3', index = 2, group index = 0, visible index = 2
            Grouped column: id = 'Column1', index = 0, group index = 1, visible index = 0
            Columns count: 3
            Grouped columns count: 0
            </code>
            </para>
            
            
            
            <para><b>Non-event model</b><br/>
            Real-time grouping in non event-driven model is done with <see cref="M:Dapfor.Net.Ui.Row.Update">Row.Update</see> method. 
            <code>
            public void NonEventModelGrouping(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
                grid.Headers[0].Add(new Column("Color"));
                grid.Headers[0].Add(new Column("Price"));
            
                //Group data by color
                grid.Headers[0]["Color"].Grouped = true;
            
                //Populate the grid
                Row blackMercedes = grid.Rows.Add(new object[] { "Mercedes", Color.Black, 25000d });
                Row whiteMercedes = grid.Rows.Add(new object[] { "Mercedes", Color.White, 23000d });
                Row whiteBMW = grid.Rows.Add(new object[] { "BMW", Color.White, 35000d });
            
                //The grid has two groups - 1=&gt; black mercedes 2=&gt; white mercedes and bmw
            
                //The first group has only the black mercedes
                Assert.AreEqual(1, grid.Nodes[0].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[0].Children[0]["Name"].Value);
            
                //The second group has two cars: white mercedes and white bmw
                Assert.AreEqual(2, grid.Nodes[1].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[1].Children[0]["Name"].Value);
                Assert.AreEqual("BMW", grid.Nodes[1].Children[1]["Name"].Value);
            
                //Change color of the white mercedes
                whiteMercedes["Color"].Value = Color.Green;
            
                //Now we have 3 groups. The last contains only the green mercedes
                Assert.AreEqual(1, grid.Nodes[2].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[2].Children[0]["Name"].Value);
                Assert.AreEqual(Color.Green, grid.Nodes[2].Children[0]["Color"].Value);
            }
            </code>
            </para>
            
            <para><b>Event-driven model</b><br/>
            In the event-driven model <see cref="M:Dapfor.Net.Ui.Row.Update">Row.Update</see> method is called every time when a data object sends a notification. Once again we'd like to emphasize the importance 
            of such model as it removes dependency of the business layer on <see cref="N:System.Windows.Forms">System.Windows.Forms</see> controls and on Dapfor assemblies as well.
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Groupable">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Dapfor.Net.Ui.Row"/>s can be grouped by this <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value><c>true</c> if groupable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.GroupIndex">
            <summary>
            Gets or sets the index of this <see cref="T:Dapfor.Net.Ui.Column"/> in the group.
            </summary>
            <value>The index in the group.</value>
            <remarks>The group index is a zero-based level of the <see cref="T:Dapfor.Net.Ui.Column"/> in the list of grouped columns in the <see cref="P:Dapfor.Net.Ui.Column.Header"/>. If the column is not grouped, then the <see cref="P:Dapfor.Net.Ui.Column.GroupIndex"/> equals to -1.
            By setting a new index in the range [0, <see cref="P:Dapfor.Net.Ui.Header.GroupedColumnCollection.Count"/> - 1], you move the <see cref="T:Dapfor.Net.Ui.Column"/> in the group.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.SortDirection">
            <summary>
            Gets or sets the sort direction.
            </summary>
            <value>The sort direction.</value>
            <remarks>
            .Net Grid sorting depends on headers. Sorted columns are stored in <see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see>. To enable sorting you have to use 
            <see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see> property. Calling this property for multiple columns sets multiple sorting by these columns. To cancel sorting, 
            call <see cref="M:Dapfor.Net.Ui.Header.SortedColumnCollection.Clear"/>Header.SortedColumns.Clear().
            <code>
            public void SortedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Sorted columns count: {0}", header.GroupedColumns.Count);
            
                header.SortedColumns.Clear();
            
                //Set multiple sort by two columns
                header["Column1"].SortDirection = SortDirection.Ascending;
                header["Column3"].SortDirection = SortDirection.Ascending;
            
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            
                //Change the sort direction
                header["Column3"].SortDirection = SortDirection.Descending;
            
                //Iterate in all sorted columns
                foreach (Column column in header.SortedColumns)
                {
                    Console.WriteLine("Sorted column: id = '{0}', index = {1}, visible index = {2}, sort level = {3}, sort direction = {4}", column.Id, column.Index, column.VisibleIndex, column.SortLevel, column.SortDirection);
                }
            
                //Remove sort
                header.SortedColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            }
            
            //Console output:
            Sorted columns count: 0
            Columns count: 3
            Sorted columns count: 2
            Sorted column: id = 'Column1', index = 0, visible index = 0, sort level = 0, sort direction = Ascending
            Sorted column: id = 'Column3', index = 2, visible index = 2, sort level = 1, sort direction = Descending
            Columns count: 3
            Sorted columns count: 0
            </code>
            </remarks>
            <seealso cref="P:Dapfor.Net.Ui.Column.SortLevel"/>
            <seealso cref="T:Dapfor.Net.Ui.Header.SortedColumnCollection"/>
            <seealso cref="P:Dapfor.Net.Ui.Column.Sortable"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Format">
            <summary>
            Gets or sets a format to display text in cells.
            </summary>
            <value>The text format.</value>
            <remarks>
            <para>A very important feature in .Net Grid its ability to work directly with application business logic. Business logic is a set of classes that may have certain 
            properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling <see cref="M:System.Object.ToString"/> or <see cref="M:System.String.Format(System.String,System.Object)"/>. 
            However, this approach is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to 
            convert values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a 
            value equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. 
            For application programming it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc:
            <code>
            public class Product
            {
                private double price;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                }
            }
            </code>
            </item>
            <item>In a column: Column.Format = 'your format';</item>
            <item>Directly in a <see cref="T:Dapfor.Net.Ui.Cell"/> (this method requires a lot of memory): Cell.Format = 'your format';</item>
            </list>
            </para>
            <para>The .Net Grid looks for IFofmat object to format values or parse strings in the following order:
            <list type="bullet">
            <item>In a <see cref="T:Dapfor.Net.Ui.Cell"/></item>
            <item>In a <see cref="T:Dapfor.Net.Ui.Column"/> returned by the <see cref="P:Dapfor.Net.Ui.Cell.Column"/> property</item>
            <item>In a <see cref="T:Dapfor.Net.Data.IDataField"/> object, returned by the <see cref="P:Dapfor.Net.Ui.Cell.DataField"/> property.</item>
            <item>If the format is still not found, the grid uses default format for the specified object type.</item>
            </list>
            </para>
            <para>Some formats greatly simplify application development. For example, <see cref="T:Dapfor.Net.Formats.StringFormat"/>, enables use of standard patterns for formatting values through <see cref="M:System.String.Format(System.String,System.Object)"/>:
            <code>
            column.Format = new StringFormat("### ### ### ###", string.Empty, " $");
            //The value 12345 will be displayed in cells as "12 345 $"
            </code>
            </para>
            <para>.NET Framework has similar system of type conversion based on the <see cref="T:System.ComponentModel.TypeConverter"/> class that enables conversion of values to 
            strings and vice versa. This conversion system is more complete, but a little bit cumbersome in the context of formating and data parsing. Althrough converters 
            are bulky, such approach enables development of a business logic independently from data presentation. In a perfect case all these mechanisms can be completely based 
            on Microsoft's component model and therefore have no physical dependencies on libraries of other vendors and on the Dapfor libraries as well.
            <code>
            class SomeClass
            {
                private int intValue;
            
                [TypeConverter(typeof(HexTypeConverter))]
                int SomeHexdecimalValue
                {
                    get { return intValue;  }
                    set { intValue = value; }
                }
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.SortLevel">
            <summary>
            Gets a sort level of this <see cref="T:Dapfor.Net.Ui.Column"/>. If this column is not sorted, the property returns -1.
            </summary>
            <value>The sort level.</value>
            <remarks>
            .Net Grid sorting depends on headers. Sorted columns are stored in <see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see>. To enable sorting you have to use 
            <see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see> property. Calling this property for multiple columns sets multiple sorting by these columns. To cancel sorting, 
            call <see cref="M:Dapfor.Net.Ui.Header.SortedColumnCollection.Clear"/>Header.SortedColumns.Clear().
            <code>
            public void SortedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Sorted columns count: {0}", header.GroupedColumns.Count);
            
                header.SortedColumns.Clear();
            
                //Set multiple sort by two columns
                header["Column1"].SortDirection = SortDirection.Ascending;
                header["Column3"].SortDirection = SortDirection.Ascending;
            
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            
                //Change the sort direction
                header["Column3"].SortDirection = SortDirection.Descending;
            
                //Iterate in all sorted columns
                foreach (Column column in header.SortedColumns)
                {
                    Console.WriteLine("Sorted column: id = '{0}', index = {1}, visible index = {2}, sort level = {3}, sort direction = {4}", column.Id, column.Index, column.VisibleIndex, column.SortLevel, column.SortDirection);
                }
            
                //Remove sort
                header.SortedColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            }
            
            //Console output:
            Sorted columns count: 0
            Columns count: 3
            Sorted columns count: 2
            Sorted column: id = 'Column1', index = 0, visible index = 0, sort level = 0, sort direction = Ascending
            Sorted column: id = 'Column3', index = 2, visible index = 2, sort level = 1, sort direction = Descending
            Columns count: 3
            Sorted columns count: 0
            </code>
            </remarks>
            <seealso cref="P:Dapfor.Net.Ui.Column.SortDirection"/>
            <seealso cref="T:Dapfor.Net.Ui.Header.SortedColumnCollection"/>
            <see cref="P:Dapfor.Net.Ui.Column.Sortable"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Editor">
             <summary>
             Gets or sets the editor to edit <see cref="T:Dapfor.Net.Ui.Cell"/>s.
             </summary>
             <value>The editor.</value>
             <example>
             <code>
             public void CellEditExample(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 
                 //Set a new price programmatically
                 Cell cell = row["Price"];
            
                 //Edit the cell with an appropriate editor
                 grid.Headers[0]["Price"].Editable = true;
                 cell.Edit();
             }
             </code>
             </example>
             <seealso cref="P:Dapfor.Net.Ui.Column.Editable"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Editable">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Cell"/>s, belonging to this <see cref="T:Dapfor.Net.Ui.Column"/> can be editable.
            </summary>
            <value><c>true</c> if <see cref="T:Dapfor.Net.Ui.Cell"/>s can be editable; otherwise, <c>false</c>.</value>
            <see cref="P:Dapfor.Net.Ui.Column.Editor"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Sortable">
            <summary>
            Gets or sets a value indicating whether the end-user can sort the content by this <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value><c>true</c> if sortable; otherwise, <c>false</c>.</value>
            <remarks>
            .Net Grid sorting depends on headers. Sorted columns are stored in <see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see>. To enable sorting you have to use 
            <see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see> property. Calling this property for multiple columns sets multiple sorting by these columns. To cancel sorting, 
            call <see cref="M:Dapfor.Net.Ui.Header.SortedColumnCollection.Clear"/>Header.SortedColumns.Clear().
            <code>
            public void SortedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Sorted columns count: {0}", header.GroupedColumns.Count);
            
                header.SortedColumns.Clear();
            
                //Set multiple sort by two columns
                header["Column1"].SortDirection = SortDirection.Ascending;
                header["Column3"].SortDirection = SortDirection.Ascending;
            
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            
                //Change the sort direction
                header["Column3"].SortDirection = SortDirection.Descending;
            
                //Iterate in all sorted columns
                foreach (Column column in header.SortedColumns)
                {
                    Console.WriteLine("Sorted column: id = '{0}', index = {1}, visible index = {2}, sort level = {3}, sort direction = {4}", column.Id, column.Index, column.VisibleIndex, column.SortLevel, column.SortDirection);
                }
            
                //Remove sort
                header.SortedColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            }
            
            //Console output:
            Sorted columns count: 0
            Columns count: 3
            Sorted columns count: 2
            Sorted column: id = 'Column1', index = 0, visible index = 0, sort level = 0, sort direction = Ascending
            Sorted column: id = 'Column3', index = 2, visible index = 2, sort level = 1, sort direction = Descending
            Columns count: 3
            Sorted columns count: 0
            </code>
            </remarks>
            <seealso cref="P:Dapfor.Net.Ui.Column.SortDirection"/>
            <seealso cref="P:Dapfor.Net.Ui.Column.SortLevel"/>
            <seealso cref="T:Dapfor.Net.Ui.Header.SortedColumnCollection"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Resizable">
            <summary>
            Gets or sets a value indicating whether end-user can resize this <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value><c>true</c> if rezisable; otherwise, <c>false</c>.</value>
            <seealso cref="P:Dapfor.Net.Ui.Column.Width"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Movable">
            <summary>
            Gets or sets a value indicating whether the end-user can move this <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value><c>true</c> if movable; otherwise, <c>false</c>.</value>
            <remarks>The visible index is zero-based number of the visible <see cref="T:Dapfor.Net.Ui.Column"/> in the <see cref="P:Dapfor.Net.Ui.Column.Header"/>. If the column is not visible, then the <see cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/> equals to -1.
            By setting a new index in range [0, <see cref="P:Dapfor.Net.Ui.Header.VisibleColumnCollection.Count"/> - 1], you move the <see cref="T:Dapfor.Net.Ui.Column"/> in the <see cref="P:Dapfor.Net.Ui.Column.Header"/>.</remarks>
            <seealso cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Adjustable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Column"/> is adjustable.
            </summary>
            <value><c>true</c> if adjustable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Configurable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Column"/> is configurable. 
            </summary>
            <value><c>true</c> if configurable; otherwise, <c>false</c>.</value>
            <remarks>If the column is configurable, it can be displayed in the column configurator when the user right-clicks on the header.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Tag">
            <summary>
            Gets or sets a tag. 
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.SerializationState">
            <summary>
            Gets or sets the state (width, visibility, etc...) of the <see cref="T:Dapfor.Net.Ui.Column"/> be be seralized to/from archive.
            </summary>
            <value>The state of the serialization.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.Appearance">
            <summary>
            Gets <see cref="T:Dapfor.Net.Ui.Column"/> and cell appearance.
            </summary>
            <value>The appearance.</value>
            <remarks>
            <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
            colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
            <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
            However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="P:Dapfor.Net.Ui.Column.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
            can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
            properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
            </para>
            <code>
            public void ColumnPanelAppearance(Grid grid)
            {
                //Initialize header and columns
                Header header = new Header();
                header.Add(new Column("Name"));
                header.Add(new Column("Price"));
                header.Add(new Column("Quantity"));
                grid.Headers.Add(header);
            
                //Set appearance for even and odd rows on all hierarchical levels
                grid.Appearance.EvenRows.BackColor = Color.Gray;
                grid.Appearance.OddRows.BackColor = Color.Black;
            
                //Set appearance for even and odd rows on the top hierarchical level
                header.Appearance.EvenRows.BackColor = Color.Gray;
                header.Appearance.OddRows.BackColor = Color.Black;
            
                //Default appearance for all columns 
                header.Appearance.ColumnPanel.ForeColor = Color.Red;
                header.Appearance.ColumnPanel.BackColor = Color.LightSteelBlue;
                header.Appearance.ColumnPanel.GradientEnabled = true;
                header.Appearance.ColumnPanel.GradientDirection = GradientDirection.Vertical;
                header.Appearance.ColumnPanel.GradientEndBackColor = Color.LightGray;
            
                //Appearance of the column 'Price'
                header["Price"].Appearance.CaptionColor.ForeColor = Color.Yellow;
                header["Price"].Appearance.CaptionColor.BackColor = Color.SteelBlue;
                header["Price"].Appearance.CaptionColor.GradientEnabled = true;
                header["Price"].Appearance.CaptionColor.GradientDirection = GradientDirection.Vertical;
                header["Price"].Appearance.CaptionColor.GradientEndBackColor = Color.Gray;
            
            
                //Populate the grid with rows
                grid.Rows.Add(new Product());
                Row row = grid.Rows[0];
            
                //Set a back color for the cell
                row["Price"].Appearance.BackColor = Color.Green;
            }        
            </code>
            
            <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
            <code>
            grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
            {
                //custom paint...
                e.Appearance.BackColor = Color.Red;
                e.Font = SystemFonts.MenuFont;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.MergedColumn">
            <summary>
            Gets the merged column if any.
            </summary>
            <value>The merged column.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Column.ColumnSerializationState">
            <summary>
            Column serialization state
            </summary>
            <remarks>
            <para>Data serialization is a process of saving user preferences for a grid, such as colors, columns location, grouping, sorting and other data into an archive for further 
            deserialization. For example, this feature may be useful when you restart your application. In general, this procedure is very complex and requires familiarity with 
            XML or binary archives. Besides that, a programmer sometimes fails to save state of the whole application, which results in loss of data and user preferences</para>
            
            <para>We provide you with a very convenient and efficient way to save and restore the grid's state. The .Net Grid supports serialization in XML as well as 
            in binary formats via the <see cref="P:Dapfor.Net.Ui.Grid.SerializationState">Grid.SerializationState</see> property. The object returned by this property implements 
            <see cref="T:System.Xml.Serialization.IXmlSerializable"/> and <see cref="T:System.Runtime.Serialization.ISerializable"/> interfaces which allow it to be serialized into XML or binary files. During deserialization this 
            object is restored from these files and is passed to the grid via the <see cref="P:Dapfor.Net.Ui.Grid.SerializationState">Grid.SerializationState</see> property.</para>
            
            <para>Example of XML serialization:
            <code>
            //The method serializes the grid's state into the XML file
            void XmlSerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    serializer.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void XmlDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    grid.SerializationState = (Grid.GridSerializationState)serializer.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>Example of binary serialization: 
            <code>
            //The method serializes the grid's state into the XML file
            void BinarySerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    formatter.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void BinaryDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    grid.SerializationState = (Grid.GridSerializationState)formatter.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>A very nice feature of the Dapfor.Net Grid is that a programmer may transfer state of one grid into another:
            <code>grid1.SerializationState = grid2.SerializationState;</code>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.ColumnSerializationState.#ctor">
            <summary>
            Default constructor. Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column.ColumnSerializationState"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.ColumnSerializationState.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Column.ColumnSerializationState"/> class and deserializes data from binary archive.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.ColumnSerializationState.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.ColumnSerializationState.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.ColumnSerializationState.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Column.ColumnSerializationState.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:Dapfor.Net.Ui.Column.ColumnAppearance">
            <summary>
            Column and cell appearance
            </summary>
            <threadsafety>The class is not thread safe.</threadsafety>
            <remarks>
            <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
            colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
            <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
            However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="P:Dapfor.Net.Ui.Column.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
            can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
            properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
            </para>
            <code>
            public void ColumnPanelAppearance(Grid grid)
            {
                //Initialize header and columns
                Header header = new Header();
                header.Add(new Column("Name"));
                header.Add(new Column("Price"));
                header.Add(new Column("Quantity"));
                grid.Headers.Add(header);
            
                //Set appearance for even and odd rows on all hierarchical levels
                grid.Appearance.EvenRows.BackColor = Color.Gray;
                grid.Appearance.OddRows.BackColor = Color.Black;
            
                //Set appearance for even and odd rows on the top hierarchical level
                header.Appearance.EvenRows.BackColor = Color.Gray;
                header.Appearance.OddRows.BackColor = Color.Black;
            
                //Default appearance for all columns 
                header.Appearance.ColumnPanel.ForeColor = Color.Red;
                header.Appearance.ColumnPanel.BackColor = Color.LightSteelBlue;
                header.Appearance.ColumnPanel.GradientEnabled = true;
                header.Appearance.ColumnPanel.GradientDirection = GradientDirection.Vertical;
                header.Appearance.ColumnPanel.GradientEndBackColor = Color.LightGray;
            
                //Appearance of the column 'Price'
                header["Price"].Appearance.CaptionColor.ForeColor = Color.Yellow;
                header["Price"].Appearance.CaptionColor.BackColor = Color.SteelBlue;
                header["Price"].Appearance.CaptionColor.GradientEnabled = true;
                header["Price"].Appearance.CaptionColor.GradientDirection = GradientDirection.Vertical;
                header["Price"].Appearance.CaptionColor.GradientEndBackColor = Color.Gray;
            
            
                //Populate the grid with rows
                grid.Rows.Add(new Product());
                Row row = grid.Rows[0];
            
                //Set a back color for the cell
                row["Price"].Appearance.BackColor = Color.Green;
            }        
            </code>
            
            <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
            <code>
            grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
            {
                //custom paint...
                e.Appearance.BackColor = Color.Red;
                e.Font = SystemFonts.MenuFont;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CaptionColor">
            <summary>
            Gets an appearance of the <see cref="T:Dapfor.Net.Ui.Column"/>'s caption.
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CaptionFont">
            <summary>
            Gets or sets a font to paint the text on the <see cref="T:Dapfor.Net.Ui.Column"/>'s caption.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CaptionTextSettings">
            <summary>
            Gets a text settings such as alignment, trimming, wrapping, etc.
            </summary>
            <value>The text settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CaptionImageSettings">
            <summary>
            Gets the settings of the image on the <see cref="T:Dapfor.Net.Ui.Column"/>'s caption.
            </summary>
            <value>The caption image settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CaptionTextAlignment">
            <summary>
            Gets or sets the alignment settings of the text on the <see cref="T:Dapfor.Net.Ui.Column"/>'s caption.
            </summary>
            <value>The caption text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CellImageSettings">
             <summary>
             Gets the image settings (stretching, alignment etc...) to paint images in <see cref="T:Dapfor.Net.Ui.Cell"/>s.
             </summary>
             <value>The image settings.</value>
             <example>
             <code>
             public void CellImage(Grid grid)
             {
                 grid.Headers[0]["Price"].Appearance.CellImageSettings.Alignment = ContentAlignment.MiddleLeft;
            
                 Product product = new Product();
                 grid.Rows.Add(product);
                 Row row = grid.Rows[0];
            
                 Bitmap image = new Bitmap("Image.ico");
                 row["Price"].Image = image;
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CellFont">
            <summary>
            Gets or sets the font to be used to paint the text in <see cref="T:Dapfor.Net.Ui.Cell"/>s, belonging to this <see cref="T:Dapfor.Net.Ui.Column"/>
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CellTextSettings">
            <summary>
            Gets the text settings such wrapping, text orientation etc to paint the text in <see cref="T:Dapfor.Net.Ui.Cell"/>s, belonging to this column.
            </summary>
            <value>The text settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CellTextAlignment">
            <summary>
            Gets or sets the text alignment of <see cref="T:Dapfor.Net.Ui.Cell"/>s belonging to this <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CellBackColor">
            <summary>
            Gets or sets the background color of cells belonging to this column.
            </summary>
            <value>Background color of cells belonging to this column. The color may have an Alpha-coefficient</value>
            <code>
            Column column = grid.Headers[0]["someId"];
            column.Appearance.CellBackColor = Color.FromArgb(15, Color.Red);
            </code>
        </member>
        <member name="P:Dapfor.Net.Ui.Column.ColumnAppearance.CellForeColor">
            <summary>
            Gets or sets the foreground color of cells belonging to this column.
            </summary>
            <value>Foreground color of cells belonging to this column. The color may have an Alpha-coefficient</value>
            <code>
            Column column = grid.Headers[0]["someId"];
            column.Appearance.CellForeColor = Color.FromArgb(120, Color.Green);
            </code>
        </member>
        <member name="T:Dapfor.Net.Filters.NamespaceDoc">
             <summary>
             Predefined filters in columns.
             </summary>
             <remarks>
             <para>.Net Grid presents 3 ways of data filtration: 
             <list type="bullet">
             <item>Setting boolean in the <see cref="P:Dapfor.Net.Ui.Row.Filtered">Row.Filtered</see> property</item>
             <item>Implementing the <see cref="T:Dapfor.Net.Ui.IFilter"/> interface and setting it with the <see cref="P:Dapfor.Net.Ui.Grid.Filter">Grid.Filter</see> property</item>
             <item>Filters in columns</item>
             </list>
             </para>
             <para>The third method enables the end user to set and edit filters that are located right on columns. When we developed this functionality, 
             we wanted it to be both convenient for end-user and developer and expandable. We didn't want to add our own data filtering language and therefore 
             used editors based <see cref="T:System.Drawing.Design.UITypeEditor"/> class that have a good track record.</para>
             
             <para>When a column contains a filter, user sees a small gray icon in its right part. When this icon's color changes to blue, this means 
             that a filter is active and rows are filtered by this column. To cancel filtering over UI you have to click on header in <see cref="F:Dapfor.Net.Ui.HitTestInfo.HeaderSelector"/> area. 
             When data grouping is used, user can also filter columns or data groups</para>
             
             <para>There are two styles of editors: <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> and <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.Modal"/>. 
             When <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)">UITypeEditor.EditValue()</see> function is called, editors get a column used for filtering as input and 
             return one of the following values:</para>
             <list type="bullet">
             <item><see cref="T:Dapfor.Net.Ui.Column"/> - Filter hasn't been changed during editing</item>
             <item><see cref="T:Dapfor.Net.Ui.IFilter"/> object - Filter that will be used to verify rows in the specified column</item>
             <item><c>null</c> - If null value is returned, no filtering is performed for this column</item>
             </list>
            
             <para>This approach covers almost all situations when data filtering may be needed. Filters in column work in parallel with programming filter set via 
             <see cref="P:Dapfor.Net.Ui.Grid.Filter">Grid.Filter</see> property. Any of these filters can tell the grid that data should no longer be visible. Data changed in real-time 
             are constantly checked for compliance with filtering conditions and their visibility may change automatically while the application is running. (When data is changed in non-event mode, you should call <see cref="M:Dapfor.Net.Ui.Row.Update">Row.Update()</see> method).</para>
             <para>Grid performs required filter serialization in XML or binary archives, enabling to restore application state when it is restarted.</para>
             <para>Below we provide an example of creating an arbitrary column filter that can be used to pick rows with a specific rating. 
             <code>
             public class RatingFilter : UITypeEditor, IFilter
             {
                 private Column column;
                 private int currentRating = 1;
             
                 public bool IsFiltered(Row row)
                 {
                     //Indicates where the row math to the column filter
                     if (column != null)
                     {
                         Cell cell = row[column.Id];
                         object value = cell != null ? cell.Value : null;
                         if (value != null &amp;&amp; value is int)
                         {
                             int rating = (int)value;
                             return !(rating == currentRating);
                         }
                     }
                     return false;
                 }
             
                 // Occurs when the user changes column filter.
                 public event EventHandler&lt;EventArgs&gt; FilterUpdated;
             
                 public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
                 {
                     //The value is a colum object
                     if (value is Column)
                     {
                         column = (Column)value;
                     }
             
                     //Get the editor service
                     IWindowsFormsEditorService service = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
                     if (service != null)
                     {
                         //Create a control to draw stars
                         using (Control control = new Control())
                         {
                             control.Width = 5 * Properties.Resources.star_grey.Width;
                             control.Height = Preferences.Grid.RowDefaultHeight;
                             control.BackColor = Color.White;
             
                             //Add callback to draw starts inside the control.
                             control.Paint += delegate(object sender, PaintEventArgs e)
                             {
                                 //Draw a background
                                 Rectangle bounds = control.Bounds;
                                 using (LinearGradientBrush linearBrush = new LinearGradientBrush(bounds, Color.FromArgb(252, 205, 205), Color.FromArgb(249, 164, 164), LinearGradientMode.Vertical))
                                 {
                                     e.Graphics.FillRectangle(linearBrush, bounds);
                                 }
             
                                 //Draw gold and gray stars
                                 bounds.Width = Properties.Resources.star_grey.Width;
                                 for (int i = 1; i &lt; 6; i++)
                                 {
                                     //Select image
                                     Image image = i &gt; currentRating ? Properties.Resources.star_grey : Properties.Resources.star_yellow;
                                     e.Graphics.DrawImage(image, bounds);
                                     bounds.X += bounds.Width;
                                 }
                             };
             
                             //Add callback to close control when the user ends editing
                             control.Click += delegate
                             {
                                 Point pt = control.PointToClient(Cursor.Position);
                                 currentRating = (pt.X - control.Bounds.X) / Properties.Resources.star_grey.Width + 1;
                                 service.CloseDropDown();
                             };
             
                             //Begin editing
                             service.DropDownControl(control);
                         }
                     }
                     return this;
                 }
             
                 public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
                 {
                     //Return the style of the editor
                     return UITypeEditorEditStyle.DropDown;
                 }
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="T:Dapfor.Net.Formats.DecimalFormatAttribute">
            <summary>
            An attribute that declares <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> for a property of data object.
            </summary>
            <remarks>
            <para>A very important feature in .Net Grid is its ability to work directly with application business logic. Business logic is a set of classes that may 
            have certain properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling 
            <see cref="M:System.Object.ToString">Object.ToString()</see> or <see cref="M:System.String.Format(System.String,System.Object[])">String.Format("{0}", value)</see>. However, this approach 
            is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to convert 
            values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a value 
            equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. For application programming 
            it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DecimalFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc.</item>
            <item>In a column: <see cref="P:Dapfor.Net.Ui.Column.Format">Column.Format</see> = 'your format';</item>
            <item>Directly in a cell (this method requires a lot of memory): <see cref="P:Dapfor.Net.Ui.Cell.Format">Cell.Format</see> = 'your format';</item>
            </list>
            </para>
            <para>
            The <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> can be declared with the <see cref="T:Dapfor.Net.Formats.DecimalFormatAttribute"/>. The following example demonstrates this:</para>
            <code>
            public class Product
            {
                private decimal price;
                
                [DecimalFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public decimal Price
                {
                    get { return price; }
                }
            }
            
            //Populate the grid and set a specified format for the 'Price' column
            public void PopulateGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
            
                //Populate the grid
                grid.Rows.Add(new Product());
            }
            </code>
            </remarks>  
        </member>
        <member name="T:Dapfor.Net.Formats.FormatBaseAttribute">
            <summary>
            Base class for all format attributes.
            </summary>
            <seealso cref="T:Dapfor.Net.Formats.FormatAttribute"/>
            <seealso cref="T:Dapfor.Net.Formats.IFormat"/>
            <seealso cref="T:Dapfor.Net.Data.IDataField"/>
        </member>
        <member name="P:Dapfor.Net.Formats.FormatBaseAttribute.Format">
            <summary>
            Gets an instance of the <see cref="T:Dapfor.Net.Formats.IFormat"/> interface.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormatAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormatAttribute"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormatAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormatAttribute"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <example>
            <code>
            [DecimalFormat(Precision = 4)]
            public double Price
            {
                get { return price; }
            }
            
            //The grid will show the double value 123456789.123456 as "123 456 789.1235"
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DecimalFormatAttribute.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DecimalFormatAttribute"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="shortForm">if set to <c>true</c> the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> will format big values to the short form, remplacing millions and billions by 'M' or 'B' letters</param>
            <param name="showZero">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Formats.DecimalFormat"/> will show '0' symbol for the zero values.</param>
            <example>
            <code>
            [DecimalFormat(Precision = 4, ShortForm = true, ShowZero = false)]
            public double Price
            {
                get { return price; }
            }
            
            //The grid will show the double value 123456789.123456 as "123.4568 M"
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormatAttribute.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormatAttribute.ShortForm">
            <summary>
            Gets or sets a value indicating whether the value is shown in short form.
            </summary>
            <value><c>true</c> if value is shown in short form; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormatAttribute.ShowZero">
            <summary>
            Gets or sets a value indicating whether the symbol '0' is shown when the value equals to zero.
            </summary>
            <value><c>true</c> if '0' is shown when the value equals to zero; otherwise, empty string will be a result of formatting.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DecimalFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.ToolTip">
            <summary>
            A small rectangular pop-up window that can contain any .Net control to display a brief description or to perform some action with a control when the user moves 
            the cursor over the control.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolTip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ToolTip"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolTip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ToolTip"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolTip.HideTooltip">
            <summary>
            Hides the tooltip.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ToolTip.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolTip.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolTip.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.Item(System.Windows.Forms.Control)">
            <summary>
            Provides detailed information (location, tooltip's region, custom control...) to display tooltip for the associated control.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.ToolTip"/> is active. A tip will only appear if the ToolTip has been activated.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.ShowAlways">
            <summary>
            Gets or sets a value indicating whether the ToolTip will be displayed always, even if the parent window is not active.
            </summary>
            <value><c>true</c> if the ToolTip is always visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.KeepVisibleOverTooltip">
            <summary>
            Gets or sets a value indicating whether the ToolTip remains visible if the pointer is located inside of the popup window after the <see cref="P:Dapfor.Net.Ui.ToolTip.AutoPopDelay"/> period has elapsed.
            </summary>
            <value>
            	<c>true</c> if the ToolTip remains visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.MoveVisibleTooltip">
            <summary>
            Gets or sets a value indicating whether the ToolTip window can follow the pointer if the user moves it inside a ToolTip region.
            </summary>
            <value><c>true</c> if the tooltip can follow the pointer; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipSize">
            <summary>
            Gets or sets the size of the tooltip. Can be altered if the <see cref="P:Dapfor.Net.Ui.ToolTip.AutoSize"/> property is <c>true</c>.
            </summary>
            <value>The size of the tooltip.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.Resizable">
            <summary>
            Gets or sets a value indicating whether the user can resize the ToolTip through the UI interface.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.IsBalloon">
            <summary>
            Gets or sets a value indicating whether whether the ToolTip will take a balloon form.
            </summary>
            <value><c>true</c> if the ToolTip has a balloon form; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.IsVisible">
            <summary>
            Gets a value indicating whether the <see cref="T:Dapfor.Net.Ui.ToolTip"/> is currently visible.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Dapfor.Net.Ui.ToolTip"/> is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.AutoSize">
            <summary>
            Gets or sets a value indicating whether the ToolTip can fit the popup window to the best content's size.
            </summary>
            <value><c>true</c> if the ToolTip can fit the popup window; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.InitialDelay">
            <summary>
            Gets or sets the length of time the pointer must remain stationary within a ToolTip region before the ToolTip windows appears.
            </summary>
            <value>The length of time in milliseconds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.AutoPopDelay">
            <summary>
            Gets or sets the the length of time the ToolTip remains visible if the pointer is stationary inside a ToolTip region or a popup window.
            </summary>
            <value>The length of time in milliseconds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.ReshowDelay">
            <summary>
            Gets or sets the length of time it takes for subsequent ToolTip windows to appear as the pointer moves from one ToolTip region to another.
            </summary>
            <value>The length of time in milliseconds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.BackColor">
            <summary>
            Gets or sets the background color of the tooltip control.
            </summary>
            <value>The background color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.ForeColor">
            <summary>
            Gets or sets the foreground color of the tooltip control.
            </summary>
            <value>The foreground color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.Title">
            <summary>
            Gets or sets the title of the ToolTip.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.Font">
            <summary>
            Gets or sets the font to display the content.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TitleFont">
            <summary>
            Gets or sets the font to display the title.
            </summary>
            <value>The title font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.CloseButton">
            <summary>
            Gets or sets a value indicating whether the ToolTip window should display a button to close the ToolTip window.
            </summary>
            <value><c>true</c> if the button should be displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TitleIcon">
            <summary>
            Gets or sets the icon to be displayed in the ToolTip's title.
            </summary>
            <value>The title icon.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.Orientation">
            <summary>
            Gets or sets the preferred orientation of the ToolTip relative to its start location.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="E:Dapfor.Net.Ui.ToolTip.Popup">
            <summary>
            Occurs whenever a Tooltip is about to be shown.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Ui.ToolTip.Hide">
            <summary>
            Occurs whenever a Tooltip is about to be hidden. The event handler can keep the tooltip visible even the <see cref="P:Dapfor.Net.Ui.ToolTip.AutoPopDelay"/> interval has expired.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.ToolTip.TooltipInfo">
            <summary>
            Detailed information (location, tooltip's region, custom control, etc.) for displaying tooltip for the specified control.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolTip.TooltipInfo.Remove">
            <summary>
            Removes the <see cref="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.AssociatedControl"/> from a list of controls.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.CustomControl">
            <summary>
            Gets or sets the control to be shown inside of the popup window.
            </summary>
            <value>The custom control.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.Region">
            <summary>
            Gets or sets the tooltip's region in the <see cref="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.AssociatedControl"/> where the pointer must remain stationary before the ToolTip windows appears.
            </summary>
            <value>The region in client coordonees of the <see cref="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.AssociatedControl"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.Enabled">
            <summary>
            Gets or sets a value indicating whether the tooltip can be displayed for the <see cref="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.AssociatedControl"/>.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.AssociatedControl">
            <summary>
            Gets the associated control for which the tooltip is displayed.
            </summary>
            <value>The associated control.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.Location">
            <summary>
            Gets or sets the location to display the tooltip.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.Text">
            <summary>
            Gets or sets the text to be displayed in the tooltip. This property is not used if the <see cref="P:Dapfor.Net.Ui.ToolTip.TooltipInfo.CustomControl"/> is presented.
            </summary>
            <value>The text to be displayed in the tooltip.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs">
            <summary>
            Provides data for the <see cref="E:Dapfor.Net.Ui.ToolTip.TooltipControl.Popup">TooltipControl.Popup</see> event. Enables customization of location and appearance of tips.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.AssociatedControl">
            <summary>
            Gets the control for which the <see cref="T:Dapfor.Net.Ui.ToolTip"/> is being drawn.
            </summary>
            <value>The associated control.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.BackColor">
            <summary>
            Gets or sets the background color of the <see cref="T:Dapfor.Net.Ui.ToolTip"/>.
            </summary>
            <value>The background color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.ForeColor">
            <summary>
            Gets or sets the foreground color of the <see cref="T:Dapfor.Net.Ui.ToolTip"/>.
            </summary>
            <value>The foreground color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.CustomControl">
            <summary>
            Gets or sets the custom control to be shown inside of the <see cref="T:Dapfor.Net.Ui.ToolTip"/>.
            </summary>
            <value>The custom control.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.Location">
            <summary>
            Gets or sets the location where the <see cref="T:Dapfor.Net.Ui.ToolTip"/> should be shown.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.Orientation">
            <summary>
            Gets or sets the orientation of the <see cref="T:Dapfor.Net.Ui.ToolTip"/> relative to the <see cref="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.Location"/>.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.TooltipSize">
            <summary>
            Gets or sets the size of the tooltip.
            </summary>
            <value>The size of the tooltip.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.Text">
            <summary>
            Gets or sets the text to be displayed if <see cref="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.CustomControl"/> is not set.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolTip.TooltipPopupEventArgs.TitleText">
            <summary>
            Gets or sets the text of the title.
            </summary>
            <value>The title text.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.TooltipHideEventArgs">
            <summary>
            An event that keeps the tooltip visible even when the <see cref="P:Dapfor.Net.Ui.ToolTip.AutoPopDelay"/> interval expires.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.TooltipHideEventArgs.KeepVisible">
            <summary>
            Gets or sets a value indicating whether the tooltip should stay visible.
            </summary>
            <value><c>true</c> if the tooltip should stay visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintColumnPanelEventArgs">
            <summary>
            Provides data and methods for painting column panel on the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Header"/>
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Grid"/>, <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Graphics"/> object, or do it vice versa!</para>
            
            
            <para>The following example shows how customize painting in column</para>
            <code>
            public void InitializeGrid(Grid grid)
            {
                Bitmap image = new Bitmap("image.ico");
            
                //Subscribe for column painting event
                grid.PaintColumnCaption += delegate(object sender, PaintColumnCaptionEventArgs e)
                {
                    using (Brush brush = new SolidBrush(Color.DeepPink))
                    {
                        //Prevent from text painting
                        e.Parts &amp;= e.Parts ^ PaintPart.Text;
            
                        //Another way to paint the custom text (do not turn off the PaintPart.Text):
                        e.Text = "New text to show in column";
            
                        //Set a new background color
                        e.Appearance.BackColor = Color.Yellow;
            
                        //Do default painting
                        e.PaintAll();
                        e.Handled = true;
            
                        //Draw a custom image above already pained cell
                        e.Graphics.DrawImage(image, e.VirtualBounds);
                    }
                };
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnPanelEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the column panel. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Grid"/> from default painting by setting 
            the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnPanelEventArgs.PaintBeforeFirstColumn">
            <summary>
            Atomic operation to paint the space before the first <see cref="T:Dapfor.Net.Ui.Column"/>. The method <see cref="M:Dapfor.Net.Ui.PaintColumnPanelEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.SpaceBeforeFirstColumn"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnPanelEventArgs.PaintColumnCaptions">
            <summary>
            Atomic operation to paint all <see cref="T:Dapfor.Net.Ui.Column"/>s. The method <see cref="M:Dapfor.Net.Ui.PaintColumnPanelEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.ColumnCaptions"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnPanelEventArgs.PaintSpaceAfterLastColumn">
            <summary>
            Paints the space after last column.
            </summary>
            <summary>
            Atomic operation to paints the space after last <see cref="T:Dapfor.Net.Ui.Column"/>. The method <see cref="M:Dapfor.Net.Ui.PaintColumnPanelEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.SpaceAfterLastColumn"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Header">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Header"/>.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.ParentRow">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Row"/> to which the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Header"/> is attached. The parameter can be not <c>null</c> for the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Header"/>s on the first and higher hierarchical levels.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Row"/> object if the hierarchical level of the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Header"/> is greater than 0; Otherwise <c>null</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Appearance">
            <summary>
            Gets the appearance of the <see cref="T:Dapfor.Net.Ui.Column"/> (Colors, gradient...).
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Bounds">
            <summary>
            Gets the visible bounds of the column panel.
            </summary>
            <value>The visible bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.SpaceAfterLastColumn">
            <summary>
            Gets the space after last <see cref="T:Dapfor.Net.Ui.Column"/> if any.
            </summary>
            <value>The space after last column.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.SpaceBeforeFirstColumn">
            <summary>
            Gets the space before first column.
            </summary>
            <value>
            The space before first column.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Render">
            <summary>
            Gets or sets the render that performs basic painting operations
            </summary>
            <value>The render.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Parts">
            <summary>
            Gets or sets the parts of the <see cref="T:Dapfor.Net.Ui.Column"/> that are to be painted. 
            </summary>
            <value>The parts.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintColumnPanelEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.NodeCollection">
            <summary>
            A collection of visible and invisible rows
            </summary>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            
            <code>
            public void PopulateGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
            
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("Song"));
            
                Row rowPlaylist = grid.Rows.Add(new Playlist("Queen"));
            
                rowPlaylist.Add(new Song("Keep Yourself Alive"));
                rowPlaylist.Add(new Song("Great King Rat"));
                rowPlaylist.Add(new Song("White Queen"));
            
                grid.Rows.ExpandAll();
            
                Console.WriteLine("{0} Rows at the top hierarchy level", grid.Nodes.Count);
                //Iterate all playlists (top-level items)
                foreach (Row playlist in grid.Nodes)
                {
                    Console.WriteLine("Playlist '{0}':", playlist["Name"].Text);
            
                    //Iterate all songs
                    foreach (Row song in playlist.Children)
                    {
                        Console.WriteLine("Song '{0}'", song["Song"].Text);
                    }
                }
            }
            
            //Console output:
            1 Rows at the top hierarchy level
            Playlist 'Queen':
            Song 'Keep Yourself Alive'
            Song 'Great King Rat'
            Song 'White Queen'
            </code>
            </remarks>
            <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see>
        </member>
        <member name="M:Dapfor.Net.Ui.NodeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.NodeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.NodeCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new data object at the specified index on the top hierarchical level of the grid.
            </summary>
            <param name="index">The index.</param>
            <param name="dataObject">The data object.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Row"/> object if success. Otherwise <c>null</c>.</returns>
            <seealso cref="M:Dapfor.Net.Ui.Row.Insert(System.Int32,System.Object)">Row.Insert</seealso>
        </member>
        <member name="M:Dapfor.Net.Ui.NodeCollection.Move(Dapfor.Net.Ui.Row)">
            <summary>
            Moves the specified row.
            </summary>
            <param name="childRow">The row to be moved.</param>
            <returns>True if the row was successfully moved. Otherwise false.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.NodeCollection.Move(Dapfor.Net.Ui.Row,System.Int32)">
            <summary>
            Moves the specified row.
            </summary>
            <param name="childRow">The row to be moved.</param>
            <param name="index">Index to which the row should be moved.</param>
            <returns>True if the row was successfully moved. Otherwise false.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.NodeCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.NodeCollection.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.NodeCollection.Count">
            <summary>
            Gets the count of child <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <remarks><value>The count of children.</value></remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.NodeCollection.TotalCount">
            <summary>
            Gets the total count of all visible and invisible <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <remarks><value>The count of all rows.</value></remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.NodeCollection.TotalVisibleCount">
            <summary>
            Gets the total count of all visible<see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <remarks><value>The count of all visible rows.</value></remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.NodeCollection.Item(System.Int32)">
            <summary>
            Gets the child <see cref="T:Dapfor.Net.Ui.Row"/> at the specified index.
            </summary>
            <value>If success, the child <see cref="T:Dapfor.Net.Ui.Row"/> will be returned. Otherwise <c>null</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.ConvertibleValueEditor">
            <summary>
            Embedded textbox editor that edit values of primitive types (int, double, etc.) in cell.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Editors.UITypeEditorEx">
            <summary>
            Extension of <see cref="T:System.Drawing.Design.UITypeEditor"/> that enables painting in cells and creating any controls over cells.
            </summary>
            <remarks> The following example demonstrates how to customize cell drawing and editing 
            <code>
            public class CheckBoxEditor : UITypeEditorEx
            {
                public override bool GetPaintCellSupported()
                {
                        return true;
                }
                public override void PaintCell(PaintCellEventArgs e)
                {
                    //Prevent from text drawing
                    e.Parts &amp;= e.Parts ^ PaintPart.Text;
            
                    //Default drawing
                    base.PaintCell(e);
            
                    //Dimensions to draw the check box
                    Rectangle bounds = e.Cell.VirtualBounds;
                    int len = bounds.Height;
                    bounds.X += (bounds.Width - len) / 2;
                    bounds.Width = len;
                    
                    //The cell is checked
                    if (Equals(true, e.Cell.Value))
                    {
                        ControlPaint.DrawCheckBox(e.Graphics, bounds, ButtonState.Checked | ButtonState.Flat);
                    }
                    //The cell is not checked
                    else if (Equals(false, e.Cell.Value))
                    {
                        ControlPaint.DrawCheckBox(e.Graphics, bounds, ButtonState.Normal | ButtonState.Flat);
                    }
                    //There is no value in cell
                    else
                    {
                        ControlPaint.DrawCheckBox(e.Graphics, bounds, ButtonState.Normal | ButtonState.Inactive | ButtonState.Flat);
                    }
                }
            
                public override void EditCell(IGridEditorService service, Cell cell)
                {
                    //Updates the value
                    object value = cell.Value;
                    cell.Value = !Equals(true, value);
                }
            
                public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
                {
                    return UITypeEditorEditStyle.None;
                }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Editors.UITypeEditorEx.GetPaintCellSupported">
            <summary>
            Gets a value, indicating whether this editor supports <see cref="T:Dapfor.Net.Ui.Cell"/> painting. 
            </summary>
            <returns><c>true</c> if the editor can paint inside of the <see cref="T:Dapfor.Net.Ui.Cell"/>. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Dapfor.Net.Editors.UITypeEditorEx.PaintCell(Dapfor.Net.Ui.PaintCellEventArgs)">
            <summary>
            Paints the cell.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.PaintCellEventArgs"/> instance containing the data to paint the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.UITypeEditorEx.EditCell(Dapfor.Net.Editors.IGridEditorService,Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StartEditReason)">
            <summary>
            Edits the cell.
            </summary>
            <param name="service">The service.</param>
            <param name="cell">The cell.</param>
            <param name="reason">The reason, why the editing is started.</param>
            <returns>The reason, why the editing was stopped.</returns>
        </member>
        <member name="P:Dapfor.Net.Editors.UITypeEditorEx.EditingCell">
            <summary>
            Gets the currently editing <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <value>The editing cell.</value>
        </member>
        <member name="P:Dapfor.Net.Editors.UITypeEditorEx.Navigable">
            <summary>
            Gets a value indicating whether this editor is navigable.
            </summary>
            <value><c>true</c> if navigable; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Dapfor.Net.Editors.ConvertibleValueEditor.GetPaintCellSupported">
            <summary>
            Gets a value, indicating whether this editor supports <see cref="T:Dapfor.Net.Ui.Cell"/> painting.
            </summary>
            <returns>
            	<c>true</c> if the editor can paint inside of the <see cref="T:Dapfor.Net.Ui.Cell"/>. Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.ConvertibleValueEditor.EditCell(Dapfor.Net.Editors.IGridEditorService,Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StartEditReason)">
            <summary>
            Edits the cell.
            </summary>
            <param name="service">The service.</param>
            <param name="cell">The cell.</param>
            <param name="reason">The reason, why the editing is started.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.ConvertibleValueEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="T:Dapfor.Net.Threading.Sequencer">
            <summary>
            Guarantees execution of <see cref="T:Dapfor.Net.Threading.ITask"/>s in a sequence. 
            </summary>
            <remarks>Only one <see cref="T:Dapfor.Net.Threading.ITask"/> can be executed at the moment. Following example demonstrates how to implement thread-safe event in data object:
            <code>
            class MyClass : INotifyPropertyChanged
            {
                private Sequencer sequencer = new Sequencer();
                private PropertyChangedEventHandler internalPropertyChanged;
               
                //Implementation of the thread-safe event 
                public event PropertyChangedEventHandler PropertyChanged
                {
                    add
                    {
                        //Do subscription in sequence
                        sequencer.ProcessTask(new DelegateTask(delegate
                        {
                            internalPropertyChanged += value;
                        }));
                    }
                    remove
                    {
                        //Remove subscription in sequence
                        sequencer.ProcessTask(new DelegateTask(delegate
                        {
                            internalPropertyChanged -= value;
                        }));
                    }
                }
            
                public void NotifyUpdate(string propertyName)
                {
                    //Send notification in sequence. 
                    sequencer.ProcessTask(new DelegateTask(delegate
                    {
                        //Here we don't need to acquire the lock object. All notification are processed in sequence.
                        if(internalPropertyChanged != null)
                        {
                            internalPropertyChanged(this, new PropertyChangedEventArgs(propertyName));
                        }
                    }));
                }
            }    
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Threading.Sequencer.ProcessTask(Dapfor.Net.Threading.ITask)">
            <summary>
            Processes the task in the sequence.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="F:Dapfor.Net.Editors.AppearanceEditorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.AppearanceEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.AppearanceEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.MergedColumn">
            <summary>
            Merged column enables collecting regular columns in groups
            </summary>
            <remarks>Regular columns can be moved and sorted and their size can be changed within a group. However, the grid doesn’t support moving
             columns outside the group or inserting a column not belonging to the group into the middle of this group. Merged columns cannot be grouped, 
            but otherwise they behave as regular columns.
            </remarks>
            <code>
            Header header = grid.Headers[0];
            MergedColumn mergedColumn = header.MergedColums.CreateNew("Merged column");
            mergedColumn.Add(grid.Headers[0]["ID2"]);
            mergedColumn.Add(grid.Headers[0]["ID3"]);  
            
            header.ColumnPanelHeight = 36;
            mergedColumn.Height = 18;
            </code>
        </member>
        <member name="M:Dapfor.Net.Ui.MergedColumn.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.MergedColumn.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.MergedColumn.Add(Dapfor.Net.Ui.Column)">
            <summary>
            Adds a new regular column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.Header">
            <summary>
            Gets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Column"/> with the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.Height">
            <summary>
            Gets or sets the height of the title above regular columns.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.Text">
            <summary>
            Gets or sets the text displayed in the title above regular columns.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.Image">
            <summary>
            Gets or sets the image of merged column.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.Font">
            <summary>
            Gets or sets the font the text is displayed with.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.Appearance">
            <summary>
            Gets or sets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.TextSettings">
            <summary>
            Gets or sets the text settings.
            </summary>
            <value>The text settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.ImageSettings">
            <summary>
            Gets or sets the image settings.
            </summary>
            <value>The image settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.MergedColumn.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.ColumnConfiguratorForm">
            <summary>
            Configures grid columns
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ColumnConfiguratorForm.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ColumnConfiguratorForm.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ColumnConfiguratorForm.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ColumnConfiguratorForm.ShowConfigurator(Dapfor.Net.Ui.Header)">
            <summary>
            Shows the confugurator.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ColumnConfiguratorForm.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ColumnConfiguratorForm.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Closed"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.ColumnConfiguratorForm.CreateParams">
            <summary>
            Gets the create params.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Filters.StringFilter">
            <summary>
            Column filter that matches strings.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.IFilter">
             <summary>
             An interface for filter <see cref="T:Dapfor.Net.Ui.Row"/>s.
             </summary>
             <remarks>Demonstrates how to set and use the filter
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 private double price;
            
                 public double Price
                 {
                     get { return price; }
                     set
                     {
                         //If the price is not the same, change it and notify about price changing
                         if (price != value)
                         {
                             price = value;
                             //The event can be raised from any thread. The grid will synchronize thread with GUI without blocking the calling thread.
                             //While painting, sorting or filtering the grid can ask this object in the GUI (!) thread to return the price value.
                             if(PropertyChanged != null)
                             {
                                 PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                             }
                         }
                     }
                 }
            
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             public void HowToSetFilter(Grid grid)
             {
                 //Set a filter that hides all rows, that contain products with price less than 10
                 grid.Filter = new Filter(delegate(Row row)
                 {
                     //There are three ways to get price: 
                     //1. From the Cell through the Value property, which returns a double value: row["Price"].Value
                     //2. Through the IDataAccessor and IDataField: row.DataAccessor["Price"].Value
                     //3. From the data object itself: ((Product)row.DataObject).Price
            
                     if ((double)row["Price"].Value &lt; 10)
                     {
                         //Filter the row
                         return true;
                     }
            
                     //The row is not filtered
                     return false;
                 });
            
                 //Populate the grid
                 Product product1 = new Product();
                 Product product2 = new Product();
            
                 grid.Rows.Add(product1);
                 grid.Rows.Add(product2);
            
                 //Update the product's price
                 //Data objects will notify the Grid, and it will display only the product2. 
                 //The product1 will be hidden
                 product1.Price = 9;
                 product2.Price = 11;
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.IFilter.IsFiltered(Dapfor.Net.Ui.Row)">
            <summary>
            Determines whether the specified <see cref="T:Dapfor.Net.Ui.Row"/> is filtered.
            </summary>
            <param name="row">The row.</param>
            <returns>
            	<c>true</c> if the specified row is filtered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Dapfor.Net.Ui.IFilter.FilterUpdated">
            <summary>
            Occurs when filter conditions are changed. 
            </summary>
            <remarks>This event is raised to force the <see cref="T:Dapfor.Net.Ui.Grid"/> to verify the state of all inserted <see cref="T:Dapfor.Net.Ui.Row"/>s.</remarks>
            <threadsafety>This event may be raised from any thread. If the <see cref="T:Dapfor.Net.Ui.Grid"/> receives a notification from the non-GUI thread, then it will synchronize 
            the calling thread with the GUI thread in the asynchronous way without blocking the calling thread. </threadsafety>
        </member>
        <member name="M:Dapfor.Net.Filters.StringFilter.IsFiltered(Dapfor.Net.Ui.Row)">
            <summary>
            Determines whether the specified <see cref="T:Dapfor.Net.Ui.Row"/> is filtered.
            </summary>
            <param name="row">The row.</param>
            <returns>
            	<c>true</c> if the specified row is filtered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.StringFilter.Reset">
            <summary>
            Resets the filter
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.StringFilter.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.StringFilter.OnFilterChanged">
            <summary>
            Called when filter condition is changed.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.StringFilter.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </returns>
        </member>
        <member name="E:Dapfor.Net.Filters.StringFilter.FilterUpdated">
            <summary>
            Occurs when filter conditions are changed.
            </summary>
            <remarks>This event is raised to force the <see cref="T:Dapfor.Net.Ui.Grid"/> to verify the state of all inserted <see cref="T:Dapfor.Net.Ui.Row"/>s.</remarks>
            <threadsafety>This event may be raised from any thread. If the <see cref="T:Dapfor.Net.Ui.Grid"/> receives a notification from the non-GUI thread, then it will synchronize
            the calling thread with the GUI thread in the asynchronous way without blocking the calling thread. </threadsafety>
        </member>
        <member name="T:Dapfor.Net.Data.HierarchicalFieldAttribute">
            <summary>
            Indicates that an object or a collection of objects returned by the property should be added to the grid as children of the current data object
            </summary>
            <remarks><para>Data objects containing <see cref="T:Dapfor.Net.Data.HierarchicalFieldAttribute">hierarchical fields</see> allows the grid to build a hierarchy:
            <example>
            <code>
            public class Strategy
            {
                ...
            
                [HierarchicalField]
                public IList&lt;Order&gt; Orders
                {
                    get { return _orders; }
                }
            
                ...
            }
            
            </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Data.CompositeObjectAccessor">
            <summary>
            Accessor to composite data objects
            </summary>
        </member>
        <member name="M:Dapfor.Net.Data.CompositeObjectAccessor.#ctor(System.Object,Dapfor.Net.Data.CompositeObjectAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.CompositeObjectAccessor"/> class.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="parentAccessor">The parent accessor.</param>
        </member>
        <member name="M:Dapfor.Net.Data.CompositeObjectAccessor.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.CompositeObjectAccessor"/> class.
            </summary>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="M:Dapfor.Net.Data.CompositeObjectAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.CompositeObjectAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.CompositeObjectAccessor.GetDataField(System.String,Dapfor.Net.Data.DataObjectPropertyDescriptor@)">
            <summary>
            Gets the data field.
            </summary>
            <param name="id">The id.</param>
            <param name="compositeProperty">The composite property.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Data.CompositeObjectAccessor.UpdateSubscription(Dapfor.Net.Data.DataObjectPropertyDescriptor,Dapfor.Net.Data.IDataAccessor)">
            <summary>
            Updates the subscription.
            </summary>
            <param name="compositeField">The composite field.</param>
            <param name="newAccessor">The new accessor.</param>
        </member>
        <member name="M:Dapfor.Net.Data.CompositeObjectAccessor.FireFieldChanged(Dapfor.Net.Data.IDataField)">
            <summary>
            Fires the field changed.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:Dapfor.Net.Data.CompositeObjectAccessor.Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.CompositeObjectAccessor.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.CompositeObjectAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether this accessor supports field indexing by the string identifiers.
            </summary>
            <value>
            	<c>true</c> if this accessor supports <see cref="T:Dapfor.Net.Data.IDataField"/> indexing by string identifiers; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:Dapfor.Net.Data.IDataField.Id"/>
        </member>
        <member name="P:Dapfor.Net.Data.CompositeObjectAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value><c>true</c> if they fire notifications; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.CompositeObjectAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.CompositeObjectAccessor.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>The underlying data object.</value>
        </member>
        <member name="P:Dapfor.Net.Data.CompositeObjectAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="E:Dapfor.Net.Data.CompositeObjectAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.HeaderCollection">
            <summary>
            Collection of <see cref="T:Dapfor.Net.Ui.Header"/>s. 
            </summary>
            <remarks>
            <para>A header is a collection of columns that enables displaying data in data grid's cells. A grid supports one or more headers. When a single header is used, 
            the grid has TreeListView control behavior, just like the Microsoft Windows Explorer. Multiple headers enable separate column management for each hierarchical level. 
            At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means that 
            the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting.</para>
            <para>In programming, headers can be added to the grid by calling <see cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)">Grid.Headers.Add(Header header)</see> method. When a header is added to 
            <see cref="P:Dapfor.Net.Ui.Grid.Headers">Grid.Headers</see> collection, a zero-based index is assigned to it in the hierarchy. When you call <see cref="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)">Header.Add(Column column)</see> method, 
            additional columns are added to a header. After that columns can be accessed with indexer operator. Every header has the following collections of columns:
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Header.VisibleColumns">Header.VisibleColumns</see> - List of visible columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.Columns">Header.Columns</see> - List of ALL columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see> - List of columns, that participate in sorting</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.FixedColumns">Header.FixedColumns</see> - List of non-scrollable columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> - List of grouped columns</item>
            </list>
            </para>
            <para>The same column can be located in different lists. Almost each of the aforementioned lists has <b>Clear()</b> method, that has a specific action when 
            invoked on a certain collection. Specifically, <see cref="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.Clear">Header.GroupedColumns.Clear()</see> removes data grouping in header of a grid. 
            To group data you only have to set <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property to true. If you set this property to true for multiple columns, it will result 
            in multiple grouping and will fill corresponding collection in the data grid header. Such approach can be used in sorting (<see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see>). 
            The number of fixed columns is defined by <see cref="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Count">Header.FixedColumns.Count</see>.</para>
            <code>
            public void MultipleHeaderGrid(Grid grid)
            {
                //Initialize the grid with two headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("FirstName", "First Name"));
                grid.Headers[0].Add(new Column("LastName", "Last Name"));
            
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("BookName", "Name"));
                grid.Headers[1].Add(new Column("BookGenre", "Genre"));
               
            
                //Add some data objects to the grid
                Row row = grid.Rows.Add(new Writer("Agata", "Kristi"));
                row.Add(new Book("Second front", "Detective story"));
                row.Add(new Book("Shameful Star", "Detective story"));
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.HeaderCollection.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through a collection of <see cref="T:Dapfor.Net.Ui.Header"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.HeaderCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:Dapfor.Net.Ui.Header"/>s.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.HeaderCollection.Clear">
            <summary>
            Removes all <see cref="T:Dapfor.Net.Ui.Header"/>s from this collection.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)">
            <summary>
            Adds a new <see cref="T:Dapfor.Net.Ui.Header"/> to the hierarchy of headers. 
            </summary>
            <param name="header">The <see cref="T:Dapfor.Net.Ui.Header"/>.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.HeaderCollection.Remove(Dapfor.Net.Ui.Header)">
            <summary>
            Removes the specified <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <param name="header">The <see cref="T:Dapfor.Net.Ui.Header"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.HeaderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Dapfor.Net.Ui.Header"/> on the specified hierarchical level.
            </summary>
            <param name="level">The hierarchical level.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.HeaderCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="P:Dapfor.Net.Ui.HeaderCollection.Grid">
            <summary>
            Gets <see cref="P:Dapfor.Net.Ui.HeaderCollection.Grid"/>
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.HeaderCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Header"/> on the specified hierarchical level.
            </summary>
            <value><see cref="T:Dapfor.Net.Ui.Header"/> if exists. Otherwise <c>null</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.HeaderCollection.Count">
            <summary>
            Gets a number of <see cref="T:Dapfor.Net.Ui.Header"/>s.
            </summary>
            <value>Number of <see cref="T:Dapfor.Net.Ui.Header"/>s.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.HeaderCollection.AutoGenerate">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Dapfor.Net.Ui.HeaderCollection.Grid"/> can automatically generate a <see cref="T:Dapfor.Net.Ui.Header"/> when
            the first <see cref="T:Dapfor.Net.Ui.Row"/> is added to the grid.
            </summary>
            <value><c>true</c> if the <see cref="T:Dapfor.Net.Ui.Header"/> generation is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.HeaderCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:Dapfor.Net.Ui.HeaderCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="T:Dapfor.Net.Internal.CompressedColor">
            <summary>
            Represents 32-bit color
            </summary>
        </member>
        <member name="T:Dapfor.Net.Data.FieldChangedEventArgs">
             <summary>
             Contains information about updated <see cref="T:Dapfor.Net.Data.IDataField"/>
             </summary>
             <remarks>A part of event-driven model. This agrument tells <see cref="T:Dapfor.Net.Ui.Grid"/> which field is changed:
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 //Some fields
                 private double price;
                 private DateTime maturity;
            
                 [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                 public double Price
                 {
                     get { return price; }
                     set 
                     {
                         price = value;
                         if(PropertyChanged != null)
                         {
                             PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                         }
                     }
                 }
            
                 public DateTime Maturity
                 {
                     get { return maturity; }
                 }
            
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             //Using sample
             public void AddDataObjectToGrid(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Maturity"));
            
            
                 //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                 grid.Rows.Add(new Product());
            
                 //Add data object to the grid and wrap it explicitly by the DataObjectAccessor class 
                 //(You can provide your custom implementation of the data accessor). 
                 grid.Rows.Add(new DataObjectAccessor(new Product()));
            
                 //Build some hierarchy...
                 grid.Rows[0].Add(new Product());
            
                 //Or from another thread - this is safe.
                 ThreadPool.QueueUserWorkItem(delegate
                 {
                     grid.Rows[0].Add(new Product());
                 });
             }    
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.FieldChangedEventArgs.#ctor(Dapfor.Net.Data.IDataAccessor,Dapfor.Net.Data.IDataField)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.FieldChangedEventArgs"/> class.
            </summary>
            <param name="dataAccessor">The data accessor.</param>
            <param name="field">The data field.</param>
        </member>
        <member name="P:Dapfor.Net.Data.FieldChangedEventArgs.DataAccessor">
            <summary>
            Gets the data accessor, the field of which has been updated.
            </summary>
            <value>The data accessor.</value>
        </member>
        <member name="P:Dapfor.Net.Data.FieldChangedEventArgs.Field">
            <summary>
            Gets the updated data field.
            </summary>
            <value>The data field.</value>
        </member>
        <member name="T:Dapfor.Net.Data.DictionaryDataAccessor">
            <summary>
            Wraps <see cref="T:System.Collections.Generic.IDictionary`2">IDictionary&lt;string, object&gt;</see>.
            </summary>
            <remarks>Objects of <see cref="T:System.Collections.Generic.IDictionary`2">IDictionary&lt;string, object&gt;</see> can be added to grid via <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Collections.IDictionary)">Grid.Rows.Add(IDictionary)</see> method:
            <code>
            void AddDictionaryObject(Grid grid)
            {
                //Configure headers. Top hierarchical level (level 0)
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("column1"));
                grid.Headers[0].Add(new Column("column2"));
                grid.Headers[0].Add(new Column("column3"));
            
                //Configure headers at hierarchical level 1. 
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("column_connected"));
                grid.Headers[1].Add(new Column("column_idle"));
            
            
                //Add the object
                Hashtable hashTable = new Hashtable();
                hashTable.Add("column1", 10);
                hashTable.Add("column2", DateTime.Now);
                hashTable.Add("column3", 123.45);
                grid.Rows.Add(hashTable);
            
                //Add some hierarchy...
                Dictionary&lt;string, bool&gt; flags = new Dictionary&lt;string, bool&gt;();
                flags.Add("column_connected", true);
                flags.Add("column_idle", false);
                grid.Rows[0].Add(flags);
            }    
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.DictionaryDataAccessor.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.DictionaryDataAccessor"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <remarks>The object of <see cref="T:System.Collections.IDictionary"/> class is related to a row in the grid.
            The keys present field identifiers and values are shown in corresponding cells. It is necessary, that keys 
            are be of the <see cref="T:System.String"/> type. Otherwise an exception will be raised.</remarks>
        </member>
        <member name="M:Dapfor.Net.Data.DictionaryDataAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.DictionaryDataAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.DictionaryDataAccessor.FireFieldChanged(Dapfor.Net.Data.IDataField)">
            <summary>
            Fires the field changed.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:Dapfor.Net.Data.DictionaryDataAccessor.Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.DictionaryDataAccessor.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.DictionaryDataAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether the access to the fields of the data object by their field identifier is available.
            </summary>
            <value>
            	Always <c>true</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.DictionaryDataAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.DictionaryDataAccessor.DataObject">
            <summary>
            Gets the underlying collection.
            </summary>
            <value>The underlying collection.</value>
        </member>
        <member name="P:Dapfor.Net.Data.DictionaryDataAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="E:Dapfor.Net.Data.DictionaryDataAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.DictionaryDataAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            Always <value><c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.VerticalSpacing">
            <summary>
            Specifies vertical spacing
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.VerticalSpacing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.VerticalSpacing"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.VerticalSpacing.#ctor(Dapfor.Net.Ui.VerticalSpacing)">
            <summary>
            Copy constructor.
            </summary>
            <param name="spacing">The spacing.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.VerticalSpacing.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.VerticalSpacing"/> class.
            </summary>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.VerticalSpacing.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.VerticalSpacing.Equals(Dapfor.Net.Ui.VerticalSpacing)">
            <summary>
            Determines whether the specified <see cref="T:Dapfor.Net.Ui.VerticalSpacing"/> is equal to the current <see cref="T:Dapfor.Net.Ui.VerticalSpacing"/>.
            </summary>
            <param name="verticalSpacing">The vertical spacing.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.VerticalSpacing.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Dapfor.Net.Ui.VerticalSpacing.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="E:Dapfor.Net.Ui.VerticalSpacing.SpacingChanged">
            <summary>
            Occurs when the spacing is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.VerticalSpacing.Top">
            <summary>
            Gets or sets the top spacing.
            </summary>
            <value>The top spacing.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.VerticalSpacing.Bottom">
            <summary>
            Gets or sets the bottom spacing.
            </summary>
            <value>The bottom spacing.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.VerticalSpacing.Empty">
            <summary>
            Gets the empty spacing.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.DropDownEditor">
            <summary>
            Base class for dropdown editors
            </summary>
            <remarks>
            Demonstrates how to implement editor that shows "Yes/No" in drop-down list.
            <code>
            //Implementation of a drop-down editor that modifies boolean values
            public class YesNoEditor : DropDownEditor
            {
                private const string noString = "No";
                private const string yesString = "Yes";
                
                public override void Populate(ListBox listBox, object value, ref ContentAlignment alignment)
                {
                    listBox.Items.Add(yesString);
                    listBox.Items.Add(noString);
                }
                
                public override object EndEdit(ListBox listBox, object value)
                {
                    if (Equals(yesString, listBox.SelectedItem)) return true;
                    if (Equals(noString, listBox.SelectedItem)) return false;
                    return value;
                }
                
                public override bool GetPaintCellSupported()
                {
                    return true;
                }
                
                public override void PaintCell(PaintCellEventArgs e)
                {
                    //Replace "True/False" by "Yes/No" drawing
                    e.Text = Equals(true, e.Cell.Value) ? yesString : noString;
                
                    //Default drawing
                    base.PaintCell(e);
                }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Editors.DropDownEditor.Populate(System.Windows.Forms.ListBox,System.Object,System.Drawing.ContentAlignment@)">
            <summary>
            Is called to populate the list box.
            </summary>
            <param name="listBox">The list box.</param>
            <param name="value">The value to be edited.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.DropDownEditor.EndEdit(System.Windows.Forms.ListBox,System.Object)">
            <summary>
            Is called when the end used selected the item in the list box.
            </summary>
            <param name="listBox">The list box.</param>
            <param name="value">The previous value of the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
            <returns>A new value, to be passed to the <see cref="T:Dapfor.Net.Ui.Cell"/></returns>
        </member>
        <member name="M:Dapfor.Net.Editors.DropDownEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.DropDownEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
        </member>
        <member name="T:Dapfor.Net.Ui.Header">
            <summary>
            Collection of <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <remarks>
            <para>A header is a collection of columns that enables displaying data in data grid's cells. A grid supports one or more headers. When a single header is used, 
            the grid has TreeListView control behavior, just like the Microsoft Windows Explorer. Multiple headers enable separate column management for each hierarchical level. 
            At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means that 
            the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting.</para>
            <para>In programming, headers can be added to the grid by calling <see cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)">Grid.Headers.Add(Header header)</see> method. When a header is added to 
            <see cref="P:Dapfor.Net.Ui.Grid.Headers">Grid.Headers</see> collection, a zero-based index is assigned to it in the hierarchy. When you call <see cref="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)">Header.Add(Column column)</see> method, 
            additional columns are added to a header. After that columns can be accessed with indexer operator. Every header has the following collections of columns:
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Header.VisibleColumns">Header.VisibleColumns</see> - List of visible columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.Columns">Header.Columns</see> - List of ALL columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see> - List of columns, that participate in sorting</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.FixedColumns">Header.FixedColumns</see> - List of non-scrollable columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> - List of grouped columns</item>
            </list>
            </para>
            <para>The same column can be located in different lists. Almost each of the aforementioned lists has <b>Clear()</b> method, that has a specific action when 
            invoked on a certain collection. Specifically, <see cref="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.Clear">Header.GroupedColumns.Clear()</see> removes data grouping in header of a grid. 
            To group data you only have to set <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property to true. If you set this property to true for multiple columns, it will result 
            in multiple grouping and will fill corresponding collection in the data grid header. Such approach can be used in sorting (<see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see>). 
            The number of fixed columns is defined by <see cref="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Count">Header.FixedColumns.Count</see>.</para>
            <code>
            public void MultipleHeaderGrid(Grid grid)
            {
                //Initialize the grid with two headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("FirstName", "First Name"));
                grid.Headers[0].Add(new Column("LastName", "Last Name"));
            
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("BookName", "Name"));
                grid.Headers[1].Add(new Column("BookGenre", "Genre"));
               
            
                //Add some data objects to the grid
                Row row = grid.Rows.Add(new Writer("Agata", "Kristi"));
                row.Add(new Book("Second front", "Detective story"));
                row.Add(new Book("Shameful Star", "Detective story"));
            }
            </code>
            </remarks>
            <threadsafety>The class is not thread safe</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Header"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of all available <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of all available <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)">
            <summary>
            Adds a new <see cref="T:Dapfor.Net.Ui.Column"/> to the end of this header.
            </summary>
            <param name="column">The column.</param>
            <code>
            public void VisibleColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                header[1].Visible = false;
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                //Move the last visible column to the beginning
                header.VisibleColumns[1].VisibleIndex = 0;
            
                //Iterate all visible columns
                foreach (Column column in header.VisibleColumns)
                {
                    Console.WriteLine("Visible column: id = '{0}', index = {1}, visible index = {2}", column.Id, column.Index, column.VisibleIndex);
                }
            
                //Make all columns invisible 
                header.VisibleColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            }
            
            //Console output:
            Visible columns count: 3
            Columns count: 3
            Visible columns count: 2
            Visible column: id = 'Column3', index = 2, visible index = 0
            Visible column: id = 'Column1', index = 0, visible index = 1
            Columns count: 3
            Visible columns count: 0
            </code>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.Remove(Dapfor.Net.Ui.Column)">
            <summary>
            Removes the <see cref="T:Dapfor.Net.Ui.Column"/> from the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <param name="column">The <see cref="T:Dapfor.Net.Ui.Column"/> to be removed.</param>
            <returns>
            	<c>true</c> if the <see cref="T:Dapfor.Net.Ui.Column"/> has been successfully removed. Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.Clear">
            <summary>
            Removes all <see cref="T:Dapfor.Net.Ui.Column"/>s from the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.Invalidate">
            <summary>
            Invalidates this <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <remarks>
            <para>If the header is located in the hierarchical grid (not top-level header), all duplicates in visible surface are repainted.</para>
            <para>It is well known that <see cref="N:System.Windows.Forms">System.Windows.Forms</see> controls use standard Windows API based on window messages. 
            To repaint a certain part of a control, it should invoke the <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">Control.Invalidate(Rectangle rect)</see> method, where Rectangle specifies 
            location and size of the client surface that should be repainted. In general, the calculation of screen coordinates of an element is a quite complicated process, 
            especially in a hierarchical data grid. The .Net Grid provides very convenient API to repaint different elements such as cells, rows, columns etc.</para>
            <list type="bullet">
            <item><see cref="M:Dapfor.Net.Ui.Cell.Invalidate">Cell.Invalidate()</see> - Repainting of a single cell.</item>
            <item><see cref="M:Dapfor.Net.Ui.Row.Invalidate">Row.Invalidate()</see> - Repainting of a single row.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.Invalidate">Header.Invalidate()</see> - Header invalidation. If the header is located in the hierarchical grid (not top-level header), all duplicates in visible surface are repainted.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.InvalidateRows">Header.InvalidateRows()</see> - Repaint all rows in the grid on the same hierarchical level as the header.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.Invalidate">Column.Invalidate()</see> - Column title invalidation.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.InvalidateCells">Column.InvalidateCells()</see> - Repainting of all cells in the grid that are related to a certain column located on the same hierarchical level as a header.</item>
            </list>
            <code>
            public void InvalidateUiElements(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header1 = new Header();
                header1.Add(new Column("Name"));
                header1.Add(new Column("Price"));
                header1.Add(new Column("Quantity"));
                grid.Headers.Add(header1);
            
                Header header2 = new Header();
                header2.Add(new Column("Name"));
                header2.Add(new Column("Date"));
                grid.Headers.Add(header2);
            
            
                //Add some data objects 
                Row product1 = grid.Rows.Add(new Product());
                Row product2 = grid.Rows.Add(new Product());
            
                //Add some customers to the first product
                Row customer1 = product1.Add(new Customer());
                Row customer2 = product1.Add(new Customer());
            
                //Add some customers to the another product
                Row customer3 = product2.Add(new Customer());
            
                //Expand all rows
                grid.Rows.ExpandAll();
            
            
                //Invalidate the cell
                customer1["Date"].Invalidate();
            
                //Invalidate the row
                customer1.Invalidate();
            
                //Invalidate the top-level header
                header1.Invalidate();
            
                //Invalidate product1 and product2
                header1.InvalidateRows();
            
                //Invalidate the column's caption 'Date' on the header2
                header2["Date"].Invalidate();
            
                //Invalidate the cell 'Date' of each customer
                header2["Date"].InvalidateCells();
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.InvalidateRows">
            <summary>
            Repaint all rows in the grid on the same hierarchical level as the header.
            </summary>
            <remarks>
            <para>It is well known that <see cref="N:System.Windows.Forms">System.Windows.Forms</see> controls use standard Windows API based on window messages. To repaint a certain part of a control, 
            it should invoke the <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">Control.Invalidate(Rectangle)</see> method, where Rectangle specifies location and size of the client surface that should be repainted. 
            In general, the calculation of screen coordinates of an element is a quite complicated process, especially in a hierarchical data grid. The .Net Grid provides 
            very convenient API to repaint different elements such as cells, rows, columns etc.</para>
            <para>Below you may see a list of elements that can be repainted in the grid:</para>
            <list type="bullet">
            <item><see cref="M:Dapfor.Net.Ui.Cell.Invalidate">Cell.Invalidate()</see> - Repainting of a single cell.</item>
            <item><see cref="M:Dapfor.Net.Ui.Row.Invalidate">Row.Invalidate()</see> - Repainting of a single row.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.Invalidate">Header.Invalidate()</see> - Header invalidation. If the header is located in the hierarchical grid (not top-level header), all duplicates in visible surface are repainted.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.InvalidateRows">Header.InvalidateRows()</see> - Repaint all rows in the grid on the same hierarchical level as the header.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.Invalidate">Column.Invalidate()</see> - Column title invalidation.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.InvalidateCells">Column.InvalidateCells()</see> - Repainting of all cells in the grid that are related to a certain column located on the same hierarchical level as a header.</item>
            </list>
            <code>
            public void InvalidateUiElements(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header1 = new Header();
                header1.Add(new Column("Name"));
                header1.Add(new Column("Price"));
                header1.Add(new Column("Quantity"));
                grid.Headers.Add(header1);
            
                Header header2 = new Header();
                header2.Add(new Column("Name"));
                header2.Add(new Column("Date"));
                grid.Headers.Add(header2);
            
            
                //Add some data objects 
                Row product1 = grid.Rows.Add(new Product());
                Row product2 = grid.Rows.Add(new Product());
            
                //Add some customers to the first product
                Row customer1 = product1.Add(new Customer());
                Row customer2 = product1.Add(new Customer());
            
                //Add some customers to the another product
                Row customer3 = product2.Add(new Customer());
            
                //Expand all rows
                grid.Rows.ExpandAll();
            
            
                //Invalidate the cell
                customer1["Date"].Invalidate();
            
                //Invalidate the row
                customer1.Invalidate();
            
                //Invalidate the top-level header
                header1.Invalidate();
            
                //Invalidate product1 and product2
                header1.InvalidateRows();
            
                //Invalidate the column's caption 'Date' on the header2
                header2["Date"].Invalidate();
            
                //Invalidate the cell 'Date' of each customer
                header2["Date"].InvalidateCells();
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.FromDataType(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Dapfor.Net.Ui.Header"/> class and populates it with <see cref="T:Dapfor.Net.Ui.Column"/>s by parsing the type of data object.
            </summary>
            <param name="dataType">Type of data object.</param>
            <returns>A new <see cref="T:Dapfor.Net.Ui.Header"/> object</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.FromDataAccessor(Dapfor.Net.Data.IDataAccessor)">
            <summary>
            Creates a new instance of the <see cref="T:Dapfor.Net.Ui.Header"/> class and populates it with <see cref="T:Dapfor.Net.Ui.Column"/>s by parsing <see cref="T:Dapfor.Net.Data.IDataAccessor"/>.
            </summary>
            <param name="dataAccessor">The data accessor.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.FromDataObject(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Dapfor.Net.Ui.Header"/> class and populates it with <see cref="T:Dapfor.Net.Ui.Column"/>s, by parsing the data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns>A <see cref="T:Dapfor.Net.Ui.Header"/>'s instance</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.FromPropertyDescriptorCollection(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Creates a new instance of the <see cref="T:Dapfor.Net.Ui.Header"/> class and populates it with <see cref="T:Dapfor.Net.Ui.Column"/>s by parsing <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
            <param name="propertyCollecion">Collection of <see cref="T:System.ComponentModel.PropertyDescriptor"/>s.</param>
            <returns>A <see cref="T:Dapfor.Net.Ui.Header"/>'s instance</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.AdjustColumns(System.Boolean,System.Boolean)">
            <summary>
            Adjusts all <see cref="T:Dapfor.Net.Ui.Column"/>s to their optimal width.
            </summary>
            <param name="withCaptions">if set to <c>true</c>, adjusts to the best column caption and cell width. Otherwise it adjusts only to the best cell with.</param>
            <param name="visibleRows">if set to <c>true</c>, it adjusts only visible rows.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.FilterRemove">
            <summary>
            Removes all column filters.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.SerializationState">
            <summary>
            Gets or sets header serialization state (columns, colors, etc...).
            </summary>
            <value>Header serialization state.</value>
            <summary>
            Header serialization state
            </summary>
            <remarks>
            <para>Data serialization is a process of saving user preferences for a grid, such as colors, columns location, grouping, sorting and other data into an archive for further 
            deserialization. For example, this feature may be useful when you restart your application. In general, this procedure is very complex and requires familiarity with 
            XML or binary archives. Besides that, a programmer sometimes fails to save state of the whole application, which results in loss of data and user preferences</para>
            
            <para>We provide you with a very convenient and efficient way to save and restore the grid's state. The .Net Grid supports serialization in XML as well as 
            in binary formats via the <see cref="P:Dapfor.Net.Ui.Grid.SerializationState"/> property. The object returned by this property implements <see cref="T:System.Xml.Serialization.IXmlSerializable"/> 
            and <see cref="T:System.Runtime.Serialization.ISerializable"/> interfaces which allow it to be serialized into XML or binary files. During deserialization this object is restored from these 
            files and is passed to the grid via the <see cref="P:Dapfor.Net.Ui.Grid.SerializationState"/> property.</para>
            
            <para>Example of XML serialization:
            <code>
            //The method serializes the grid's state into the XML file
            void XmlSerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    serializer.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void XmlDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    grid.SerializationState = (Grid.GridSerializationState)serializer.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>Example of binary serialization: 
            <code>
            //The method serializes the grid's state into the XML file
            void BinarySerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    formatter.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void BinaryDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    grid.SerializationState = (Grid.GridSerializationState)formatter.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>A very nice feature of the Dapfor.Net Grid is that a programmer may transfer state of one grid into another:
            <code>grid1.SerializationState = grid2.SerializationState;</code>
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.Header.Grid"/>, to which the <see cref="T:Dapfor.Net.Ui.Header"/> belongs.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.ScrollType">
            <summary>
            Gets or sets the horizontal scroll type.
            </summary>
            <value>The type of the scroll.</value>
            <code>
            public void ColumnScrollBehaviour(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                grid.Headers.Add(new Header());
                grid.Headers.Add(new Header());
            
                //Scroll columns each time when the horizontal scroll changes
                grid.Headers[0].ScrollType = ColumnScrollType.Normal;
            
                //Scroll columns only if there is no more space on the right on the last visible column
                grid.Headers[1].ScrollType = ColumnScrollType.Optimized;
            }
            </code>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.StretchMode">
            <summary>
            Gets or sets a value, indicating how the widths of the columns in a grid are stretched.
            </summary>
            <value>The stretch mode.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.FixedColumns">
            <summary>
            Gets a count of non-scrollable <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The fixed <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
            <remarks>
            <para>A header is a collection of columns that enables displaying data in data grid's cells. A grid supports one or more headers. When a single header is used, 
            the grid has TreeListView control behavior, just like the Microsoft Windows Explorer. Multiple headers enable separate column management for each hierarchical level. 
            At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means that 
            the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting.</para>
            <para>In programming, headers can be added to the grid by calling <see cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)">Grid.Headers.Add(Header header)</see> method. When a header is added to 
            <see cref="P:Dapfor.Net.Ui.Grid.Headers">Grid.Headers</see> collection, a zero-based index is assigned to it in the hierarchy. When you call <see cref="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)">Header.Add(Column column)</see> method, 
            additional columns are added to a header. After that columns can be accessed with indexer operator. Every header has the following collections of columns:
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Header.VisibleColumns">Header.VisibleColumns</see> - List of visible columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.Columns">Header.Columns</see> - List of ALL columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see> - List of columns, that participate in sorting</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.FixedColumns">Header.FixedColumns</see> - List of non-scrollable columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> - List of grouped columns</item>
            </list>
            </para>
            <para>The same column can be located in different lists. Almost each of the aforementioned lists has <b>Clear()</b> method, that has a specific action when 
            invoked on a certain collection. Specifically, <see cref="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.Clear">Header.GroupedColumns.Clear()</see> removes data grouping in header of a grid. 
            To group data you only have to set <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property to true. If you set this property to true for multiple columns, it will result 
            in multiple grouping and will fill corresponding collection in the data grid header. Such approach can be used in sorting (<see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see>). 
            The number of fixed columns is defined by <see cref="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Count">Header.FixedColumns.Count</see>.</para>
            <code>
            public void FixedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Fixed columns count: {0}", header.FixedColumns.Count);
            
                //Set the number of non-scrollable columns
                header.FixedColumns.Count = 2;
            
                foreach (Column column in header.FixedColumns)
                {
                    Console.WriteLine("Fixed column: id = '{0}'", column.Id);
                }
            
                //All columns in the grid will be scrollable
                header.FixedColumns.Clear();
                Console.WriteLine("Fixed columns count: {0}", header.FixedColumns.Count);
                Console.WriteLine("Columns count: {0}", header.Count);
            }        
            
            //Console output:
            Fixed columns count: 0
            Fixed column: id = 'Column1'
            Fixed column: id = 'Column2'
            Fixed columns count: 0
            Columns count: 3
            </code>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.VisibleColumns">
            <summary>
            Gets a collection of visible <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The visible <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
            <remarks>
            <para>A header is a collection of columns that enables displaying data in data grid's cells. A grid supports one or more headers. When a single header is used, 
            the grid has TreeListView control behavior, just like the Microsoft Windows Explorer. Multiple headers enable separate column management for each hierarchical level. 
            At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means that 
            the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting.</para>
            <para>In programming, headers can be added to the grid by calling <see cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)">Grid.Headers.Add(Header header)</see> method. When a header is added to 
            <see cref="P:Dapfor.Net.Ui.Grid.Headers">Grid.Headers</see> collection, a zero-based index is assigned to it in the hierarchy. When you call <see cref="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)">Header.Add(Column column)</see> method, 
            additional columns are added to a header. After that columns can be accessed with indexer operator. Every header has the following collections of columns:
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Header.VisibleColumns">Header.VisibleColumns</see> - List of visible columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.Columns">Header.Columns</see> - List of ALL columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see> - List of columns, that participate in sorting</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.FixedColumns">Header.FixedColumns</see> - List of non-scrollable columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> - List of grouped columns</item>
            </list>
            </para>
            <para>The same column can be located in different lists. Almost each of the aforementioned lists has <b>Clear()</b> method, that has a specific action when 
            invoked on a certain collection. Specifically, <see cref="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.Clear">Header.GroupedColumns.Clear()</see> removes data grouping in header of a grid. 
            To group data you only have to set <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property to true. If you set this property to true for multiple columns, it will result 
            in multiple grouping and will fill corresponding collection in the data grid header. Such approach can be used in sorting (<see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see>). 
            The number of fixed columns is defined by <see cref="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Count">Header.FixedColumns.Count</see>.</para>
            <code>
            public void VisibleColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                header[1].Visible = false;
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                //Move the last visible column to the beginning
                header.VisibleColumns[1].VisibleIndex = 0;
            
                //Iterate all visible columns
                foreach (Column column in header.VisibleColumns)
                {
                    Console.WriteLine("Visible column: id = '{0}', index = {1}, visible index = {2}", column.Id, column.Index, column.VisibleIndex);
                }
            
                //Make all columns invisible 
                header.VisibleColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            }
            
            //Console output:
            Visible columns count: 3
            Columns count: 3
            Visible columns count: 2
            Visible column: id = 'Column3', index = 2, visible index = 0
            Visible column: id = 'Column1', index = 0, visible index = 1
            Columns count: 3
            Visible columns count: 0
            </code>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.GroupedColumns">
            <summary>
            Gets a collection of grouped <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The grouped <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
            <remarks>
            <para>.Net Grid enables multiple data grouping in headers of the .Net Grid by any columns at any hierarchical level. 
            When data is grouped by a specific column, .Net Grid searches all rows within a group that has similar values. 
            When a group is organized, a row that doesn't contain a data object is added to the data grid. The <b>Row.IsGroup</b> property 
            of such row will always return true, and <b>Row["column id"].Value</b> will return a value by which data is grouped. 
            All rows with values that meet grouping conditions are attached to the newly created group. Before a new data object is added, .Net Grid 
            verifies whether there is any group with the required value on the current hierarchical level. If there is no such group, a new group is created. 
            When the <b>Row.Update()</b> method is invoked, the grid checks whether a row conforms to group value. 
            If there are no more rows in the group, the group is removed from the grid.</para>
            
            <para>In programming the grouping feature can be enabled via the <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property. Sequential invocation of this property for several columns results in 
            data grouping of these columns. The column with grouping remains visible unless <see cref="P:Dapfor.Net.Ui.Column.Visible">Column.Visible</see> property is set to false. 
            Sorting (and multiple sorting) can be enabled or disabled for grouped columns because sorting and grouping are completely independent processes. The list of grouped 
            columns can be viewed with <see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> collection property. A user can also group columns in the data grid. 
            To use this ability the user just needs to drag a column to a special panel on the grid's header. However, this is not possible if height of this panel is set to 0.</para>
            
            <para><b>Grouping and data filtering</b><br/>
            When grouping and filtering are enabled simultaneously, the .Net Grid checks every group for visible rows. If there are no visible rows, the group is filtered. 
            If a single unfiltered row appears, the row of the group also becomes visible.
            <code>
            public void GroupedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            
                header["Column1"].Grouped = true;
                header["Column3"].Grouped = true;
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            
                //Move the last grouped column to the upper level
                header.GroupedColumns[1].GroupIndex = 0;
            
                //Iterate all grouped columns
                foreach (Column column in header.GroupedColumns)
                {
                    Console.WriteLine("Grouped column: id = '{0}', index = {1}, group index = {2}, visible index = {3}", column.Id, column.Index, column.GroupIndex, column.VisibleIndex);
                }
            
                //Ungroup all columns
                header.GroupedColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            }
            
            //Console output:
            Grouped columns count: 0
            Columns count: 3
            Grouped columns count: 2
            Grouped column: id = 'Column3', index = 2, group index = 0, visible index = 2
            Grouped column: id = 'Column1', index = 0, group index = 1, visible index = 0
            Columns count: 3
            Grouped columns count: 0
            </code>
            </para>
            
            
            
            <para><b>Non-event model</b><br/>
            Real-time grouping in non event-driven model is done with <see cref="M:Dapfor.Net.Ui.Row.Update">Row.Update</see> method. 
            <code>
            public void NonEventModelGrouping(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
                grid.Headers[0].Add(new Column("Color"));
                grid.Headers[0].Add(new Column("Price"));
            
                //Group data by color
                grid.Headers[0]["Color"].Grouped = true;
            
                //Populate the grid
                Row blackMercedes = grid.Rows.Add(new object[] { "Mercedes", Color.Black, 25000d });
                Row whiteMercedes = grid.Rows.Add(new object[] { "Mercedes", Color.White, 23000d });
                Row whiteBMW = grid.Rows.Add(new object[] { "BMW", Color.White, 35000d });
            
                //The grid has two groups - 1=&gt; black mercedes 2=&gt; white mercedes and bmw
            
                //The first group has only the black mercedes
                Assert.AreEqual(1, grid.Nodes[0].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[0].Children[0]["Name"].Value);
            
                //The second group has two cars: white mercedes and white bmw
                Assert.AreEqual(2, grid.Nodes[1].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[1].Children[0]["Name"].Value);
                Assert.AreEqual("BMW", grid.Nodes[1].Children[1]["Name"].Value);
            
                //Change color of the white mercedes
                whiteMercedes["Color"].Value = Color.Green;
            
                //Now we have 3 groups. The last contains only the green mercedes
                Assert.AreEqual(1, grid.Nodes[2].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[2].Children[0]["Name"].Value);
                Assert.AreEqual(Color.Green, grid.Nodes[2].Children[0]["Color"].Value);
            }
            </code>
            </para>
            
            <para><b>Event-driven model</b><br/>
            In the event-driven model <see cref="M:Dapfor.Net.Ui.Row.Update">Row.Update</see> method is called every time when a data object sends a notification. Once again we'd like to emphasize the importance 
            of such model as it removes dependency of the business layer on <see cref="N:System.Windows.Forms">System.Windows.Forms</see> controls and on Dapfor assemblies as well.
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.SortedColumns">
            <summary>
            Gets a collection of sorted <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The sorted <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
            <remarks>
            .Net Grid sorting depends on headers. Sorted columns are stored in <see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see>. To enable sorting you have to use 
            <see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see> property. Calling this property for multiple columns sets multiple sorting by these columns. To cancel sorting, 
            call <see cref="M:Dapfor.Net.Ui.Header.SortedColumnCollection.Clear"/>Header.SortedColumns.Clear().
            <code>
            public void SortedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Sorted columns count: {0}", header.GroupedColumns.Count);
            
                header.SortedColumns.Clear();
            
                //Set multiple sort by two columns
                header["Column1"].SortDirection = SortDirection.Ascending;
                header["Column3"].SortDirection = SortDirection.Ascending;
            
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            
                //Change the sort direction
                header["Column3"].SortDirection = SortDirection.Descending;
            
                //Iterate in all sorted columns
                foreach (Column column in header.SortedColumns)
                {
                    Console.WriteLine("Sorted column: id = '{0}', index = {1}, visible index = {2}, sort level = {3}, sort direction = {4}", column.Id, column.Index, column.VisibleIndex, column.SortLevel, column.SortDirection);
                }
            
                //Remove sort
                header.SortedColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            }
            
            //Console output:
            Sorted columns count: 0
            Columns count: 3
            Sorted columns count: 2
            Sorted column: id = 'Column1', index = 0, visible index = 0, sort level = 0, sort direction = Ascending
            Sorted column: id = 'Column3', index = 2, visible index = 2, sort level = 1, sort direction = Descending
            Columns count: 3
            Sorted columns count: 0
            </code>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Count">
            <summary>
            Gets the count of all <see cref="T:Dapfor.Net.Ui.Column"/>s (visible and invisible).
            </summary>
            <value>The count of <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
            <example>
            <code>
            public void VisibleColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                header[1].Visible = false;
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                //Move the last visible column to the beginning
                header.VisibleColumns[1].VisibleIndex = 0;
            
                //Iterate all visible columns
                foreach (Column column in header.VisibleColumns)
                {
                    Console.WriteLine("Visible column: id = '{0}', index = {1}, visible index = {2}", column.Id, column.Index, column.VisibleIndex);
                }
            
                //Make all columns invisible 
                header.VisibleColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            }
            
            //Console output:
            Visible columns count: 3
            Columns count: 3
            Visible columns count: 2
            Visible column: id = 'Column3', index = 2, visible index = 0
            Visible column: id = 'Column1', index = 0, visible index = 1
            Columns count: 3
            Visible columns count: 0
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Column"/> (visible or invisible) with the specified id.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Column"/> if found. Otherwise <c>null</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Column"/> by the its <see cref="P:Dapfor.Net.Ui.Column.Index"/>.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Column"/> if found. Otherwise <c>null</c></value>
            <remarks>When a column is added, the <see cref="T:Dapfor.Net.Ui.Header"/> attributes an <see cref="P:Dapfor.Net.Ui.Column.Index"/>, which normally is not changed even the <see cref="T:Dapfor.Net.Ui.Column"/> 
            is moved or changes visibility. Note, that the <see cref="P:Dapfor.Net.Ui.Column.Index"/> may be different from the <see cref="P:Dapfor.Net.Ui.Column.VisibleIndex"/>.
            The <see cref="P:Dapfor.Net.Ui.Column.Index"/> is used to show the data is <see cref="T:Dapfor.Net.Ui.Cell"/> when the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> does not support string identifiers 
            (The <see cref="P:Dapfor.Net.Data.IDataAccessor.SupportsIdentifiers"/> property of <see cref="T:Dapfor.Net.Data.IDataAccessor"/> returns <c>false</c>). In the other words, when the types like 
            object[] or <see cref="T:System.Collections.IList"/> are added to the <see cref="P:Dapfor.Net.Ui.Header.Grid"/>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Level">
            <summary>
            Gets a hierarchical level of the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <value>The hierarchical zero-based level if the <see cref="T:Dapfor.Net.Ui.Header"/> is attached to the <see cref="T:Dapfor.Net.Ui.HeaderCollection"/>. Otherwise -1.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Header"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Height">
            <summary>
            Gets the integral height of the <see cref="T:Dapfor.Net.Ui.Header"/>, including heights of the group and the column panels.
            </summary>
            <value>The height of the <see cref="T:Dapfor.Net.Ui.Header"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.ColumnPanelHeight">
            <summary>
            Gets or sets the height of the column panel.
            </summary>
            <value>The height of the column panel.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.GroupPanelHeight">
            <summary>
            Gets or sets the height of the group panel.
            </summary>
            <value>The height of the group panel.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.GroupingEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Dapfor.Net.Ui.Header"/> can group <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value><c>true</c> if this <see cref="T:Dapfor.Net.Ui.Header"/> can group <see cref="T:Dapfor.Net.Ui.Column"/>s; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Spacing">
            <summary>
            Gets the spacing between the header and the first followed row.
            </summary>
            <value>The spacing in pixels.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.FocusedColumn">
             <summary>
             Gets or sets a focused <see cref="T:Dapfor.Net.Ui.Column"/>.
             </summary>
             <value>Focused column.</value>
             <code>
             public void FocusedCellExample(Grid grid)
             {
                 //Add a new header on the top hierarchical level (level 0)
                 Header header = new Header();
                 header.Add(new Column("Name"));
                 header.Add(new Column("Price"));
                 header.Add(new Column("Quantity"));
                 grid.Headers.Add(header);
            
                 //Set the focus mode
                 grid.FocusSettings.Mode = FocusMode.Cell;
            
                 //Add some data objects 
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Focus the cell
                 grid.Rows[0]["Price"].Focused = true;
            
                 Console.WriteLine("Focused row = {0}", grid.FocusedRow.VisibleChildIndex);
                 Console.WriteLine("Focused column = {0}", grid.Headers[0].FocusedColumn.Id);
            
                 //Focus other column
                 grid.Headers[0]["Quantity"].Focused = true;
            
                 Console.WriteLine("The cell[0, 'Quantity'] is {0}", grid.Rows[0]["Quantity"].Focused ? "focused" : "not focused");
             }
             
             //Console output:
             Focused row = 0
             Focused column = Price
             The cell[0, 'Quantity'] is focused
             </code>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Configurable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Header"/> is configurable.
            </summary>
            <value><c>true</c> if configurable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.CanResizeColumns">
            <summary>
            Gets or sets a value indicating whether the end user can resize the <see cref="T:Dapfor.Net.Ui.Column"/>s in this <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <value>
            	<c>true</c> if the end user can resize the <see cref="T:Dapfor.Net.Ui.Column"/>s; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HasFilter">
            <summary>
            Gets a value indicating whether the header has at last one column filter.
            </summary>
            <value>
            	<c>true</c> if this instance has filter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.MergedColums">
            <summary>
            Gets the collection of merged columns.
            </summary>
            <value>The merged columns.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Appearance">
            <summary>
            Gets appearance of <see cref="T:Dapfor.Net.Ui.Header"/> and also even and odd rows.
            </summary>
            <value>Header and row appearance.</value>
            <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
            colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
            <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
            However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
            can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
            properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
            </para>
            <code>
            public void ColumnPanelAppearance(Grid grid)
            {
                //Initialize header and columns
                Header header = new Header();
                header.Add(new Column("Name"));
                header.Add(new Column("Price"));
                header.Add(new Column("Quantity"));
                grid.Headers.Add(header);
            
                //Set appearance for even and odd rows on all hierarchical levels
                grid.Appearance.EvenRows.BackColor = Color.Gray;
                grid.Appearance.OddRows.BackColor = Color.Black;
            
                //Set appearance for even and odd rows on the top hierarchical level
                header.Appearance.EvenRows.BackColor = Color.Gray;
                header.Appearance.OddRows.BackColor = Color.Black;
            
                //Default appearance for all columns 
                header.Appearance.ColumnPanel.ForeColor = Color.Red;
                header.Appearance.ColumnPanel.BackColor = Color.LightSteelBlue;
                header.Appearance.ColumnPanel.GradientEnabled = true;
                header.Appearance.ColumnPanel.GradientDirection = GradientDirection.Vertical;
                header.Appearance.ColumnPanel.GradientEndBackColor = Color.LightGray;
            
                //Appearance of the column 'Price'
                header["Price"].Appearance.CaptionColor.ForeColor = Color.Yellow;
                header["Price"].Appearance.CaptionColor.BackColor = Color.SteelBlue;
                header["Price"].Appearance.CaptionColor.GradientEnabled = true;
                header["Price"].Appearance.CaptionColor.GradientDirection = GradientDirection.Vertical;
                header["Price"].Appearance.CaptionColor.GradientEndBackColor = Color.Gray;
            
            
                //Populate the grid with rows
                grid.Rows.Add(new Product());
                Row row = grid.Rows[0];
            
                //Set a back color for the cell
                row["Price"].Appearance.BackColor = Color.Green;
            }        
            </code>
            
            <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
            <code>
            grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
            {
                //custom paint...
                e.Appearance.BackColor = Color.Red;
                e.Font = SystemFonts.MenuFont;
            }
            </code>
            </para>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.Columns">
            <summary>
            Gets a collection of all available <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The collection of <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
            <remarks>This property has been added only for the desing-time integration reasonnes to generate the code in the InitializeComponent() methods of user-defined controls. 
            The collection provides the methods to add new <see cref="T:Dapfor.Net.Ui.Column"/>s to the <see cref="T:Dapfor.Net.Ui.Header"/> and enumerate them. 
            The <see cref="T:Dapfor.Net.Ui.Header"/> has the same functionality and we recommend to use it.
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.Header.HeaderSerializationState">
            <summary>
            Header serialization state
            </summary>
            <remarks>
            <para>Data serialization is a process of saving user preferences for a grid, such as colors, columns location, grouping, sorting and other data into an archive for further 
            deserialization. For example, this feature may be useful when you restart your application. In general, this procedure is very complex and requires familiarity with 
            XML or binary archives. Besides that, a programmer sometimes fails to save state of the whole application, which results in loss of data and user preferences</para>
            
            <para>We provide you with a very convenient and efficient way to save and restore the grid's state. The .Net Grid supports serialization in XML as well as 
            in binary formats via the <see cref="P:Dapfor.Net.Ui.Grid.SerializationState"/> property. The object returned by this property implements <see cref="T:System.Xml.Serialization.IXmlSerializable"/> 
            and <see cref="T:System.Runtime.Serialization.ISerializable"/> interfaces which allow it to be serialized into XML or binary files. During deserialization this object is restored from these 
            files and is passed to the grid via the Grid.SerializationState property.</para>
            
            <para>Example of XML serialization:
            <code>
            //The method serializes the grid's state into the XML file
            void XmlSerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    serializer.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void XmlDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Grid.GridSerializationState));
                    grid.SerializationState = (Grid.GridSerializationState)serializer.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>Example of binary serialization: 
            <code>
            //The method serializes the grid's state into the XML file
            void BinarySerialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    formatter.Serialize(fs, grid.SerializationState);
                }
            }
            
            //The method deserializes the grid's state from the XML file
            void BinaryDeserialization(Grid grid, string fileName)
            {
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    BinaryFormatter formatter = new BinaryFormatter();
                    grid.SerializationState = (Grid.GridSerializationState)formatter.Deserialize(fs);
                }
            }
            </code>
            </para>
            <para>A very nice feature of the Dapfor.Net Grid is that a programmer may transfer state of one grid into another:
            <code>grid1.SerializationState = grid2.SerializationState;</code>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.HeaderSerializationState.#ctor">
            <summary>
            Default constructor. Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Header.HeaderSerializationState"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.HeaderSerializationState.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Header.HeaderSerializationState"/> class and deserializes data from binary archive.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.HeaderSerializationState.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.HeaderSerializationState.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.HeaderSerializationState.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.HeaderSerializationState.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:Dapfor.Net.Ui.Header.FixedColumnCollection">
            <summary>
            Collection of non-scrollable columns in <see cref="T:Dapfor.Net.Ui.Header"/>
            </summary>
            <remarks>
            <para>A header is a collection of columns that enables displaying data in data grid's cells. A grid supports one or more headers. When a single header is used, 
            the grid has TreeListView control behavior, just like the Microsoft Windows Explorer. Multiple headers enable separate column management for each hierarchical level. 
            At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means that 
            the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting.</para>
            <para>In programming, headers can be added to the grid by calling <see cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)">Grid.Headers.Add(Header header)</see> method. When a header is added to 
            <see cref="P:Dapfor.Net.Ui.Grid.Headers">Grid.Headers</see> collection, a zero-based index is assigned to it in the hierarchy. When you call <see cref="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)">Header.Add(Column column)</see> method, 
            additional columns are added to a header. After that columns can be accessed with indexer operator. Every header has the following collections of columns:
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Header.VisibleColumns">Header.VisibleColumns</see> - List of visible columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.Columns">Header.Columns</see> - List of ALL columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see> - List of columns, that participate in sorting</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.FixedColumns">Header.FixedColumns</see> - List of non-scrollable columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> - List of grouped columns</item>
            </list>
            </para>
            <para>The same column can be located in different lists. Almost each of the aforementioned lists has <b>Clear()</b> method, that has a specific action when 
            invoked on a certain collection. Specifically, <see cref="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.Clear">Header.GroupedColumns.Clear()</see> removes data grouping in header of a grid. 
            To group data you only have to set <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property to true. If you set this property to true for multiple columns, it will result 
            in multiple grouping and will fill corresponding collection in the data grid header. Such approach can be used in sorting (<see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see>). 
            The number of fixed columns is defined by <see cref="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Count">Header.FixedColumns.Count</see>.</para>
            <code>
            public void FixedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Fixed columns count: {0}", header.FixedColumns.Count);
            
                //Set the number of non-scrollable columns
                header.FixedColumns.Count = 2;
            
                foreach (Column column in header.FixedColumns)
                {
                    Console.WriteLine("Fixed column: id = '{0}'", column.Id);
                }
            
                //All columns in the grid will be scrollable
                header.FixedColumns.Clear();
                Console.WriteLine("Fixed columns count: {0}", header.FixedColumns.Count);
                Console.WriteLine("Columns count: {0}", header.Count);
            }        
            
            //Console output:
            Fixed columns count: 0
            Fixed column: id = 'Column1'
            Fixed column: id = 'Column2'
            Fixed columns count: 0
            Columns count: 3
            </code>
            </remarks>
            <threadsafety>The class is not thread safe</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.FixedColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.FixedColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.FixedColumnCollection.Clear">
            <summary>
            Sets the count of non-scrollable columns to 0. This method does not removes <see cref="T:Dapfor.Net.Ui.Column"/>s from the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Count">
            <summary>
            Gets or sets a count of fixed <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The count of fixed <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Column"/> at the specified index.
            </summary>
            <value><see cref="T:Dapfor.Net.Ui.Column"/> if found. Otherwise <c>null</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Header.GroupedColumnCollection">
            <summary>
            Collection of grouped <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <threadsafety>The class is not thread safe</threadsafety>
            <remarks>
            <para>.Net Grid enables multiple data grouping in headers of the .Net Grid by any columns at any hierarchical level. 
            When data is grouped by a specific column, .Net Grid searches all rows within a group that has similar values. 
            When a group is organized, a row that doesn't contain a data object is added to the data grid. The <b>Row.IsGroup</b> property 
            of such row will always return true, and <b>Row["column id"].Value</b> will return a value by which data is grouped. 
            All rows with values that meet grouping conditions are attached to the newly created group. Before a new data object is added, .Net Grid 
            verifies whether there is any group with the required value on the current hierarchical level. If there is no such group, a new group is created. 
            When the <b>Row.Update()</b> method is invoked, the grid checks whether a row conforms to group value. 
            If there are no more rows in the group, the group is removed from the grid.</para>
            
            <para>In programming the grouping feature can be enabled via the <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property. Sequential invocation of this property for several columns results in 
            data grouping of these columns. The column with grouping remains visible unless <see cref="P:Dapfor.Net.Ui.Column.Visible">Column.Visible</see> property is set to false. 
            Sorting (and multiple sorting) can be enabled or disabled for grouped columns because sorting and grouping are completely independent processes. The list of grouped 
            columns can be viewed with <see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> collection property. A user can also group columns in the data grid. 
            To use this ability the user just needs to drag a column to a special panel on the grid's header. However, this is not possible if height of this panel is set to 0.</para>
            
            <para><b>Grouping and data filtering</b><br/>
            When grouping and filtering are enabled simultaneously, the .Net Grid checks every group for visible rows. If there are no visible rows, the group is filtered. 
            If a single unfiltered row appears, the row of the group also becomes visible.
            <code>
            public void GroupedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            
                header["Column1"].Grouped = true;
                header["Column3"].Grouped = true;
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            
                //Move the last grouped column to the upper level
                header.GroupedColumns[1].GroupIndex = 0;
            
                //Iterate all grouped columns
                foreach (Column column in header.GroupedColumns)
                {
                    Console.WriteLine("Grouped column: id = '{0}', index = {1}, group index = {2}, visible index = {3}", column.Id, column.Index, column.GroupIndex, column.VisibleIndex);
                }
            
                //Ungroup all columns
                header.GroupedColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Grouped columns count: {0}", header.GroupedColumns.Count);
            }
            
            //Console output:
            Grouped columns count: 0
            Columns count: 3
            Grouped columns count: 2
            Grouped column: id = 'Column3', index = 2, group index = 0, visible index = 2
            Grouped column: id = 'Column1', index = 0, group index = 1, visible index = 0
            Columns count: 3
            Grouped columns count: 0
            </code>
            </para>
            
            
            
            <para><b>Non-event model</b><br/>
            Real-time grouping in non event-driven model is done with <see cref="M:Dapfor.Net.Ui.Row.Update"/> method. 
            <code>
            public void NonEventModelGrouping(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
                grid.Headers[0].Add(new Column("Color"));
                grid.Headers[0].Add(new Column("Price"));
            
                //Group data by color
                grid.Headers[0]["Color"].Grouped = true;
            
                //Populate the grid
                Row blackMercedes = grid.Rows.Add(new object[] { "Mercedes", Color.Black, 25000d });
                Row whiteMercedes = grid.Rows.Add(new object[] { "Mercedes", Color.White, 23000d });
                Row whiteBMW = grid.Rows.Add(new object[] { "BMW", Color.White, 35000d });
            
                //The grid has two groups - 1=&gt; black mercedes 2=&gt; white mercedes and bmw
            
                //The first group has only the black mercedes
                Assert.AreEqual(1, grid.Nodes[0].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[0].Children[0]["Name"].Value);
            
                //The second group has two cars: white mercedes and white bmw
                Assert.AreEqual(2, grid.Nodes[1].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[1].Children[0]["Name"].Value);
                Assert.AreEqual("BMW", grid.Nodes[1].Children[1]["Name"].Value);
            
                //Change color of the white mercedes
                whiteMercedes["Color"].Value = Color.Green;
            
                //Now we have 3 groups. The last contains only the green mercedes
                Assert.AreEqual(1, grid.Nodes[2].Children.Count);
                Assert.AreEqual("Mercedes", grid.Nodes[2].Children[0]["Name"].Value);
                Assert.AreEqual(Color.Green, grid.Nodes[2].Children[0]["Color"].Value);
            }
            </code>
            </para>
            
            <para><b>Event-driven model</b><br/>
            In the event-driven model <see cref="M:Dapfor.Net.Ui.Row.Update"/> method is called every time when a data object sends a notification. Once again we'd like to emphasize the importance 
            of such model as it removes dependency of the business layer on <see cref="N:System.Windows.Forms"/> controls and on Dapfor assemblies as well.
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.#ctor(Dapfor.Net.Ui.Header)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Header.GroupedColumnCollection"/> class.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.Clear">
            <summary>
            Removes all grouped <see cref="T:Dapfor.Net.Ui.Column"/>s. I.e. all columns become ungrouped. This method does not remove <see cref="T:Dapfor.Net.Ui.Column"/>s from the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.GroupedColumnCollection.Count">
            <summary>
            Gets the count of grouped <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The count of grouped <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.GroupedColumnCollection.Item(System.Int32)">
            <summary>
            Gets the grouped <see cref="T:Dapfor.Net.Ui.Column"/> at the specified index.
            </summary>
            <value><see cref="T:Dapfor.Net.Ui.Column"/> if found. Otherwise <c>null</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Header.SortedColumnCollection">
            <summary>
            Collection of sorted <see cref="T:Dapfor.Net.Ui.Column"/>s
            </summary>
            <threadsafety>The class is not thread safe</threadsafety>
            <remarks>
            .Net Grid sorting depends on headers. Sorted columns are stored in <see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see>. To enable sorting you have to use 
            <see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see> property. Calling this property for multiple columns sets multiple sorting by these columns. To cancel sorting, 
            call <see cref="M:Dapfor.Net.Ui.Header.SortedColumnCollection.Clear"/>Header.SortedColumns.Clear().
            <code>
            public void SortedColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Sorted columns count: {0}", header.GroupedColumns.Count);
            
                header.SortedColumns.Clear();
            
                //Set multiple sort by two columns
                header["Column1"].SortDirection = SortDirection.Ascending;
                header["Column3"].SortDirection = SortDirection.Ascending;
            
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            
                //Change the sort direction
                header["Column3"].SortDirection = SortDirection.Descending;
            
                //Iterate in all sorted columns
                foreach (Column column in header.SortedColumns)
                {
                    Console.WriteLine("Sorted column: id = '{0}', index = {1}, visible index = {2}, sort level = {3}, sort direction = {4}", column.Id, column.Index, column.VisibleIndex, column.SortLevel, column.SortDirection);
                }
            
                //Remove sort
                header.SortedColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Sorted columns count: {0}", header.SortedColumns.Count);
            }
            
            //Console output:
            Sorted columns count: 0
            Columns count: 3
            Sorted columns count: 2
            Sorted column: id = 'Column1', index = 0, visible index = 0, sort level = 0, sort direction = Ascending
            Sorted column: id = 'Column3', index = 2, visible index = 2, sort level = 1, sort direction = Descending
            Columns count: 3
            Sorted columns count: 0
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.SortedColumnCollection.Clear">
            <summary>
            Clears the sort in the <see cref="T:Dapfor.Net.Ui.Header"/>. All columns became unsorted. This method does not remove <see cref="T:Dapfor.Net.Ui.Column"/>s from the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.SortedColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.SortedColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.SortedColumnCollection.Count">
            <summary>
            Gets the count of sorted <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The count of sorted <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.SortedColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Column"/> at the specified sort level.
            </summary>
            <value></value>
        </member>
        <member name="T:Dapfor.Net.Ui.Header.VisibleColumnCollection">
            <summary>
            Collection of visible <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <remarks>
            <para>A header is a collection of columns that enables displaying data in data grid's cells. A grid supports one or more headers. When a single header is used, 
            the grid has TreeListView control behavior, just like the Microsoft Windows Explorer. Multiple headers enable separate column management for each hierarchical level. 
            At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means that 
            the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting.</para>
            <para>In programming, headers can be added to the grid by calling <see cref="M:Dapfor.Net.Ui.HeaderCollection.Add(Dapfor.Net.Ui.Header)">Grid.Headers.Add(Header header)</see> method. When a header is added to 
            <see cref="P:Dapfor.Net.Ui.Grid.Headers">Grid.Headers</see> collection, a zero-based index is assigned to it in the hierarchy. When you call <see cref="M:Dapfor.Net.Ui.Header.Add(Dapfor.Net.Ui.Column)">Header.Add(Column column)</see> method, 
            additional columns are added to a header. After that columns can be accessed with indexer operator. Every header has the following collections of columns:
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Header.VisibleColumns">Header.VisibleColumns</see> - List of visible columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.Columns">Header.Columns</see> - List of ALL columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.SortedColumns">Header.SortedColumns</see> - List of columns, that participate in sorting</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.FixedColumns">Header.FixedColumns</see> - List of non-scrollable columns</item>
            <item><see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> - List of grouped columns</item>
            </list>
            </para>
            <para>The same column can be located in different lists. Almost each of the aforementioned lists has <b>Clear()</b> method, that has a specific action when 
            invoked on a certain collection. Specifically, <see cref="M:Dapfor.Net.Ui.Header.GroupedColumnCollection.Clear">Header.GroupedColumns.Clear()</see> removes data grouping in header of a grid. 
            To group data you only have to set <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property to true. If you set this property to true for multiple columns, it will result 
            in multiple grouping and will fill corresponding collection in the data grid header. Such approach can be used in sorting (<see cref="P:Dapfor.Net.Ui.Column.SortDirection">Column.SortDirection</see>). 
            The number of fixed columns is defined by <see cref="P:Dapfor.Net.Ui.Header.FixedColumnCollection.Count">Header.FixedColumns.Count</see>.</para>
            /// <code>
            public void VisibleColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                header[1].Visible = false;
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                //Move the last visible column to the beginning
                header.VisibleColumns[1].VisibleIndex = 0;
            
                //Iterate all visible columns
                foreach (Column column in header.VisibleColumns)
                {
                    Console.WriteLine("Visible column: id = '{0}', index = {1}, visible index = {2}", column.Id, column.Index, column.VisibleIndex);
                }
            
                //Make all columns invisible 
                header.VisibleColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            }
            
            //Console output:
            Visible columns count: 3
            Columns count: 3
            Visible columns count: 2
            Visible column: id = 'Column3', index = 2, visible index = 0
            Visible column: id = 'Column1', index = 0, visible index = 1
            Columns count: 3
            Visible columns count: 0
            </code>
            </remarks>
            <threadsafety>The class is not thread safe</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.VisibleColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.VisibleColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.VisibleColumnCollection.Clear">
            <summary>
            Hides all <see cref="T:Dapfor.Net.Ui.Column"/>s. This method does not removes <see cref="P:Dapfor.Net.Ui.Header.Columns"/> from the header, but just hides them.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.VisibleColumnCollection.Count">
            <summary>
            Gets a count of visible <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.VisibleColumnCollection.Item(System.Int32)">
            <summary>
            Gets the visible <see cref="T:Dapfor.Net.Ui.Column"/> at the specified index.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Column"/> if found. Otherwise <c>null</c>.</value>
            <example>
            <code>
            public void VisibleColumnsExample(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header = new Header();
                header.Add(new Column("Column1"));
                header.Add(new Column("Column2"));
                header.Add(new Column("Column3"));
                grid.Headers.Add(header);
            
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                header[1].Visible = false;
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            
                //Move the last visible column to the beginning
                header.VisibleColumns[1].VisibleIndex = 0;
            
                //Iterate all visible columns
                foreach (Column column in header.VisibleColumns)
                {
                    Console.WriteLine("Visible column: id = '{0}', index = {1}, visible index = {2}", column.Id, column.Index, column.VisibleIndex);
                }
            
                //Make all columns invisible 
                header.VisibleColumns.Clear();
                Console.WriteLine("Columns count: {0}", header.Count);
                Console.WriteLine("Visible columns count: {0}", header.VisibleColumns.Count);
            }
            
            //Console output:
            Visible columns count: 3
            Columns count: 3
            Visible columns count: 2
            Visible column: id = 'Column3', index = 2, visible index = 0
            Visible column: id = 'Column1', index = 0, visible index = 1
            Columns count: 3
            Visible columns count: 0
            </code>
            </example>
        </member>
        <member name="T:Dapfor.Net.Ui.Header.MergedColumnCollection">
            <summary>
            Collection of merged columns
            </summary>
            <code>
            Header header = grid.Headers[0];
            MergedColumn mergedColumn = header.MergedColums.CreateNew("Merged column");
            mergedColumn.Add(grid.Headers[0]["ID2"]);
            mergedColumn.Add(grid.Headers[0]["ID3"]);  
            
            header.ColumnPanelHeight = 36;
            mergedColumn.Height = 18;
            </code>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.MergedColumnCollection.CreateNew(System.String)">
            <summary>
            Creates a new merged column.
            </summary>
            <param name="text">The text to be displayed in merged column.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.MergedColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.MergedColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.MergedColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.MergedColumn"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.MergedColumnCollection.Count">
            <summary>
            Gets the count of merged columns.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Header.HeaderAppearance">
            <summary>
            Appearance of <see cref="T:Dapfor.Net.Ui.Header"/> and also even and odd rows.
            </summary>
            <threadsafety>The class is not thread safe</threadsafety>
            <remarks>
            <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
            colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
            <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
            However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
            can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
            properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
            </para>
            <code>
            public void ColumnPanelAppearance(Grid grid)
            {
                //Initialize header and columns
                Header header = new Header();
                header.Add(new Column("Name"));
                header.Add(new Column("Price"));
                header.Add(new Column("Quantity"));
                grid.Headers.Add(header);
            
                //Set appearance for even and odd rows on all hierarchical levels
                grid.Appearance.EvenRows.BackColor = Color.Gray;
                grid.Appearance.OddRows.BackColor = Color.Black;
            
                //Set appearance for even and odd rows on the top hierarchical level
                header.Appearance.EvenRows.BackColor = Color.Gray;
                header.Appearance.OddRows.BackColor = Color.Black;
            
                //Default appearance for all columns 
                header.Appearance.ColumnPanel.ForeColor = Color.Red;
                header.Appearance.ColumnPanel.BackColor = Color.LightSteelBlue;
                header.Appearance.ColumnPanel.GradientEnabled = true;
                header.Appearance.ColumnPanel.GradientDirection = GradientDirection.Vertical;
                header.Appearance.ColumnPanel.GradientEndBackColor = Color.LightGray;
            
                //Appearance of the column 'Price'
                header["Price"].Appearance.CaptionColor.ForeColor = Color.Yellow;
                header["Price"].Appearance.CaptionColor.BackColor = Color.SteelBlue;
                header["Price"].Appearance.CaptionColor.GradientEnabled = true;
                header["Price"].Appearance.CaptionColor.GradientDirection = GradientDirection.Vertical;
                header["Price"].Appearance.CaptionColor.GradientEndBackColor = Color.Gray;
            
            
                //Populate the grid with rows
                grid.Rows.Add(new Product());
                Row row = grid.Rows[0];
            
                //Set a back color for the cell
                row["Price"].Appearance.BackColor = Color.Green;
            }        
            </code>
            
            <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
            <code>
            grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
            {
                //custom paint...
                e.Appearance.BackColor = Color.Red;
                e.Font = SystemFonts.MenuFont;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HeaderAppearance.EvenRows">
             <summary>
             Gets the <see cref="P:Dapfor.Net.Ui.Header.Appearance"/> of even <see cref="T:Dapfor.Net.Ui.Row"/>s, belonging to this <see cref="T:Dapfor.Net.Ui.Header"/>.
             </summary>
             <value>The even row appearance.</value>
             <example>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for the cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HeaderAppearance.OddRows">
             <summary>
             Gets the <see cref="P:Dapfor.Net.Ui.Header.Appearance"/> of odd <see cref="T:Dapfor.Net.Ui.Row"/>s, belonging to this <see cref="T:Dapfor.Net.Ui.Header"/>.
             </summary>
             <value>The odd row appearance.</value>
             <example>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for the cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HeaderAppearance.RowFont">
            <summary>
            Gets or sets the row font to paint <see cref="T:Dapfor.Net.Ui.Row"/>s, belonging to this header.
            </summary>
            <value>The row font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HeaderAppearance.ColumnPanel">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.Header.Appearance"/> of the column panel.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.Header.Appearance"/>.</value>
            <example>
            <code>
            public void ColumnPanelAppearance(Grid grid)
            {
                //Initialize header and columns
                Header header = new Header();
                header.Add(new Column("Name"));
                header.Add(new Column("Price"));
                header.Add(new Column("Quantity"));
                grid.Headers.Add(header);
            
                //Set appearance for even and odd rows on all hierarchical levels
                grid.Appearance.EvenRows.BackColor = Color.Gray;
                grid.Appearance.OddRows.BackColor = Color.Black;
            
                //Set appearance for even and odd rows on the top hierarchical level
                header.Appearance.EvenRows.BackColor = Color.Gray;
                header.Appearance.OddRows.BackColor = Color.Black;
            
                //Default appearance for all columns 
                header.Appearance.ColumnPanel.ForeColor = Color.Red;
                header.Appearance.ColumnPanel.BackColor = Color.LightSteelBlue;
                header.Appearance.ColumnPanel.GradientEnabled = true;
                header.Appearance.ColumnPanel.GradientDirection = GradientDirection.Vertical;
                header.Appearance.ColumnPanel.GradientEndBackColor = Color.LightGray;
            
                //Appearance of the column 'Price'
                header["Price"].Appearance.CaptionColor.ForeColor = Color.Yellow;
                header["Price"].Appearance.CaptionColor.BackColor = Color.SteelBlue;
                header["Price"].Appearance.CaptionColor.GradientEnabled = true;
                header["Price"].Appearance.CaptionColor.GradientDirection = GradientDirection.Vertical;
                header["Price"].Appearance.CaptionColor.GradientEndBackColor = Color.Gray;
            
            
                //Populate the grid with rows
                grid.Rows.Add(new Product());
                Row row = grid.Rows[0];
            
                //Set a back color for the cell
                row["Price"].Appearance.BackColor = Color.Green;
            }
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HeaderAppearance.GroupPanel">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.Header.Appearance"/> of the group panel.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.Header.Appearance"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HeaderAppearance.GroupPanelFont">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> to draw text on the group panel.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HeaderAppearance.ColumnCaptionFont">
            <summary>
            Gets or sets the font to draw text in the column captions.
            </summary>
            <value>The column caption font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.HeaderAppearance.GroupPanelTextAlignment">
            <summary>
            Gets or sets the alignment of a text, painted on the group panel.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Header.ColumnCollection">
            <summary>
            Collection of all available <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <remarks>This collection has been added only for the desing-time integration reasonnes to generate the code in the InitializeComponent() methods of user-defined controls. 
            This class provides the methods to add new <see cref="T:Dapfor.Net.Ui.Column"/>s to the <see cref="T:Dapfor.Net.Ui.Header"/> and enumerate them. The <see cref="T:Dapfor.Net.Ui.Header"/> has the same functionality 
            and we recommend to use it.
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.ColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.ColumnCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.ColumnCollection.Add(Dapfor.Net.Ui.Column)">
            <summary>
            Adds a new <see cref="T:Dapfor.Net.Ui.Column"/> to the end of the collection of <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Header.ColumnCollection.Clear">
            <summary>
            Removes all <see cref="T:Dapfor.Net.Ui.Column"/>s from the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Column"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.ColumnCollection.Count">
            <summary>
            Gets the count of all <see cref="T:Dapfor.Net.Ui.Column"/>s (visible and invisible).
            </summary>
            <value>The count of <see cref="T:Dapfor.Net.Ui.Column"/>s.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.ColumnCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Header.ColumnCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="F:Dapfor.Net.Editors.ModalColorButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.ModalColorButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.ModalColorButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Editors.ModalColorButton.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The border style.</value>
        </member>
        <member name="P:Dapfor.Net.Editors.ModalColorButton.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="E:Dapfor.Net.Editors.ModalColorButton.ColorChanged">
            <summary>
            Occurs when the color is changed.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.LogViewer">
            <summary>
            A thread-safe control to display log messages. 
            </summary>
            <remarks> Besides text messages, programmer can associate with data any object that can carry extended information. For example, it can be a price snapshot, quantity value of a product or a pointer to the product object. When a programmer analyzes a log file, he can not just review messages, but also vizw product characteristics that can be dynamically changed. There are several possibilities of object association: 
            <list type="bullet">
            <item>Creating a hierarchical representation of associated object's properties and its values</item>
            <item>Displaying a list of properties with its values in a popup tooltip</item>
            <item>Transferring an object associated with message to the .Net <see cref="T:Dapfor.Net.Diagnostics.Inspector"/> for detailed viewing and editing</item>
            </list>
            It is important to mention, that the logger enables detailed viewing of state of whole application or its most important parts at the logging time.
            <para>Memory consumption of the <see cref="T:Dapfor.Net.Diagnostics.LogViewer"/> is about 150-160 bytes per message. The maximum quantity of the lines in the grid can be limited via <see cref="P:Dapfor.Net.Diagnostics.LogViewer.MaxRowCount"/> = MAX_VALUE. If the MAX_VALUE is exceeded, older messages are not displayed.</para>
            <para>Besides that, memory consumption depends on size and type of object that can be stored together with the log entry. On the average, for simple objects this size equals 30-40 bytes per message. From the practical point of view, when the number of rows is limited to 100,000, memory consumption should not exceed 60-100 MB per 1,000,000 messages.</para>
            </remarks>
            <example>
            <code>
            public enum Way
            {
                Buy,
                Sell,
            }
            
            public sealed class Quote
            {
                private readonly long qty;
                private readonly decimal price;
                private readonly Way way;
            	
                public Quote(long qty, decimal price, Way way)
                {
                    this.qty = qty;
                    this.price = price;
                    this.way = way;
                }
            
                public long Qty
                {
                    get { return qty; }
                }
                public decimal Price
                {
            	    get { return price; }
                }
                public Way Way
                {
                    get { return way; }
                }
            }
            
            Logger.Info("Hey, I just got a new price", new Quote(31911, 41, Way.Buy));
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.LogViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Diagnostics.LogViewer"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.LogViewer.OnResize(System.EventArgs)">
            <summary>Called when the control is resized.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.LogViewer.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.LogViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.LogViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.LogViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.Grid">
            <summary>
            Gets the grid used in the logger.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.DisplayInspector">
            <summary>
            Gets or sets a value indicating whether the logger can invoke the .Net Inspector.
            </summary>
            <value><c>true</c> if it can display <see cref="T:Dapfor.Net.Diagnostics.Inspector"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.DisplayToolbar">
            <summary>
            Gets or sets a value indicating whether the toolbar should be displayed.
            </summary>
            <value><c>true</c> if the toolbar is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.InspectingStyle">
            <summary>
            Gets or sets a style, indicating how the Logger will display the extended information.
            </summary>
            <value>The inspecting style.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.MaxRowCount">
            <summary>
            Gets or sets the max row count that can be displayed in the logger.
            </summary>
            <value>The max row count.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.DateFormat">
            <summary>
            Gets or sets the date format. Default value is "HH:mm:ss.fff"
            </summary>
            <value>The date format.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.Filter">
            <summary>
            Gets or sets the filter. Default value is "*"
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.ShowInfo">
            <summary>
            Gets or sets a value indicating whether the messages with the 'Info' severity should be displayed.
            </summary>
            <value><c>true</c> if the messages are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.ShowDebug">
            <summary>
            Gets or sets a value indicating whether the messages with the 'Debug' severity should be displayed.
            </summary>
            <value><c>true</c> if the messages are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.ShowWarning">
            <summary>
            Gets or sets a value indicating whether the messages with the 'Warning' severity should be displayed.
            </summary>
            <value><c>true</c> if the messages are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.ShowError">
            <summary>
            Gets or sets a value indicating whether the messages with the 'Error' severity should be displayed.
            </summary>
            <value><c>true</c> if the messages are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.ShowFatal">
            <summary>
            Gets or sets a value indicating whether the messages with the 'Fatal' severity should be displayed.
            </summary>
            <value><c>true</c> if the messages are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.HeaderAppearance">
            <summary>
            Gets the header appearance.
            </summary>
            <value>The header appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.EvenRowsAppearance">
            <summary>
            Gets the even rows appearance.
            </summary>
            <value>The even rows appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.OddRowsAppearance">
            <summary>
            Gets the odd rows appearance.
            </summary>
            <value>The odd rows appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogViewer.Readonly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Diagnostics.LogViewer"/> can modify the extented data.
            </summary>
            <value><c>true</c> if readonly; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.InspectingStyle">
            <summary>
            A style that specifies how will <see cref="T:Dapfor.Net.Diagnostics.LogViewer">.Net Logger</see> display extended information.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.InspectingStyle.Disabled">
            <summary>
            The extended information is not displayed
            </summary>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.InspectingStyle.Tooltip">
            <summary>
            The extended information is displayed in the tooltip
            </summary>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.InspectingStyle.Hierarchical">
            <summary>
            The extended information is displayed as chindren rows of the log message
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.ICustomSort">
             <summary>
             Defines an interface to order or sort <see cref="T:Dapfor.Net.Ui.Row"/>s. 
             </summary>
             <remarks>
             <code>
             class MyCystomSort : ICustomSort
             {
                 public int Compare(Row row1, Row row2, string fieldId, object value1, object value2, int defaultResult)
                 {
                     string v1 = value1.ToString();
                     string v2 = value2.ToString();
            
                     if (v1 == "some value") return -1;
                     if (v2 == "some value") return 1;
                     return defaultResult;
                 }
             }
             
             ...
             grid.CustomSort = new MyCystomSort();
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.ICustomSort.Compare(Dapfor.Net.Ui.Row,Dapfor.Net.Ui.Row,System.String,System.Object,System.Object,System.Int32)">
            <summary>
            Compares the row1 with row2 and returns an integer that indicates whether the row1 precedes, follows, or occurs in the same position in the sort order as the row2.
            </summary>
            <param name="row1">The row1.</param>
            <param name="row2">The row2.</param>
            <param name="fieldId">The field identifier.</param>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="defaultResult">The default result.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero row1 instance is less than row2. Zero row1 instance is equal to row2. Greater than zero row1 instance is greater than row2. </returns>
        </member>
        <member name="F:Dapfor.Net.Internal.Licensing.LicensedComponentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.Licensing.LicensedComponentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Internal.Licensing.LicensedComponentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Data.DataRowAccessor">
             <summary>
             Wraps an object of the <see cref="T:System.Data.DataRow"/> type.
             </summary>
             <remarks>Usually this class enables the grid working with data tables.
             <code>
             void SetDataSource(Grid grid)
             {
                 DataSet dataSet = new DataSet();
                 dataSet.ReadXml("test.xml");
                 DataTable employee = dataSet.Tables["Employee"];
            
                 grid.DataSource = employee;
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.DataRowAccessor.#ctor(System.Data.DataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.CustomTypeDescriptorAccessor"/> class.
            </summary>
            <param name="dataObject">The data object.</param>
            <exception cref="T:System.ArgumentNullException">Raised if the <c>dataObject</c> is null.</exception>
        </member>
        <member name="M:Dapfor.Net.Data.DataRowAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.DataRowAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.DataRowAccessor.FireFieldChanged(Dapfor.Net.Data.IDataField)">
            <summary>
            Fires the field changed.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="E:Dapfor.Net.Data.DataRowAccessor.FieldChanged">
            <summary>
            Occurs when a field of the row is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.DataRowAccessor.Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.DataRowAccessor.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.DataRowAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether the access to the fields of the data object by their field identifier is available.
            </summary>
            <value>
            	Always <c>true</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.DataRowAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value><c>true</c> if the <c>dataObject</c> implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.DataRowAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.DataRowAccessor.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>The underlying data object.</value>
        </member>
        <member name="P:Dapfor.Net.Data.DataRowAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="T:Dapfor.Net.Exceptions.DapforException">
            <summary>
            Base exception
            </summary>
        </member>
        <member name="M:Dapfor.Net.Exceptions.DapforException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Exceptions.DapforException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Dapfor.Net.Exceptions.DapforException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Exceptions.DapforException"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Exceptions.DapforException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Exceptions.DapforException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Dapfor.Net.Exceptions.DapforException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Exceptions.DapforException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Dapfor.Net.Ui.Preferences">
             <summary>
             Provides <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/> default preferences.
             </summary>
             <remarks>
             <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
             colors via via <see cref="T:Dapfor.Net.Ui.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
             <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
             However, these preferences can be overridden for every grid separately via <see cref="T:Dapfor.Net.Ui.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
             can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
             properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
             </para>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             
             <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
             <code>
             grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
             {
                 //custom paint...
                 e.Appearance.BackColor = Color.Red;
                 e.Font = SystemFonts.MenuFont;
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.Grid">
            <summary>
            Gets the default preferences of the <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/>.
            </summary>
            <value>Default perefences.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Preferences.PreferencesGrid">
            <summary>
            Default preferences of the <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/>
            </summary>
            <example> How to customize UI elements of the Grid
            <code>
            public void HowToCustomizeAppearance(Grid grid)
            {
                //Set default background color for even rows in all grids
                Preferences.Grid.EvenRowsAppearance.BackColor = Color.White;
            
                //Create headers and columns
                Header header1 = new Header();
                Column column = new Column("SomeId");
                //Show icons in all cells, belong to this column
                column.CaptionImage = Image.FromFile("SomeImage.jpg");
                header1.Add(column);
            
                //Add headers to the grid
                Header header2 = new Header();
                grid.Headers.Add(header1);
                grid.Headers.Add(header2);
            
                //Add a new row to the grid
                Row row = grid.Rows.Add(new SomeObject());
            
                //Change default behavior and set a new text color for the already added row
                row.Appearance.ForeColor = Color.Green;
            
                //Change the color only for the specified cell
                row["SomeId"].Appearance.BackColor = Color.Red;  
            }
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupPanelAppearance">
            <summary>
            Gets the default <see cref="T:Dapfor.Net.Ui.Appearance"/> of the group panel in <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <value>The group panel.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupPanelFont">
            <summary>
            Gets or sets the default <see cref="T:System.Drawing.Font"/> to paint text on the group panel.
            </summary>
            <value>The <see cref="T:System.Drawing.Font"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.ColumnCaptionFont">
            <summary>
            Gets or sets the default <see cref="T:System.Drawing.Font"/> to paint text on the column panel.
            </summary>
            <value>The <see cref="T:System.Drawing.Font"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupPanelTextAlignment">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.ContentAlignment"/> to paint the text on the group panel.
            </summary>
            <value>The group panel text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupPanelText">
            <summary>
            Gets or sets the default text, which is shown on the group panel of the <see cref="T:Dapfor.Net.Ui.Header"/> when it does not contain grouped <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The text.</value>
            <exception cref="T:System.ArgumentNullException">Thrown if the <c>value</c> is null.</exception>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.ColumnPanelAppearance">
            <summary>
            Gets the default <see cref="T:Dapfor.Net.Ui.Appearance"/> of the column panel in <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <value>The group panel.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.ColumnPanelHeight">
            <summary>
            Gets or sets the default height of the column panel.
            </summary>
            <value>The height of the column panel.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.MergedColumnHeight">
            <summary>
            Gets or sets the default height of the merged column panel.
            </summary>
            <value>The height of the merged column panel.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupPanelHeight">
            <summary>
            Gets or sets the height of the group panel.
            </summary>
            <value>The height of the group panel.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.ColumnMinimalWidth">
            <summary>
            Gets or sets the minimal width <see cref="T:Dapfor.Net.Ui.Column"/>s in the <see cref="T:Dapfor.Net.Ui.Header"/>.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.RowMinimalHeight">
            <summary>
            Gets or sets the minimal height of <see cref="T:Dapfor.Net.Ui.Row"/>s in the <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/>.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.ColumnDefaultWidth">
            <summary>
            Gets or sets the default width of the <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <value>The width in pixels.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupRowAppearance">
             <summary>
             Gets the default appearance of the group <see cref="T:Dapfor.Net.Ui.Row"/>
             </summary>
             <value>The <see cref="T:Dapfor.Net.Ui.Appearance"/>.</value>
             <remarks>
             <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
             colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
             <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
             However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
             can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
             properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
             </para>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             
             <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
             <code>
             grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
             {
                 //custom paint...
                 e.Appearance.BackColor = Color.Red;
                 e.Font = SystemFonts.MenuFont;
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.EvenRowsAppearance">
             <summary>
             Gets default appearance of even <see cref="T:Dapfor.Net.Ui.Row"/>s
             </summary>
             <value>The <see cref="T:Dapfor.Net.Ui.Appearance"/>.</value>
             <remarks>
             <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
             colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
             <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
             However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
             can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
             properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
             </para>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             
             <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
             <code>
             grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
             {
                 //custom paint...
                 e.Appearance.BackColor = Color.Red;
                 e.Font = SystemFonts.MenuFont;
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.OddRowsAppearance">
             <summary>
             Gets default appearance of odd <see cref="T:Dapfor.Net.Ui.Row"/>s
             </summary>
             <value>The <see cref="T:Dapfor.Net.Ui.Appearance"/>.</value>
             <remarks>
             <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
             colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
             <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
             However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="T:Dapfor.Net.Ui.Column"/> 
             can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
             properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
             </para>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             
             <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
             <code>
             grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
             {
                 //custom paint...
                 e.Appearance.BackColor = Color.Red;
                 e.Font = SystemFonts.MenuFont;
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.FocusColor">
             <summary>
             Gets or sets the color of the focused <see cref="T:Dapfor.Net.Ui.Row"/> or <see cref="T:Dapfor.Net.Ui.Cell"/>.
             </summary>
             <remarks>The <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/> supports alpha channel for selected or focused rows and cells. 
             This approach permits to show the initial background color for that rows and cells.</remarks>
             <value>The color of the focused <see cref="T:Dapfor.Net.Ui.Row"/>.</value>
             <example>How to set transparent focus
             <code>
             public void HowToSetSemiTransparentFocus(Grid grid)
             {
                 //Globally for new created grids:
                 Preferences.Grid.FocusColor = Color.FromArgb(40, Color.Blue);
            
                 //Or individually for each grid:
                 grid.Appearance.FocusColor = Color.FromArgb(40, SystemColors.Highlight);
             }
             </code></example>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.SelectionColor">
            <summary>
            Gets or sets the color of the selected <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <remarks>The <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/> supports alpha channel for selected or focused rows and cells. 
            This approach permits to show the initial background color for that rows and cells.</remarks>
            <value>The color of the selected <see cref="T:Dapfor.Net.Ui.Row"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.BackColor">
            <summary>
            Gets or sets the background color of the grid.
            </summary>
            <value>The background color of the grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.HotInspectedObjectColor">
            <summary>
            Gets or sets the color of the row that can be inspected in the Inspector control.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.AddingDataRowColor">
            <summary>
            Gets or sets the color of the Row, which currently adds the data in a DataSource.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.RowSelector">
            <summary>
            Gets the default <see cref="T:Dapfor.Net.Ui.Appearance"/> of the row selector (visual element on the left side of the <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/>, which permits to manipulate the <see cref="T:Dapfor.Net.Ui.Row"/>s, change their height, select them,
            show related images, etc.)
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Appearance"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.RowDefaultHeight">
            <summary>
            Gets or sets a default height of the <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The default height of the row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupRowDefaultHeight">
            <summary>
            Gets or sets a default height of the group <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
            <value>The default height of the group row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.ExpandGroups">
            <summary>
            Gets or sets a value indicating whether the groups, inserting to <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/> are initially expanded.
            </summary>
            <value>
            	<c>true</c> if the groups of the <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/> are initially expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.ColumnOnGroupPanelDefaultHeight">
            <summary>
            Gets or sets the default height of the <see cref="T:Dapfor.Net.Ui.Column"/> on the group panel.
            </summary>
            <value>The height in pixels.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupPanelTextSettings">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.TextSettings"/> to display the <see cref="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.GroupPanelText"/> on the group panel.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.TextSettings"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.SortLevels">
            <summary>
            Gets the max number of sort levels, available in the <see cref="P:Dapfor.Net.Ui.Preferences.Grid"/>.
            </summary>
            <value>The sort levels.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.Preferences.PreferencesGrid.EditorPaintValueSize">
            <summary>
            Gets the size of the surface, where the <see cref="T:System.Drawing.Design.UITypeEditor"/> can paint values.
            </summary>
            <value>The size of the editor paint value.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.Filter">
             <summary>
             Represents a row filter. Can be used with anonymous methods.
             </summary>
             <remarks>
             <example>Demonstrates how to set and use the filter
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 private double price;
            
                 public double Price
                 {
                     get { return price; }
                     set
                     {
                         //If the price is not the same, change it and notify about price changing
                         if (price != value)
                         {
                             price = value;
                             //The event can be raised from any thread. The grid will synchronize thread with GUI without blocking the calling thread.
                             //While painting, sorting or filtering the grid can ask this object in the GUI (!) thread to return the price value.
                             if(PropertyChanged != null)
                             {
                                 PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                             }
                         }
                     }
                 }
            
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             public void HowToSetFilter(Grid grid)
             {
                 //Set a filter that hides all rows, that contain products with price less than 10
                 grid.Filter = new Filter(delegate(Row row)
                 {
                     //There are three ways to get price: 
                     //1. From the Cell through the Value property, which returns a double value: row["Price"].Value
                     //2. Through the IDataAccessor and IDataField: row.DataAccessor["Price"].Value
                     //3. From the data object itself: ((Product)row.DataObject).Price
            
                     if ((double)row["Price"].Value &lt; 10)
                     {
                         //Filter the row
                         return true;
                     }
            
                     //The row is not filtered
                     return false;
                 });
            
                 //Populate the grid
                 Product product1 = new Product();
                 Product product2 = new Product();
            
                 grid.Rows.Add(product1);
                 grid.Rows.Add(product2);
            
                 //Update the product's price
                 //Data objects will notify the Grid, and it will display only the product2. 
                 //The product1 will be hidden
                 product1.Price = 9;
                 product2.Price = 11;
             }
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Filter.#ctor(Dapfor.Net.Ui.Filter.Callback)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.Filter"/> class.
            </summary>
            <threadsafety>All methods are threadsafe.</threadsafety>
            <param name="callback">The callback to be called in the GUI thread when the <see cref="T:Dapfor.Net.Ui.Grid"/> paints the <see cref="T:Dapfor.Net.Ui.Cell"/>s or verifies the visibility of <see cref="T:Dapfor.Net.Ui.Row"/>s 
            or theirs position in the sorted container.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.Filter.IsFiltered(Dapfor.Net.Ui.Row)">
            <summary>
            Determines whether the specified <see cref="T:Dapfor.Net.Ui.Row"/> is filtered.
            </summary>
            <param name="row">The row.</param>
            <returns>
            	<c>true</c> if the specified row is filtered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Filter.NotifyUpdate">
            <summary>
            Notifies the <see cref="T:Dapfor.Net.Ui.Grid"/> that the <see cref="T:Dapfor.Net.Ui.IFilter"/> has been updated.
            </summary>
            <threadsafety>The method is thread safe. The event <see cref="E:Dapfor.Net.Ui.Filter.FilterUpdated"/> may be raised from any thread. If the <see cref="T:Dapfor.Net.Ui.Grid"/> receives 
            it from the non-GUI thread, then it will synchronize the call with the GUI thread in the asynchronous way without blocking the calling thread.</threadsafety>
        </member>
        <member name="E:Dapfor.Net.Ui.Filter.FilterUpdated">
            <summary>
            Occurs when the filter's conditions are changed.
            </summary>
            <remarks>This event is raised to force the <see cref="T:Dapfor.Net.Ui.Grid"/> to verify the state of all inserted <see cref="T:Dapfor.Net.Ui.Row"/>s.</remarks>
            <threadsafety>This event may be raised from any thread. If the <see cref="T:Dapfor.Net.Ui.Grid"/> receives a notification from the non-GUI thread, then it will synchronize
            the calling thread with the GUI thread in the asynchronous way without blocking the calling thread. </threadsafety>
        </member>
        <member name="T:Dapfor.Net.Ui.Filter.Callback">
             <summary>
             A callback that is called by <see cref="T:Dapfor.Net.Ui.Filter"/> to determene whether <see cref="T:Dapfor.Net.Ui.Row"/> is filtered
             </summary>
             <remarks>Demonstrates how to set and use the filter
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 private double price;
            
                 public double Price
                 {
                     get { return price; }
                     set
                     {
                         //If the price is not the same, change it and notify about price changing
                         if (price != value)
                         {
                             price = value;
                             //The event can be raised from any thread. The grid will synchronize thread with GUI without blocking the calling thread.
                             //While painting, sorting or filtering the grid can ask this object in the GUI (!) thread to get a value.
                             if(PropertyChanged != null)
                             {
                                 PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                             }
                         }
                     }
                 }
            
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             public void HowToSetFilter(Grid grid)
             {
                 //Set a filter that hides all rows, that contain products with price less than 10
                 grid.Filter = new Filter(delegate(Row row)
                 {
                     //There are three ways to get price: 
                     //1. From the Cell through the Value property, which returns a double value: row["Price"].Value
                     //2. Through the IDataAccessor and IDataField: row.DataAccessor["Price"].Value
                     //3. From the data object itself: ((Product)row.DataObject).Price
            
                     if ((double)row["Price"].Value &lt; 10)
                     {
                         //Filter the row
                         return true;
                     }
            
                     //The row is not filtered
                     return false;
                 });
            
                 //Populate the grid
                 Product product1 = new Product();
                 Product product2 = new Product();
            
                 grid.Rows.Add(product1);
                 grid.Rows.Add(product2);
            
                 //Update the product's price
                 //Data objects will notify the Grid, and it will display only the product2. 
                 //The product1 will be hidden
                 product1.Price = 9;
                 product2.Price = 11;
             }
             </code>
             </remarks>
        </member>
        <member name="T:Dapfor.Net.Formats.DoubleFormat">
            <summary>
            Formats and parses <see cref="T:System.Double"/> values.
            </summary>
            <remarks>
            <para>A very important feature in .Net Grid is its ability to work directly with application business logic. Business logic is a set of classes that may 
            have certain properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling 
            <see cref="M:System.Object.ToString">Object.ToString()</see> or <see cref="M:System.String.Format(System.String,System.Object[])">String.Format("{0}", value)</see>. However, this approach 
            is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to convert 
            values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a value 
            equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. For application programming 
            it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc.</item>
            <item>In a column: <see cref="P:Dapfor.Net.Ui.Column.Format">Column.Format</see> = 'your format';</item>
            <item>Directly in a cell (this method requires a lot of memory): <see cref="P:Dapfor.Net.Ui.Cell.Format">Cell.Format</see> = 'your format';</item>
            </list>
            </para>
            <para>
            This format can be declared with the <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>. The following example demonstrates this:</para>
            <code>
            public class Product
            {
                private double price;
                
                //With this declaration all double values are formatted with DoubleFormat.
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                }
            }
            
            //Populate the grid and set a specified format for the 'Price' column
            public void PopulateGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
            
                //Another way to set up the format
                grid.Headers[0]["Price"].Format = new DoubleFormat(2, false, false);
            
                //Populate the grid
                grid.Rows.Add(new Product());
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> class with the <see cref="P:Dapfor.Net.Formats.DoubleFormat.Precision"/> set to <c>2</c>, <see cref="P:Dapfor.Net.Formats.DoubleFormat.ShortForm"/> set to <c>false</c> and <see cref="P:Dapfor.Net.Formats.DoubleFormat.ShowZero"/> set to <c>true</c>.
            </summary>
            <example>
            <code>
            void DoubleFormat()
            {
                IFormat format = new DoubleFormat();
                UnboundValueAccessor accessor = new UnboundValueAccessor();
                accessor["Price"].Value = 123456789.123456;
            
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123 456 789.12
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.#ctor(System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> class.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <example>
            <code>
            void DoubleFormat()
            {
                IFormat format = new DoubleFormat(CultureInfo.InvariantCulture);
            
                UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                accessor["Price"].Value = 123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            
                accessor["Price"].Value = -123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123 456 789.12
            -123 456 789.12
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> class.
            </summary>
            <example>
            <code>
            void DoubleFormat()
            {
                IFormat format = new DoubleFormat(4);
                UnboundValueAccessor accessor = new UnboundValueAccessor();
                accessor["Price"].Value = 123456789.123456;
            
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123 456 789,1235
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.#ctor(System.Int32,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="formatProvider">The format provider.</param>
            <example>
            <code>
            void DoubleFormat()
            {
                IFormat format = new DoubleFormat(4, CultureInfo.InvariantCulture);
                UnboundValueAccessor accessor = new UnboundValueAccessor();
                
                accessor["Price"].Value = 123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123 456 789.1235
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="shortForm">if set to <c>true</c> the values will be shown in the short form.</param>
            <param name="showZero">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> will show '0' symbol for the zero values.</param>
            <example>
            <code>
            void DoubleFormat()
            {
                IFormat format = new DoubleFormat(4, true, true);
                UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                accessor["Price"].Value = 123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123,4568 M
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.#ctor(System.Int32,System.Boolean,System.Boolean,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="shortForm">if set to <c>true</c> the values will be shown in the short form.</param>
            <param name="showZero">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> will show '0' symbol for the zero values.</param>
            <param name="formatProvider">The format provider.</param>
            <example>
            <code>
            void DoubleFormat()
            {
                IFormat format = new DoubleFormat(4, true, true, CultureInfo.InvariantCulture);
                UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                accessor["Price"].Value = 123456789.123456;
                Console.WriteLine(format.Format(accessor["Price"]));
            }
            
            //Console output:
            123.4568 M
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.#ctor(Dapfor.Net.Formats.DoubleFormat)">
            <summary>
            Copy constructor. Copies all fields from the original format.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.Format(Dapfor.Net.Data.IDataField)">
            <summary>
            Formats the specified value of the specified data object.
            </summary>
            <param name="dataField">The data field.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.CanParse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Indicates whether the format can parse the specified text to a unformatted value.
            </summary>
            <param name="text">The text.</param>
            <param name="dataField">The data field.</param>
            <returns>
            	<c>true</c> if this instance can parse the specified text; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormat.Parse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Parses the specified text to the value of the specified data object.
            </summary>
            <param name="text">The text to be parsed.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormat.FormatProvider">
            <summary>
            Gets or sets the format provider.
            </summary>
            <value>The format provider.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormat.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormat.ShortForm">
            <summary>
            Gets or sets a value indicating whether the value is shown in short form.
            </summary>
            <value><c>true</c> if value is shown in short form; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormat.ShowZero">
            <summary>
            Gets or sets a value indicating whether the symbol '0' is shown when the value equals to zero.
            </summary>
            <value><c>true</c> if '0' is shown when the value equals to zero; otherwise, empty string will be a result of formatting.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormat.DefaultCulture">
            <summary>
            Gets or sets the default culture for all instances of the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> class.
            </summary>
            <value>The default culture.</value>
            <example>This example demonstrates how to set invariant culture as a default format provider for all
            instances of <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> class.
            <code>
            DoubleFormat.DefaultCulture = CultureInfo.InvariantCulture;
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormat.DefaultFormat">
            <summary>
            Gets the default format.
            </summary>
            <value>The default format.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.StartEditReason">
            <summary>
            Initial cause of cell editing
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StartEditReason.Undefined">
            <summary>
            The reason is not specified
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StartEditReason.LButtonClick">
            <summary>
            The end-user has clicked on the cell with the left mouse button
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StartEditReason.RButtonClick">
            <summary>
            The end-user has clicked on the cell with the right mouse button
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StartEditReason.Navigation">
            <summary>
            Editing the new cell is automatically started after the end of editing the previous one.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Editors.StopEditReason">
            <summary>
            Indicates why cell editing is interrupted
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.Undefined">
            <summary>
            The reason is not specified
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.Enter">
            <summary>
            End user typed 'Enter' key
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.SelectValue">
            <summary>
            End user selected value
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.Tab">
            <summary>
            End user typed 'Tab' key
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.ShiftTab">
            <summary>
            End user typed 'Shift+Tab' key
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.Escape">
            <summary>
            End user typed 'Escape' key
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.KillFocus">
            <summary>
            The edit control lost the focus
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.CloseControl">
            <summary>
            The edit control is closed
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.RButtonOutsideClick">
            <summary>
            End user clicked outside the edit control with the right botton
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.LButtonOutsideClick">
            <summary>
            End user clicked outside the edit control with the left botton
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.MButtonOutsideClick">
            <summary>
            End user clicked outside the edit control with the middle botton
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.UserStop">
            <summary>
            The user ends editing the control
            </summary>
        </member>
        <member name="F:Dapfor.Net.Editors.StopEditReason.Exception">
            <summary>
            An exception occurs while cell editing operation.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Editors.IGridEditorService">
            <summary>
            Enables value editing via editors created over cells
            </summary>
            <example> Demonstrates how to customize the drawing in editing cell
            <code>
            public class CheckBoxEditor : UITypeEditorEx
            {
                public override bool GetPaintCellSupported()
                {
                        return true;
                }
                public override void PaintCell(PaintCellEventArgs e)
                {
                    //Prevent from text drawing
                    e.Parts &amp;= e.Parts ^ PaintPart.Text;
            
                    //Default drawing
                    base.PaintCell(e);
            
                    //Dimensions to draw the check box
                    Rectangle bounds = e.Cell.VirtualBounds;
                    int len = bounds.Height;
                    bounds.X += (bounds.Width - len) / 2;
                    bounds.Width = len;
                    
                    //The cell is checked
                    if (Equals(true, e.Cell.Value))
                    {
                        ControlPaint.DrawCheckBox(e.Graphics, bounds, ButtonState.Checked | ButtonState.Flat);
                    }
                    //The cell is not checked
                    else if (Equals(false, e.Cell.Value))
                    {
                        ControlPaint.DrawCheckBox(e.Graphics, bounds, ButtonState.Normal | ButtonState.Flat);
                    }
                    //There is no value in cell
                    else
                    {
                        ControlPaint.DrawCheckBox(e.Graphics, bounds, ButtonState.Normal | ButtonState.Inactive | ButtonState.Flat);
                    }
                }
            
                public override void EditCell(IGridEditorService service, Cell cell)
                {
                    //Updates the value
                    object value = cell.Value;
                    cell.Value = !Equals(true, value);
                }
            
                public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
                {
                    return UITypeEditorEditStyle.None;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Editors.IGridEditorService.CellEditControl(System.Windows.Forms.Control,System.Drawing.Rectangle,Dapfor.Net.Editors.StartEditReason)">
            <summary>
            Displays the specified control over the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="control">The control.</param>
            <param name="bounds">The bounds.</param>
            <param name="reason">The reason, why the editing is started.</param>
            <returns>
            A reason why the edit has been interrupted.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.IGridEditorService.CloseCellControl(Dapfor.Net.Editors.StopEditReason)">
            <summary>
            Ends the edit in the <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Dapfor.Net.Editors.IGridEditorService.EditingCell">
            <summary>
            Gets the currently editing cell.
            </summary>
            <value>The editing cell.</value>
        </member>
        <member name="P:Dapfor.Net.Editors.IGridEditorService.StopEditReason">
            <summary>
            Gets or sets the a reason why the edit was stopped.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:Dapfor.Net.Editors.IGridEditorService.AllowNavigation">
            <summary>
            Gets a value indicating whether navigation between editors is enabled.
            </summary>
            <value><c>true</c> if navigation is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintHeaderEventArgs">
            <summary>
            Provides data and methods for painting the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/>
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Grid"/>, <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Graphics"/> object, or do it vice versa!</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/>. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Grid"/> from default painting by setting 
            the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintHierarchyBackground">
            <summary>
            Atomic operation to paint the hierarchical background. The method <see cref="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.HierarchicalLinesBackground"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintRowSelector">
            <summary>
            Atomic operation to paint the row selector. The method <see cref="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.RowSelector"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintFilterInRowSelector">
            <summary>
            Atomic operation to paint a filter in the row selector. The method <see cref="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Filter"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintSelection">
            <summary>
            Atomic operation to paint the selection. The method <see cref="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Selection"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintGroupPanel">
            <summary>
            Paints the group panel.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHeaderEventArgs.PaintColumnPanel">
            <summary>
            Paints the column panel.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/>.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.ParentRow">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Row"/> to which the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/> is attached. The parameter can be not <c>null</c> for the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/>s on the first and higher hierarchical levels.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.Row"/> object if the hierarchical level of the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/> is greater than 0; Otherwise <c>null</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Bounds">
            <summary>
            Gets the visible bounds of the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/>.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.RowSelectorBounds">
            <summary>
            Gets the bounds of the row selector (visual element on the left side of the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Grid"/>, which permits to manipulate the <see cref="T:Dapfor.Net.Ui.Row"/>s, change their height, select them,
            show related images, etc.).
            </summary>
            <value>The row selector bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.HierarchyBounds">
            <summary>
            Gets the bounds to draw hierarchical buttons, lines etc... (Bounds between the row selector and the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/> or <see cref="T:Dapfor.Net.Ui.Row"/>).
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Render">
            <summary>
            Gets or sets the render that performs basic painting operations
            </summary>
            <value>The render.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Parts">
            <summary>
            Gets or sets the parts of the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Header"/> that are to be painted. 
            </summary>
            <value>The parts.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintHeaderEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHeaderEventArgs.FinalHierarchyBackgroundColor">
            <summary>
            Gets the final color of the hierarchy background. The final color is a result of blending 
            of the <see cref="P:System.Windows.Forms.Control.BackColor"/> and the selection color.
            </summary>
            <value>The final color of the background.</value>
        </member>
        <member name="T:Dapfor.Net.Threading.DelegateTask">
            <summary>
            Executes <see cref="T:Dapfor.Net.Threading.DelegateTask.CallBack">DelegateTask.CallBack</see> in <see cref="T:Dapfor.Net.Threading.IDispatcher"/> thread. Usually used in synchronization with GUI thread.
            </summary>
            <remarks>
            Following examples demonstrates different ways to synchronize threads.
            </remarks>
            <code>
            //Synchronization code
            private void ExplicitSynchronizationCall(object data)
            {
                if(dispatcher.SynchronizationRequired)
                {
                    //Create a task that will be executed in dispatcher thread without blocking the calling thread
                    dispatcher.Dispatch(new SynchronizationTask(data));
                }
                else
                {
                    Console.WriteLine("No synchronization required: object = {0}", data);
                }
            }
            
            //Task implementstion
            private class SynchronizationTask : ITask
            {
                private readonly object data;
                public SynchronizationTask(object data)
                {
                    this.data = data;
                }
            
                public void Execute()
                {
                    Console.WriteLine("Called in the expliceit task: object = {0}", data);
                }
            }
            
            
            //The same example with anonymous methods. 
            private void ImplicitSynchronizationCall(object data)
            {
                if (dispatcher.SynchronizationRequired)
                {
                    //Create a task that will be executed in dispatcher thread without blocking the calling thread
                    dispatcher.Dispatch(new DelegateTask(delegate
                    {
                        Console.WriteLine("Called in the anonymous method: object = {0}", data);
                    }));
                }
                else
                {
                    Console.WriteLine("No synchronization required: object = {0}", data);
                }
            }
            </code>
        </member>
        <member name="M:Dapfor.Net.Threading.DelegateTask.#ctor(Dapfor.Net.Threading.DelegateTask.CallBack)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Threading.DelegateTask"/> class.
            </summary>
            <param name="callBack">The callback delegate to be called in the <see cref="T:Dapfor.Net.Threading.IDispatcher"/>'s thread.</param>
        </member>
        <member name="M:Dapfor.Net.Threading.DelegateTask.Execute">
            <summary>
            Invokes the callback in the <see cref="T:Dapfor.Net.Threading.IDispatcher"/>'s thread.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Threading.DelegateTask.CallBack">
            <summary>
            <see cref="T:Dapfor.Net.Threading.DelegateTask.CallBack"/> delegate that is called in <see cref="T:Dapfor.Net.Threading.IDispatcher"/> thread. Usually used in synchronization with GUI thread.
            </summary>
            <remarks>
            Following example demonstrates how to synchronize threads via anonymous method
            <code>
            private void WriteDataToConsole(object data)
            {
                if (dispatcher.SynchronizationRequired)
                {
                    //Create a task that will be executed in dispatcher thread without blocking the calling thread
                    dispatcher.Dispatch(new DelegateTask(delegate
                    {
                        Console.WriteLine("Called in the anonymous method: object = {0}", data);
                    }));
                }
                else
                {
                    Console.WriteLine("No synchronization required: object = {0}", data);
                }
            }
            </code>
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Editors.AppearanceEditor">
            <summary>
            A dropdown editor to edit <see cref="T:Dapfor.Net.Ui.Appearance"/> object
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.AppearanceEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates whether the specified context supports painting a representation of an object's value within the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Dapfor.Net.Editors.AppearanceEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> value.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.AppearanceEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paints a representation of the value of an object using the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs"/>.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs"/> that indicates what to paint and where to paint it.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.AppearanceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Editors.AppearanceEditor.IsDropDownResizable">
            <summary>
            Gets a value indicating whether drop-down editors should be resizable by the user.
            </summary>
            <value></value>
            <returns>Always true.</returns>
        </member>
        <member name="T:Dapfor.Net.Formats.NamespaceDoc">
            <summary>
            Specifies formats to display values in cells and parse strings to values.
            </summary>
            <remarks>
            <para>A very important feature in .Net Grid is its ability to work directly with application business logic. Business logic is a set of classes that may 
            have certain properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling 
            <see cref="M:System.Object.ToString">Object.ToString()</see> or <see cref="M:System.String.Format(System.String,System.Object[])">String.Format("{0}", value)</see>. However, this approach 
            is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to convert 
            values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a value 
            equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. For application programming 
            it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc.</item>
            <item>In a column: <see cref="P:Dapfor.Net.Ui.Column.Format">Column.Format</see> = 'your format';</item>
            <item>Directly in a cell (this method requires a lot of memory): <see cref="P:Dapfor.Net.Ui.Cell.Format">Cell.Format</see> = 'your format';</item>
            </list>
            </para>
            <para>The .Net Grid looks for IFofmat object to format values or parse strings in the following order: 
            <list type="bullet">
            <item>In a cell</item>
            <item>In a column returned by the <see cref="P:Dapfor.Net.Ui.Cell.Column">Cell.Column</see> property</item>
            <item>In a <see cref="T:Dapfor.Net.Data.IDataField"/> object, returned by the <see cref="P:Dapfor.Net.Ui.Cell.DataField">Cell.DataField</see> property.</item>
            <item>If the format is still not found, the grid uses default format for the specified object type.</item>
            </list>
            </para>
            <para>Some formats greatly simplify application development. For example, StringFormat, enables use of standard patterns for formatting values through <see cref="M:System.String.Format(System.String,System.Object[])">String.Format()</see>: 
            <code>
            column.Format = new StringFormat("### ### ### ###", string.Empty, " $");
            The value 12345 is displayed as "12 345 $"
            </code>
            </para>
            <para>You can also write your own formats for more complex formatting and parsing. Below you will find an example of a hexadecimal format: 
            <code>
            class HexFormat : IFormat
            {
                //Formats numeric value into a hexadecimal string
                public string Format(IDataField dataField)
                {
                    return string.Format("0x{0:X}", dataField.Value);
                }
            
                //Verifies whether the string can be parsed
                public bool CanParse(string text, IDataField dataField)
                {
                    text = text.Replace("0x", "");
                    text = text.Trim();
                    int value;
                    return string.IsNullOrEmpty(text) || int.TryParse(text, NumberStyles.HexNumber, CultureInfo.InvariantCulture, out value);
                }
            
                //Parses the string 
                public void Parse(string text, IDataField dataField)
                {
                    text = text.Replace("0x", "");
                    text = text.Trim();
                    int value = 0;
                    if (string.IsNullOrEmpty(text))
                    {
                        dataField.Value = value;
                    }
                    else if (int.TryParse(text, NumberStyles.HexNumber, CultureInfo.InvariantCulture, out value))
                    {
                        dataField.Value = value;
                    }
                }
            }
            
            //This code shows how to set format into a column
            column.Format = new HexFormat();
            //...
            grid.Rows.Add(new object[]{123}});
            
            
            //This example shows how to declare the format in a property - all grids will display hexadecimal values in cells
            class SomeClass
            {
                private int intValue;
            
                [Format(typeof(HexFormat))]
                public int SomeHexdecimalValue
                {
                    get { return intValue;  }
                    set { intValue = value; }
                }
            }
            //grid.Rows.Add(new SomeClass());
            </code>
            </para>
            <para>.NET Framework has similar system of type conversion based on the <see cref="T:System.ComponentModel.TypeConverter">System.ComponentModel.TypeConverter</see> class that enables conversion of values to strings and vice 
            versa. This conversion system is more complete, but a little bit cumbersome in the context of formating and data parsing. Althrough converters are bulky, such approach 
            enables development of a business logic independently from data presentation. In a perfect case all these mechanisms can be completely based on Microsoft's 
            component model and therefore have no physical dependencies on libraries of other vendors and on the Dapfor libraries as well.</para>
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.Inspector">
            <summary>
            A control that implements .Net Inspector tool for application debugging. 
            </summary>
            <remarks>
            <para><see cref="T:Dapfor.Net.Diagnostics.Inspector">.Net Inspector</see> is a powerful and thread-safe tool for applications debugging. It can be used to inspect business logic level 
            of an application in real-time mode and to alter various application parameters. It's a common practice in software development to put break points 
            in certain lines of code to view and alter values of certain variables in the IDE. When a developer inspects values through the IDE, the application is 
            suspended. It is convenient for debugging simple applications. But if your application has lots of threads and timers, the debugging process becomes a really challenging task.</para>
            <para>.Net Inspector is an additional tool among already existing debugging facilities. Besides displaying values of variables for different objects, .Net Inspector also enables a developer to edit these values via built-in editors at the application run-time. Moreover, a developer can inspect other objects reffered by the inspected object. In other words, a programmer can view the whole business layer logic of the application from the inside.</para>
            <para>Together with the <see cref="T:Dapfor.Net.Diagnostics.LogViewer">logging system</see>, .Net Inspector provides a perfect opportunity to dramatically reduce application debugging time and to conceive the way of the application works.</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Diagnostics.Inspector"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.btnFinder_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown event of the button21 control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.Inspect(System.Object)">
            <summary>
            Inspects the specified data object.
            </summary>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.Inspect(Dapfor.Net.Ui.Row)">
            <summary>
            Inspects the specified <see cref="T:Dapfor.Net.Ui.Row"/> containing the data.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.OnResize(System.EventArgs)">
            <summary>
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.Inspector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.Inspector.ControlInspecting">
            <summary>
            Gets or sets a value indicating whether a .Net Control can be selected as the inspected object.
            </summary>
            <value><c>true</c> if the <see cref="T:System.Windows.Forms.Control"/> can be inspected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.Inspector.GridInspecting">
            <summary>
            Gets or sets a value indicating whether a <b>Dapfor .Net <see cref="T:Dapfor.Net.Ui.Grid"/></b> can be inspected.
            </summary>
            <value><c>true</c> if the <see cref="T:Dapfor.Net.Ui.Grid"/> can be inspected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.Inspector.DataInspecting">
            <summary>
            Gets or sets a value indicating whether the data in the <b>Dapfor .Net <see cref="T:Dapfor.Net.Ui.Grid"/></b> can be inspected..
            </summary>
            <value><c>true</c> if the data can be inspected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.Inspector.Monitoring">
            <summary>
            Gets or sets a value indicating whether the Inspector can monitors changes in <see cref="T:Dapfor.Net.Ui.Grid"/> in order to display data from the focused Row.
            </summary>
            <value><c>true</c> if monitoring is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.Inspector.IsToolbarEnabled">
            <summary>
            Gets or sets a value indicating whether the toolbar allowing the user to select inspected objects throung the UI and navigate between them is enabled.
            </summary>
            <value>
            	<c>true</c> if the toolbar is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.Inspector.RefreshInterval">
            <summary>
            Gets or sets a value, indicating the length of time after which values of the inspected object should be updated.
            </summary>
            <remarks>Generally it is necessary for objects that do not support the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface in order to show the fresh values.</remarks>
            <value>The refresh interval.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.Inspector.IsRefreshEnabled">
            <summary>
            Gets or sets a value indicating whether updating of values of the inspected object is enabled.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Dapfor.Net.Diagnostics.Inspector"/> can refresh values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.Inspector.Filter">
            <summary>
            Gets or sets the for quick search fields of the inspected object.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.Inspector.InspectorAbout.webBrowser1">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Inspector.InspectorAbout.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintMergedColumnEventArgs">
            <summary>
            Provides data to paint merged columns
            </summary>
            <remarks>A new feature in version 2.8.0 enables column merging in groups. Columns can be moved and sorted and their size can be changed within a group. 
            However, the grid doesn�t support moving columns outside the group or inserting a column not belonging to the group into the middle of this group. 
            Merged columns cannot be grouped, but otherwise they behave as regular columns.
            </remarks>
            <code>
            Header header = grid.Headers[0];
            MergedColumn mergedColumn = header.MergedColums.CreateNew("Merged column");
            mergedColumn.Add(grid.Headers[0]["ID2"]);
            mergedColumn.Add(grid.Headers[0]["ID3"]);  
            
            header.ColumnPanelHeight = 36;
            mergedColumn.Height = 18;
            </code>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintMergedColumnEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting of the merged column. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter 
            which defines which UI elements are to be painted. You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Grid"/> from 
            default painting by setting the <see cref="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.VirtualBounds">
            <summary>
            Gets the virtual bounds of <see cref="T:Dapfor.Net.Ui.MergedColumn"/>.
            </summary>
            <value>The virtual bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.VisibleBounds">
            <summary>
            Gets the visible bounds of <see cref="T:Dapfor.Net.Ui.MergedColumn"/>.
            </summary>
            <value>The visible bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.ClipBounds">
            <summary>
            Gets the clip bounds of <see cref="T:Dapfor.Net.Ui.MergedColumn"/>.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Header">
            <summary>
            Gets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Column">
            <summary>
            Gets the merged column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Render">
            <summary>
            Gets or sets the render.
            </summary>
            <value>The render.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Parts">
            <summary>
            Gets or sets the parts.
            </summary>
            <value>The parts.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.PaintMergedColumnEventArgs"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.ImageSettings">
            <summary>
            Gets the image settings.
            </summary>
            <value>The image settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.TextSettings">
            <summary>
            Gets the text settings.
            </summary>
            <value>The text settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintMergedColumnEventArgs.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="F:Dapfor.Net.Internal.TextBoxEx.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.TextBoxEx.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Internal.TextBoxEx.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Formats.FormatAttribute">
            <summary>
            Enables use of standard string patterns to format values in cells.
            </summary>
            <remarks>
            <para>Some formats greatly simplify application development. For example, StringFormat enables use of standard patterns for formatting values through <see cref="M:System.String.Format(System.String,System.Object[])">String.Format()</see>: 
            <code>
            column.Format = new StringFormat("### ### ### ###", string.Empty, " $");
            The value 12345 is displayed as "12 345 $"
            </code>
            </para>
            <para>The following example demonstrates how to declare string pattern for a class property:
            <code>
            public class Product
            {
                private DateTime maturity;
                
                [Format("yyyy-MM-dd")]
                public DateTime Maturity
                {
                    get { return maturity; }
                }
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Formats.FormatAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.FormatAttribute"/> class.
             </summary>
             <param name="formatString">This is a string that is passed to the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See MSDN for more information.</param>
             <example>
             <code>
             public class Product
             {
                 private DateTime maturity;
            
                 [Format("yyyy-MM-dd")]
                 public DateTime Maturity
                 {
                     get { return maturity; }
                     set { maturity = value; }
                 }
             }
            
             public void PopulateGrid(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Maturity"));
            
                 Product product = new Product();
                 product.Maturity = new DateTime(2009, 10, 20);
            
                 grid.Rows.Add(product);
            
                 Console.WriteLine("The cell displays the text: {0}", grid.Rows[0]["Maturity"].Text);
             }
             
             //Console output:
             The cell displays the text: 2009-10-20
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Formats.FormatAttribute.#ctor(System.Type)">
             <summary>
             Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.FormatAttribute"/> class.
             </summary>
             <param name="formatType">Type of the format.</param>
             <example>
             <code>
             //Some data object
             public class File
             {
                 private long size;
            
                 [Format(typeof(SizeCustomFormat))]
                 public long Size
                 {
                     get { return size; }
                     set { size = value; }
                 }
             }
             
             //Custom format
             public class SizeCustomFormat : IFormat
             {
                 public string Format(IDataField dataField)
                 {
                     decimal value = Convert.ToDecimal(dataField.Value);
                     value = Decimal.Ceiling(value/1024);
             
                     return value != 0 ? string.Format("{0:n0} Ko", value) : string.Empty;
                 }
             
                 public bool CanParse(string text, IDataField dataField)
                 {
                     return false;
                 }
             
                 public void Parse(string text, IDataField dataField)
                 {
                 }
             
                 public object Clone()
                 {
                     return new SizeCustomFormat();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Formats.FormatAttribute.#ctor(System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.FormatAttribute"/> class.
             </summary>
             <param name="formatString">This is a string that is passed to the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See MSDN for more information.</param>
             <param name="prefix">The prefix that is added before the formatted string.</param>
             <param name="suffix">The suffix that is added after the formatted string.</param>
             <example>
             <code>
             public class Product
             {
                 private DateTime maturity;
            
                 [Format("yyyy-MM-dd", "**** ", " #####")]
                 public DateTime Maturity
                 {
                     get { return maturity; }
                     set { maturity = value; }
                 }
             }
            
             public void PopulateGrid(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Maturity"));
            
                 Product product = new Product();
                 product.Maturity = new DateTime(2009, 10, 20);
            
                 grid.Rows.Add(product);
            
                 Console.WriteLine("The cell displays the text: {0}", grid.Rows[0]["Maturity"].Text);
             }
             
             //Console output:
             The cell displays the text: **** 2009-10-20 #####
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Formats.FormatAttribute.Format">
            <summary>
            Gets an instance of the <see cref="T:Dapfor.Net.Formats.StringFormat"/> class.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintRowEventArgs">
            <summary>
            Provides data and methods for painting the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Row"/>
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Graphics"/> object, or do it vice versa!</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Row"/>. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Grid"/> from default painting by setting 
            the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintCells">
            <summary>
            Paint all the <see cref="T:Dapfor.Net.Ui.Cell"/>s in the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Row"/>. 
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintRowSelectorBackground">
            <summary>
            Atomic operation to paint the background of the row selector. The method <see cref="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.RowSelector"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintRowSelectorImages">
            <summary>
            Paints an appropriate image on the row's selector.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintHierarchyBackground">
            <summary>
            Atomic operation to paint the hierarchical backgroung. The method <see cref="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.HierarchicalLinesBackground"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintFocus">
            <summary>
            Atomic operation to paint the focus. The method <see cref="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Focus"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintSelection">
            <summary>
            Atomic operation to paint the selection. The method <see cref="M:Dapfor.Net.Ui.PaintRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Selection"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Row">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Row"/> to be painted.
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.RowSelectorBounds">
            <summary>
            Gets the bounds, nested to draw the row selector.
            </summary>
            <value>The row selector bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.HierarchyBounds">
            <summary>
            Gets the bounds, nested to draw the hierarchy (expansion +/- buttons and hierarchical lines).
            </summary>
            <value>The hierarchy bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Appearance">
            <summary>
            Gets the appearance of the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Row"/> (Colors, gradient...).
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.RowSelectorAppearance">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Appearance"/> of the row selector.
            </summary>
            <value>The row selector appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Bounds">
            <summary>
            Gets the visible bounds of the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Row"/>.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.SpaceAfterLastColumn">
            <summary>
            Gets the bounds after the last column.
            </summary>
            <value>The space after last column.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> to draw the text.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Render">
            <summary>
            Gets or sets the <see cref="T:Dapfor.Net.Ui.IRender"/> that performs basic painting operations.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.IRender"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Parts">
            <summary>
            Gets or sets the parts of <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Row"/> that are to be painted. 
            </summary>
            <value>The parts.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintRowEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintRowEventArgs.FinalHierarchyBackgroundColor">
            <summary>
            Gets the final color of the background. The final color is a result of blending of the <see cref="P:System.Windows.Forms.Control.BackColor"/>, focus and selection colors.
            </summary>
            <value>The final color of the background.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintGroupRowEventArgs">
            <summary>
            Provides data and methods for painting group <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>s
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Column"/>. A programmer should not use this property on <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Graphics"/> object, or do it vice versa!</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Grid"/> from default painting by setting 
            the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintText">
            <summary>
            Atomic operation to paint a text in the group <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>. The method <see cref="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Text"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintText(System.String,System.Drawing.Rectangle)">
            <summary>
            Paints the text in the specified bounds.
            </summary>
            <param name="textToPaint">The text to be painted.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintImage">
            <summary>
            Atomic operation to paint an icon in the group <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>. The method <see cref="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Image"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintBackground">
            <summary>
            Atomic operation to paint the background. The method <see cref="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Background"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintRowSelectorBackground">
            <summary>
            Atomic operation to paint the background of the row selector. The method <see cref="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.RowSelector"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintRowSelectorImages">
            <summary>
            Paints an appropriate image on the row's selector.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintHierarchyBackground">
            <summary>
            Atomic operation to paint the hierarchical backgroung. The method <see cref="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.HierarchicalLinesBackground"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintFocus">
            <summary>
            Atomic operation to paint the focus. The method <see cref="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Focus"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintSelection">
            <summary>
            Atomic operation to paint the selection. The method <see cref="M:Dapfor.Net.Ui.PaintGroupRowEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Selection"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/> to be painted.
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.RowSelectorBounds">
            <summary>
            Gets the bounds, nested to draw the row selector.
            </summary>
            <value>The row selector bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.HierarchyBounds">
            <summary>
            Gets the bounds, nested to draw the hierarchy (expansion +/- buttons and hierarchical lines).
            </summary>
            <value>The hierarchy bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Appearance">
            <summary>
            Gets the appearance of the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/> (Colors, gradient...).
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.RowSelectorAppearance">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Appearance"/> of the row selector.
            </summary>
            <value>The row selector appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.TextSettings">
            <summary>
            Gets the text settings (padding, text orientation, wrapping, trimming, etc...).
            </summary>
            <value>The text settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.ImageSettings">
            <summary>
            Gets the image settings (padding, alignment, stretching...).
            </summary>
            <value>The image settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Bounds">
            <summary>
            Gets the visible bounds of the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> to draw the text.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Image">
            <summary>
            Gets or sets the image to be painted in <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Text">
            <summary>
            Gets a text to be painted in the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Render">
            <summary>
            Gets or sets the <see cref="T:Dapfor.Net.Ui.IRender"/> that performs basic painting operations.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.IRender"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Parts">
            <summary>
            Gets or sets the parts of <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/> that are to be painted. 
            </summary>
            <value>The parts.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Value">
            <summary>
            Gets the value of the group of <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>s.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Column">
            <summary>
            Gets the column, for which the <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Row"/>s were grouped.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.FinalHierarchyBackgroundColor">
            <summary>
            Gets the final color of the background. The final color is a result of blending of the <see cref="P:System.Windows.Forms.Control.BackColor"/>, focus and selection colors.
            </summary>
            <value>The final color of the background.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.FinalAppearance">
            <summary>
            Gets the final appearance of the <see cref="T:Dapfor.Net.Ui.Cell"/>. 
            </summary>
            <value>The final color of the background.</value>
            <remarks>The final color is a result of blending of the <see cref="T:Dapfor.Net.Ui.Cell"/>'s background color, <see cref="P:Dapfor.Net.Ui.PaintGroupRowEventArgs.Grid"/>'s focus and selection colors.</remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintCellEventArgs">
            <summary>
            Provides data and methods for <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/> painting
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter' <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid' cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Graphics"/> object, or do it vice versa!</para>
            
            
            <para>The following example shows how customize painting in cell</para>
            <code>
            public void InitializeGrid(Grid grid)
            {
                //Subscribe for cell painting event
                grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
                {
                    using(Brush brush = new SolidBrush(Color.DeepPink))
                    {
                        //Prevent from text painting
                        e.Parts &amp;= e.Parts ^ PaintPart.Text;
                        
                        //Set a new background color
                        e.Appearance.BackColor = Color.Yellow;
            
                        //Do default painting without text drawing
                        e.PaintAll();
                        e.Handled = true;
            
                        //Draw a custom text above already pained cell
                        e.Graphics.DrawString("Custom string", SystemFonts.StatusFont, brush, e.Cell.VirtualBounds);
                    }
                };
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Grid"/> from default painting by setting 
            the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintVerticalLine">
            <summary>
            Paints the vertical line between cells.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintBackground">
            <summary>
            Atomic operation to paint the background. The method <see cref="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Background"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintSelection">
            <summary>
            Atomic operation to paint a frame around the selected row. The method <see cref="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Selection"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintCellFocus">
            <summary>
            Atomic operation to paint a frame around the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/> if it is focused. The method <see cref="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Focus"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintTooltipCellFrame">
            <summary>
            Paints a frame around the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/> if a tooltip is currently displayed.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintErrorMessageImage">
            <summary>
            Paints an image, if the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/> contains a tooltip message.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintImage">
            <summary>
            Atomic operation to paint an icon in the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>. The method <see cref="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Image"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintText">
            <summary>
            Atomic operation to paint a text in the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>. The method <see cref="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Text"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintText(System.String,System.Drawing.Rectangle)">
            <summary>
            Paints the text in the specified bounds.
            </summary>
            <param name="textToPaint">The text to be painted.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintEditor">
            <summary>
            Atomic operation to paint the <see cref="T:System.Drawing.Design.UITypeEditor"/> in the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/> if it is editable. The method <see cref="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Editor"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintEditorValue">
            <summary>
            Atomic operation to paint a value (icon, color, etc...) if the <see cref="T:System.Drawing.Design.UITypeEditor"/> supports values painting. The method <see cref="M:Dapfor.Net.Ui.PaintCellEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.EditorValue"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/> to be painted.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Text">
            <summary>
            Gets a text to be painted in <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> to draw the text.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.TextSettings">
            <summary>
            Gets the text settings (padding, text orientation, wrapping, trimming, etc...).
            </summary>
            <value>The text settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Image">
            <summary>
            Gets or sets the image to be painted in <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.ImageSettings">
            <summary>
            Gets the image settings (padding, alignment, stretching...).
            </summary>
            <value>The image settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Appearance">
            <summary>
            Gets the appearance of the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/> (Colors, gradient...).
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Parts">
            <summary>
            Gets or sets the parts of <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/> that are to be painted. 
            </summary>
            <value>The parts.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Graphics">
            <summary>
            The <see cref="T:System.Drawing.Graphics"/> used to paint the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>.
            </summary>
            <value>The <see cref="T:System.Drawing.Graphics"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Render">
            <summary>
            Gets or sets the <see cref="T:Dapfor.Net.Ui.IRender"/> that performs basic painting operations.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.IRender"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.IsMeasureOnly">
            <summary>
            Indicates whether the grid measures cell's dimensions. In this case no drawing operations should occurred.
            </summary>
            <value>True if grid measures cell's size.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.HighlightColor">
            <summary>
            Gets or sets the highlighting color, which is evaluated with time.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.HighlightForeColor">
            <summary>
            Gets or sets the highlighting fore color, which is evaluated with time.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintCellEventArgs.FinalAppearance">
            <summary>
            Gets the final appearance of the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>. 
            </summary>
            <value>The final color of the background.</value>
            <remarks>The final color is a result of blending of the <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Cell"/>'s background color, <see cref="P:Dapfor.Net.Ui.PaintCellEventArgs.Grid"/>'s focus and selection colors.</remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.ValidateCellAction">
            <summary>
            Validation action
            </summary>
            <value>The action.</value>
            <remarks>
            <para>To validate edited data the programmer has to subscribe to <see cref="E:Dapfor.Net.Ui.Grid.ValidateCell">Grid.ValidateCell</see> event that transmits data of the 
            edited cell, new value that shall be transferred to business logic object, message that has to be displayed after editing. In this event it is possible also to 
            set an action instructing the grid of what has to be done after editing.</para>
            </remarks>
            <example>
            <code>
            //Add handler to validate cells
            grid.ValidateCell += OnValidateCell;
            
            //Validation handler
            private void OnValidateCell(object sender, Ui.ValidateCellEventArgs e)
            {
                //Default validation logic:
                bool valid = e.Exception == null &amp;&amp; string.IsNullOrEmpty(e.ErrorText);
            
                //Add your validation logic here. 
                //valid = ... 
            
                if (!valid)
                {
                    e.Action = ValidateCellAction.StopEdit;
                    e.ErrorText = "Please enter a valid value.";
                }
            }        
            </code>
            </example>
        </member>
        <member name="F:Dapfor.Net.Ui.ValidateCellAction.ApplyValue">
            <summary>
            Records a new value to the data object. If an exception is thrown during recording, Grid.ValidateCell event is generated one more time with clarifying information.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ValidateCellAction.CancelValue">
            <summary>
            Informs the grid that the new value doesn't have to be recorded to a data object. It is also possible to set a user-friendly message that will be displayed as a tooltip. If grid navigation is turned on (tab, tab+shift), the grid starts editing a new cell.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ValidateCellAction.RestartEdit">
            <summary>
            Informs the grid that it has to restart editing current cell value.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ValidateCellAction.StopEdit">
            <summary>
            The new value is not recorded to the data object and the editing process is stopped. Unlike CancelValue, navigation between edited grid cells is ignored.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.ValidateCellEventArgs">
            <summary>
            Provides data and methods for to validate cell editing
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.ValidateCellEventArgs.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ValidateCellEventArgs.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ValidateCellEventArgs.Exception">
            <summary>
            Gets the exception if i was thrown while editing process.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ValidateCellEventArgs.ErrorText">
            <summary>
            Gets or sets the error text that is shown in a tip window.
            </summary>
            <value>The error text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ValidateCellEventArgs.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ValidateCellEventArgs.Action">
            <summary>
            Gets or sets the validation action.
            </summary>
            <value>The action.</value>
            <remarks>
            <para>To validate edited data the programmer has to subscribe to <see cref="E:Dapfor.Net.Ui.Grid.ValidateCell">Grid.ValidateCell</see> event that transmits data of the 
            edited cell, new value that shall be transferred to business logic object, message that has to be displayed after editing. In this event it is possible also to 
            set an action instructing the grid of what has to be done after editing.</para>
            <para>There are 4 possible actions:</para>
            <list type="bullet">
            <item>ApplyValue - records a new value to the data object. If an exception is thrown during recording, Grid.ValidateCell event is generated one more time with clarifying information.</item>
            <item>CancelValue - informs the grid that the new value doesn't have to be recorded to a data object. It is also possible to set a user-friendly message that will be displayed as a tooltip. If grid navigation is turned on (tab, tab+shift), the grid starts editing a new cell.</item>
            <item>RestartEdit - Informs the grid that it has to restart editing current cell value.</item>
            <item>StopEdit - the new value is not recorded to the data object and the editing process is stopped. Unlike CancelValue, navigation between edited grid cells is ignored.</item>
            </list>
            </remarks>
            <example>
            <code>
            //Add handler to validate cells
            grid.ValidateCell += OnValidateCell;
            
            //Validation handler
            private void OnValidateCell(object sender, Ui.ValidateCellEventArgs e)
            {
                //Default validation logic:
                bool valid = e.Exception == null &amp;&amp; string.IsNullOrEmpty(e.ErrorText);
            
                //Add your validation logic here. 
                //valid = ... 
            
                if (!valid)
                {
                    e.Action = ValidateCellAction.StopEdit;
                    e.ErrorText = "Please enter a valid value.";
                }
            }        
            </code>
            </example>
        </member>
        <member name="T:Dapfor.Net.Internal.EditInPlace.TextEditor">
            <summary>
            The textbox control which is created without borders and handles events when the end used presses 
            'Enter' or 'Escape' keys.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Internal.EditInPlace.TextEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.EditInPlace.TextEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Internal.EditInPlace.TextEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintHierarchyEventArgs">
            <summary>
            Provides data to paint the hierarchy in the <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Grid"/>
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Graphics"/> object, or do it vice versa!</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHierarchyEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting of the hierarchy. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Grid"/> from default painting by setting the <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHierarchyEventArgs.PaintHierarchicalLines">
            <summary>
            Atomic operation to paint the vertical hierarchical lines. The method <see cref="M:Dapfor.Net.Ui.PaintHierarchyEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.HierarchicalLines"/> 
            flags in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property are dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHierarchyEventArgs.PaintExpansionButton">
            <summary>
            Atomic operation to paint the expansion (+/-) button. The method <see cref="M:Dapfor.Net.Ui.PaintHierarchyEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.ExpansionButton"/> flag 
            in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Row">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Row"/> which is the node of hierarchy.
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.ExpandIconBounds">
            <summary>
            Gets the bounds, needed to draw the expansion (+/-) button.
            </summary>
            <value>The expand icon bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.VisibleHierarchicalBounds">
            <summary>
            Gets the visible bounds, nested to draw the vertical hierarchical lines for the specified <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Row"/>.
            </summary>
            <value>The visible hierarchical bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Parts">
            <summary>
            Gets or sets the parts to draw the hierarchy. 
            </summary>
            <value>The parts.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Render">
            <summary>
            Gets or sets the <see cref="T:Dapfor.Net.Ui.IRender"/> that performs basic painting operations.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.IRender"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintHierarchyEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.ImageSettings">
            <summary>
            Specifies image settings (padding, alignment, stretching).
            </summary>
            <threadsafety>The class is not thread safe</threadsafety>
            <seealso cref="T:Dapfor.Net.Ui.Appearance"/>
        </member>
        <member name="M:Dapfor.Net.Ui.ImageSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ImageSettings"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ImageSettings.#ctor(Dapfor.Net.Ui.ImageSettings)">
            <summary>
            Copy constructor. 
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ImageSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.ImageSettings.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.ImageSettings.Padding">
            <summary>
            Gets or sets the amount of space in pixels to add to the left, top, right and bottom of the content 
            </summary>
            <value>The padding.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ImageSettings.Alignment">
            <summary>
            Gets alignment of the content on the painting surface.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ImageSettings.Stretch">
            <summary>
            Gets or sets the stretch mode.
            </summary>
            <value>The stretch.</value>
        </member>
        <member name="T:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter">
            <summary>
            Column filter that enables multiple _values selection.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter.IsFiltered(Dapfor.Net.Ui.Row)">
            <summary>
            Determines whether the specified <see cref="T:Dapfor.Net.Ui.Row"/> is filtered.
            </summary>
            <param name="row">The row.</param>
            <returns>
            	<c>true</c> if the specified row is filtered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter.Reset">
            <summary>
            Resets the filter
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter.IsDropDownResizable">
            <summary>
            Returns true.
            </summary>
            <value></value>
            <returns>Always <c>true</c>.
            </returns>
        </member>
        <member name="E:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter.FilterUpdated">
            <summary>
            Occurs when the filter's conditions are changed.
            </summary>
            <remarks>This event is raised to force the <see cref="T:Dapfor.Net.Ui.Grid"/> to verify the state of all inserted <see cref="T:Dapfor.Net.Ui.Row"/>s.</remarks>
            <threadsafety>This event may be raised from any thread. If the <see cref="T:Dapfor.Net.Ui.Grid"/> receives a notification from the non-GUI thread, then it will synchronize
            the calling thread with the GUI thread in the asynchronous way without blocking the calling thread. </threadsafety>
        </member>
        <member name="T:Dapfor.Net.Data.IGetter">
            <summary>
            Gets a value of a data object property.
            </summary>
            <remarks>
            In some cases getting values of data objects through the <see cref="T:Dapfor.Net.Data.IDataField"/> interface may be a costly operation because it occurs through the reflection.
            To accelerate the values getting, the data objects may implement <see cref="T:Dapfor.Net.Data.IGetAccelerator"/> interface. In this case the values are returned through the delegating mechanism 
            and not through the reflection.
            </remarks>
            <example>
            <code>
            public class TestClass : IGetAccelerator
            {
                private int intValue;
                private double doubleValue;
            
                //Some property that returns int value
                public int IntValue
                {
                    get { return intValue; }
                    set { intValue = value; }
                }
            
            
                public double DoubleValue
                {
                    get { return doubleValue; }
                    set { doubleValue = value; }
                }
            
                //IGetAccelerator implementation.
                public IGetter GetGetter(string fieldId)
                {
                    switch(fieldId)
                    {
                        //This implementation returns a delegate that calls IntValue property
                        case "IntValue": 
                            return new Getter&lt;int&gt;(delegate { return IntValue; });
            
                        //This implementation directly calls the DoubleValue method and returns the result
                        case "DoubleValue": 
                            return new ValueGetter(DoubleValue);
                    }
                    return null;
                }
            }
            
            //Demonstrates how the data object can be added to the grid
            public void HowToUseExample(Grid grid)
            {
                grid.Rows.Add(new TestClass());
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Data.IGetter.GetValue">
            <summary>
            Gets a value (returned by a property of the data object or how else).
            </summary>
            <returns>A value, returned by the data object.</returns>
        </member>
        <member name="T:Dapfor.Net.Data.Getter`1">
            <summary>
            Gets a value of a data object property
            </summary>
            <typeparam name="T">Type of a value, returned by property of data object</typeparam>
            <remarks>
            In some cases getting values of data objects through the <see cref="T:Dapfor.Net.Data.IDataField"/> interface may be a costly operation because it occurs through the reflection.
            To accelerate the values getting, the data objects may implement <see cref="T:Dapfor.Net.Data.IGetAccelerator"/> interface. In this case the values are returned through the delegating mechanism 
            and not through the reflection.
            </remarks>
            <example>
            <code>
            public class TestClass : IGetAccelerator
            {
                private int intValue;
                private double doubleValue;
            
                //Some property that returns int value
                public int IntValue
                {
                    get { return intValue; }
                    set { intValue = value; }
                }
            
            
                public double DoubleValue
                {
                    get { return doubleValue; }
                    set { doubleValue = value; }
                }
            
                //IGetAccelerator implementation.
                public IGetter GetGetter(IDataField field)
                {
                    switch (field.Id)
                    {
                        //This implementation returns a delegate that calls IntValue property
                        case "IntValue": 
                            return new Getter&lt;int&gt;(delegate { return IntValue; });
            
                        //This implementation creates a new object of the ValueGetter type which keeps a value, returned by the DoubleValue property call
                        case "DoubleValue": 
                            return new ValueGetter(DoubleValue);
                    }
                    return null;
                }
            }
            
            //Demonstrates how the data object can be added to the grid
            public void HowToUseExample(Grid grid)
            {
                grid.Rows.Add(new TestClass());
            }
            </code>
            </example>
            <seealso cref="T:Dapfor.Net.Data.ValueGetter"/>
            <see cref="T:Dapfor.Net.Data.DataObjectAccessor"/>
        </member>
        <member name="M:Dapfor.Net.Data.Getter`1.#ctor(Dapfor.Net.Data.Getter{`0}.GetterDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.Getter`1"/> class.
            </summary>
            <param name="getter">The getter.</param>
        </member>
        <member name="M:Dapfor.Net.Data.Getter`1.GetValue">
            <summary>
            Gets a value (returned by a property of the data object or how else).
            </summary>
            <returns>A value, returned by the data object.</returns>
        </member>
        <member name="T:Dapfor.Net.Data.Getter`1.GetterDelegate">
            <summary>
            A delegate that gets property value.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Data.ValueGetter">
            <summary>
            A cache that keep a value returned from data object property.
            </summary>
            <remarks>
            <code>
            public class TestClass : IGetAccelerator
            {
                private int intValue;
                private double doubleValue;
            
                //Some property that returns int value
                public int IntValue
                {
                    get { return intValue; }
                    set { intValue = value; }
                }
            
            
                public double DoubleValue
                {
                    get { return doubleValue; }
                    set { doubleValue = value; }
                }
            
                //IGetAccelerator implementation.
                public IGetter GetGetter(IDataField field)
                {
                    switch (field.Id)
                    {
                        //This implementation returns a delegate that calls IntValue property
                        case "IntValue": 
                            return new Getter&lt;int&gt;(delegate { return IntValue; });
            
                        //This implementation creates a new object of the ValueGetter type which keeps a value, returned by the DoubleValue property call
                        case "DoubleValue": 
                            return new ValueGetter(DoubleValue);
                    }
                    return null;
                }
            }
            
            
            //Demonstrates how the data object can be added to the grid
            public void HowToUseExample(Grid grid)
            {
                grid.Rows.Add(new TestClass());
            }
            </code>
            </remarks>
            <seealso cref="T:Dapfor.Net.Data.Getter`1"/>
        </member>
        <member name="M:Dapfor.Net.Data.ValueGetter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.ValueGetter"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dapfor.Net.Data.ValueGetter.GetValue">
            <summary>
            Gets the value, passed to the constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapfor.Net.Data.IGetAccelerator">
            <summary>
            Accelerates getting values from properties. 
            </summary>
            <remarks>
            In many cases, the values getting from the <see cref="T:Dapfor.Net.Data.IDataField"/> may be a long operation because it
            can occur by the reflection. To accelerate the values getting, the data objects may implement <see cref="T:Dapfor.Net.Data.IGetAccelerator"/>
            interface. Such objects can get values by using the delegating mechanism or direct 
            method or property call which are much faster than reflection.
            </remarks>
            <example>
            <code>
            public class TestClass : IGetAccelerator
            {
                private int intValue;
                private double doubleValue;
            
                //Some property that returns int value
                public int IntValue
                {
                    get { return intValue; }
                    set { intValue = value; }
                }
            
            
                public double DoubleValue
                {
                    get { return doubleValue; }
                    set { doubleValue = value; }
                }
            
                //IGetAccelerator implementation.
                public IGetter GetGetter(IDataField field)
                {
                    switch (field.Id)
                    {
                        //This implementation returns a delegate that calls IntValue property
                        case "IntValue": 
                            return new Getter&lt;int&gt;(delegate { return IntValue; });
            
                        //This implementation creates a new object of the ValueGetter type which keeps a value, returned by the DoubleValue property call
                        case "DoubleValue": 
                            return new ValueGetter(DoubleValue);
                    }
                    return null;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Data.IGetAccelerator.GetGetter(Dapfor.Net.Data.IDataField)">
            <summary>
            Gets the getter that knows how to retrieve value from the specified property of the given data object.
            </summary>
            <param name="field">The field.</param>
            <returns>
            	<see cref="T:Dapfor.Net.Data.IGetter"/> instance, if the acceleration is available. Otherwise <c>null</c>.
            </returns>
            <remarks>If the acceleration is not available, the <see cref="T:Dapfor.Net.Data.IDataField"/> tries get value by the default
            way (for example, reflection). </remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.IRender">
             <summary>
             Interface for performing basic painting operations
             </summary>
             <remarks>
             <code>
             public void CellCustomDraw(Grid grid)
             {
                 //Demonstrates, how to custom draw in cell. 
                 //The delegate is called while the cell's painting
                 grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
                 {
                     //Draw a button in the cell's bounds. 
                     Color startColor = Color.LightGray;
                     Color endColor = Color.LightSlateGray;
            
                     //Take into account, that the row can be selected.
                     if (e.Cell.Row != null &amp;&amp; e.Cell.Row.Selected)
                     {
                         startColor = PaintHelper.AlphaBlend(startColor, grid.Selection.Color);
                         endColor = PaintHelper.AlphaBlend(endColor, grid.Selection.Color);
                     }
            
                     //Draw the background
                     Appearance appearance = new Appearance(SystemColors.GrayText, startColor, true, endColor, GradientDirection.Vertical);
                     e.Render.DrawCaption(appearance, ElementState.Normal, e.Cell.VirtualBounds, BorderSide.All, e.Graphics);
            
                     //Prevent from background erasing
                     e.Parts &amp;= e.Parts ^ (PaintPart.Background | PaintPart.Borders);
            
                     //Set a new text color
                     e.Appearance.ForeColor = Color.Yellow;
            
                     //Do default painting without the text drawing
                     e.PaintAll();
                 };
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.Fill(System.Drawing.Color,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Fills the rectangle with a specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="bounds">The bounds of the rectangle.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.Fill(Dapfor.Net.Ui.Appearance,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Fills the rectangle with a specified <see cref="T:Dapfor.Net.Ui.Appearance"/>.
            </summary>
            <param name="appearance">The appearance.</param>
            <param name="gradientBounds">Specifies the bounds of the linear gradient.</param>
            <param name="drawBounds">Specifies the rectangle to fill.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.Fill(System.Drawing.Color,System.Drawing.Color,Dapfor.Net.Ui.GradientDirection,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Fills the rectangle with a gradient color.
            </summary>
            <param name="color1">The beginning gredient color.</param>
            <param name="color2">The ending gradient color.</param>
            <param name="direction">The gradient direction.</param>
            <param name="gradientBounds">Specifies the bounds of the linear gradient.</param>
            <param name="drawBounds">Specifies the rectangle to fill.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.DrawFrame(System.Drawing.Color,System.Drawing.Rectangle,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Graphics)">
            <summary>
            Draws a border on a button-style control. 
            </summary>
            <param name="color">The color of the border.</param>
            <param name="bounds">The bounds of the border.</param>
            <param name="style">One of the <see cref="T:System.Windows.Forms.ButtonBorderStyle"/> values that specifies the style of the border.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.DrawFrame(System.Drawing.Color,System.Drawing.Rectangle,System.Windows.Forms.ButtonBorderStyle,Dapfor.Net.Ui.BorderSide,System.Drawing.Graphics)">
            <summary>
            Draws a border on a button-style control.
            </summary>
            <param name="color">The color of the border.</param>
            <param name="bounds">The bounds of the border.</param>
            <param name="style">One of the <see cref="T:System.Windows.Forms.ButtonBorderStyle"/> values that specifies the style of the border.</param>
            <param name="sides">One of the <see cref="T:Dapfor.Net.Ui.BorderSide"/> values that specifies which border side should be painted.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.DrawImage(System.Drawing.Image,Dapfor.Net.Ui.ImageSettings,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> at the specified location and with the specified <see cref="T:Dapfor.Net.Ui.ImageSettings"/>
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to draw.</param>
            <param name="settings">The <see cref="T:Dapfor.Net.Ui.ImageSettings"/> specifies the parameters, indicating how the <see cref="T:System.Drawing.Image"/> should be painted.</param>
            <param name="bounds">Specifies the location and size of the drawn image.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.DrawSortIcon(Dapfor.Net.Ui.SortDirection,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a sort icon, when the <see cref="T:Dapfor.Net.Ui.Header"/> has a single sorted <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <param name="direction">The sort direction.</param>
            <param name="bounds">Specifies the location and size of the drawn icon.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.DrawSortIcon(Dapfor.Net.Ui.SortDirection,System.Int32,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a sort icon for the specified sort level, when the <see cref="T:Dapfor.Net.Ui.Header"/> has many sorted <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <param name="direction">The sort direction.</param>
            <param name="sortLevel">The sort level.</param>
            <param name="bounds">Specifies the location and size of the drawn icon.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.SortIconMetrics">
            <summary>
            Gets a sise, required to draw the sort icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.TextMetrics(System.String,System.Drawing.Font,System.Drawing.Graphics)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/>. 
            </summary>
            <param name="text">The text to be measured.</param>
            <param name="font">The font.</param>
            <param name="graphics">The graphics.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.DrawCaption(Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.ElementState,System.Drawing.Rectangle,Dapfor.Net.Ui.BorderSide,System.Drawing.Graphics)">
            <summary>
            Draws a caption with the specified 3D-borders and <see cref="T:Dapfor.Net.Ui.Appearance"/>.
            </summary>
            <param name="appearance">The appearance.</param>
            <param name="state">One of the <see cref="T:Dapfor.Net.Ui.ElementState"/> values that specifies the style of the border.</param>
            <param name="bounds">The bounds of the border.</param>
            <param name="sides">One of the <see cref="T:Dapfor.Net.Ui.BorderSide"/> values that specifies which border side should be painted.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.DrawText(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.StringFormat,System.Drawing.Graphics)">
            <summary>
            Draws the text.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="bounds">The bounds.</param>
            <param name="format">The format.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.IRender.DrawExpansionButton(System.Boolean,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the expansion (+/-) button.
            </summary>
            <param name="expanded">Indicates whether the button is expanded. <c>true</c> - expanded, otherwise <c>false</c>.</param>
            <param name="bounds">The button's size.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.IRender.DefaultFont">
            <summary>
            Gets the default font to paint text in <see cref="T:Dapfor.Net.Ui.Cell"/>s and <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The default font.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.RowCollection">
            <summary>
            Collection of all visible <see cref="T:Dapfor.Net.Ui.Row"/>s. 
            </summary>
            <value>Collection of visible rows.</value>
            <remarks>
            <para>The grid has two row indexing system. <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> performs linear indexing of visible rows in a grid without regard to hierarchy. 
            It means that this collection contains all visible (not filtered and non-collapsed by parent) rows. <see cref="P:Dapfor.Net.Ui.Row.VisibleIndex"/> property specifies position of 
            a visible row in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>. The second time of indexing is related to hierarchical structure of the grid. Rows at the first hierarchy level can 
            be accessed with Grid.Nodes property. This collection contains both visible and invisible rows that are located on the same hierarchy level. Every row 
            may contain child rows that can be accessed via <see cref="P:Dapfor.Net.Ui.Row.Children"/> property. Neither filtering, nor visibility affect row presence in this collection. 
            <see cref="P:Dapfor.Net.Ui.Row.ChildIndex"/> property defines hierarchical position of a row If the row is on the top level, it is in <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, otherwise it is 
            in parent <see cref="P:Dapfor.Net.Ui.Row.Children"/> container. The row also has <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> container that contains only visible children on the same 
            hierarchy level. You can use <see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex"/> property to determine <see cref="T:Dapfor.Net.Ui.Row"/> position in <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> of the parent.</para>
            
            <para>One row can be present in different containers, including Grid.Rows, Grid.Nodes, Row.Children, etc. Containers organize grid structure and enable precise definition of data location. For hierarchies the grid provides a convenient API that can be used to determine parent, children and adjacent visible rows. The list of most frequent methods and properties used for data indexing is provided below.</para>
            <list type="bullet">
            <item><see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see> - Collection of all visible rows in the grid.</item>
            <item><see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> - Collection of both visible and invisible rows at the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see> - Collection of both visible and invisible children.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> - Collection of visible children on the same hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.Parent">Row.Parent</see> - Parent row or null if the current row is on the top hierarchy level.</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleIndex">Row.VisibleIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Rows">Grid.Rows</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.ChildIndex">Row.ChildIndex</see> - Row position in <see cref="P:Dapfor.Net.Ui.Grid.Nodes">Grid.Nodes</see> or parent <see cref="P:Dapfor.Net.Ui.Row.Children">Row.Children</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.VisibleChildIndex">Row.VisibleChildIndex</see> - Row position in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see></item>
            <item><see cref="P:Dapfor.Net.Ui.Row.NextVisible">Row.NextVisible</see> - Next visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.PrevVisible">Row.PrevVisible</see> - Previous visible row in parent <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren">Row.VisibleChildren</see> container</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.FirstVisibleChild">Row.FirstVisibleChild</see> - First visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.Row.LastVisibleChild">Row.LastVisibleChild</see> - Last visible child</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">Grid.Rows.TopVisibleRow</see> - The first row in visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">Grid.Rows.BottomVisibleRow</see> - The last row that is at least partially visible in the visible area of the grid</item>
            <item><see cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">Grid.Rows.BottomFullyVisibleRow</see> - The last fully visible row in the visible area of the grid</item>
            </list>
            <para>If you work with reference-type data objects, you can use convenient grid features to search row or rows that contain the required data object.</para>
            <para>You can get a data object that is associated with a row by calling <see cref="P:Dapfor.Net.Ui.Row.DataObject">Row.DataObject</see> property. The same data object may be contained in 
            multiple grid rows. You can get them using <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.Find(System.Object)">Grid.DataObjects.Find(object)</see> method. If you need only the first row, you can use 
            <see cref="M:Dapfor.Net.Ui.Grid.GridDataObjects.FindFirstRow(System.Object)">Grid.DataObjects.FindFirstRow(object)</see> method.</para>
            
            <code>
            public void PopulateGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
            
                grid.Headers.Add(new Header());
                grid.Headers[1].Add(new Column("Song"));
            
                Row rowPlaylist1 = grid.Rows.Add(new Playlist("Queen"));
                rowPlaylist1.Add(new Song("Keep Yourself Alive"));
                rowPlaylist1.Add(new Song("Great King Rat"));
                rowPlaylist1.Add(new Song("White Queen"));
            
                rowPlaylist1.ExpandAll();
            
                Row rowPlaylist2 = grid.Rows.Add(new Playlist("Beetles"));
                rowPlaylist2.Add(new Song("Love Me Do"));
                rowPlaylist2.Add(new Song("From Me to You"));
                rowPlaylist2.Add(new Song("Please Please Me"));
                rowPlaylist2.Expanded = false;
            
                Row rowPlaylist3 = grid.Rows.Add(new Playlist("Scorpions"));
                rowPlaylist3.Add(new Song("Fly to the Rainbow"));
                rowPlaylist3.Add(new Song("Rock You Like a Hurricane"));
                rowPlaylist3.Expanded = true;
            
                
                Console.WriteLine("{0} visible rows in the grid", grid.Rows.Count);
                //Iterate all playlists (top-level items)
                foreach (Row row in grid.Rows)
                {
                    Console.WriteLine("Row {0}: {1}", row.VisibleIndex, row[0].Text);
                }
            }
            
            //Console output:
            8 visible rows in the grid
            Row 0: Queen
            Row 1: Keep Yourself Alive
            Row 2: Great King Rat
            Row 3: White Queen
            Row 4: Beetles
            Row 5: Scorpions
            Row 6: Fly to the Rainbow
            Row 7: Rock You Like a Hurricane
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)">
            <summary>
            Adds a user-defined data object on the top hierarchical level of the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>. The data object will be automatically associated with the <see cref="T:Dapfor.Net.Data.DataObjectAccessor"/>
            </summary>
            <param name="dataObject">The user-defined object. If this object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface,
            then the <see cref="T:Dapfor.Net.Ui.Row"/> will subscribe for the notifications. When a notification is received, the <see cref="T:Dapfor.Net.Ui.Row"/> will synchronize the calling thread with 
            the GUI thread and will forward the notification to the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/> in the asynchronous way without blocking the calling thread.</param>
            <returns>
            A new <see cref="T:Dapfor.Net.Ui.Row"/>, having the data object if success; Otherwise <c>null</c>. The returned <see cref="T:Dapfor.Net.Ui.Row"/> may be used to build any hierarchy in the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </returns>
            <remarks>
            The function creates a new <see cref="T:Dapfor.Net.Ui.Row"/> which wrappes the user-defined data object. The <see cref="T:Dapfor.Net.Ui.Row"/> specifies the position in <see cref="P:Dapfor.Net.Ui.Grid.Rows"/>,
            <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>, <see cref="P:Dapfor.Net.Ui.Row.Children"/> and <see cref="P:Dapfor.Net.Ui.Row.VisibleChildren"/> collections, handles the visibility, and appearance of the data.
            </remarks>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/> is added in the synchronous way with blocking the calling thread.</threadsafety>
            <example> Demonstrates how to add user-defined objects to the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>
            <code>
            void PopulateGrid(Grid grid)
            {
                //Add a new object to the scrollable rows on the top hierarchical level
                Row row = grid.Rows.Add(new SomeObject());
                //Add some children to the already inserted row
                row.Add(new SomeChild());
                row.Add(new SomeChild());
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Add(System.Collections.IList)">
            <summary>
            Adds a data object, which implements the <see cref="T:System.Collections.IList"/> interface on the top hierarchical level. Such object will be automatically associated with the <see cref="T:Dapfor.Net.Data.ListDataAccessor"/>
            </summary>
            <param name="collection">The data object.</param>
            <returns>A new <see cref="T:Dapfor.Net.Ui.Row"/>, having the data object if success; Otherwise <c>null</c>. The returned <see cref="T:Dapfor.Net.Ui.Row"/> may be used to build 
            any hierarchy in the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.</returns>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/> is added in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Add(System.Collections.IDictionary)">
            <summary>
            Adds a data object, which implements the <see cref="T:System.Collections.IDictionary"/> interface on the top hierarchical level. Such object will be automatically associated with the <see cref="T:Dapfor.Net.Data.DictionaryDataAccessor"/>
            </summary>
            <param name="collection">The data object.</param>
            <returns>A new <see cref="T:Dapfor.Net.Ui.Row"/>, having the data object if success; Otherwise <c>null</c>. The returned <see cref="T:Dapfor.Net.Ui.Row"/> may be used to build 
            any hierarchy in the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.</returns>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/> is added in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Add(Dapfor.Net.Data.IDataAccessor)">
            <summary>
            Adds a <see cref="T:Dapfor.Net.Data.IDataAccessor"/> on the top hierarchical level of the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </summary>
            <param name="dataAccessor">The data accessor.</param>
            <returns>A new <see cref="T:Dapfor.Net.Ui.Row"/>, having the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> if success; Otherwise <c>null</c>. The returned <see cref="T:Dapfor.Net.Ui.Row"/> may be used to build 
            any hierarchy in the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.</returns>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/> is added in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Remove(Dapfor.Net.Ui.Row)">
            <summary>
            Removes the specified <see cref="T:Dapfor.Net.Ui.Row"/> from the grid.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>True if success. Otherwise <c>false</c></returns>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/> is removed in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:Dapfor.Net.Ui.Row"/> at the specified visible position.
            </summary>
            <param name="index">The index of the <see cref="T:Dapfor.Net.Ui.Row"/> to be removed.</param>
            <returns>True if the <see cref="T:Dapfor.Net.Ui.Row"/> has been successfully removed. Otherwise <c>false</c>.</returns>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/> is removed in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Clear">
            <summary>
            Removes all rows (visible and invisible) from the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </summary>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/>s are removed in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.ExpandAll">
            <summary>
            Expands all <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/>s are expanded in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.CollapseAll">
            <summary>
            Collapses all <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
            <threadsafety>The function is thread safe. The <see cref="T:Dapfor.Net.Ui.Row"/>s are collapsed in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Invalidate">
            <summary>
            Invalidates all <see cref="T:Dapfor.Net.Ui.Row"/>s in the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.Count">
            <summary>
            Gets the count of visible <see cref="T:Dapfor.Net.Ui.Row"/>s in the collection.
            </summary>
            <value>The count of rows.</value>
            <threadsafety>The function is thread safe. The method is executed in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Dapfor.Net.Ui.Row"/> at the specified index.
            </summary>
            <value><see cref="T:Dapfor.Net.Ui.Row"/> if success; otherwise <c>null</c>.</value>
            <threadsafety>The function is thread safe. The method is executed in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.TopVisibleRow">
            <summary>
            Gets the top visible <see cref="T:Dapfor.Net.Ui.Row"/> in client bounds of the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </summary>
            <value>The top visible <see cref="T:Dapfor.Net.Ui.Row"/>.</value>
            <threadsafety>The function is thread safe. The method is executed in the synchronous way with blocking the calling thread.</threadsafety>
            <seealso cref="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow"/>
            <seealso cref="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow"/>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.BottomFullyVisibleRow">
            <summary>
            Gets the last fully visible <see cref="T:Dapfor.Net.Ui.Row"/> in client bounds of the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </summary>
            <value>The bottom fully visible <see cref="T:Dapfor.Net.Ui.Row"/>.</value>
            <threadsafety>The function is thread safe. The method is executed in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.BottomVisibleRow">
            <summary>
            Gets the last (may be partially) visible <see cref="T:Dapfor.Net.Ui.Row"/> in client bounds of the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </summary>
            <value>The bottom visible row.</value>
            <threadsafety>The function is thread safe. The method is executed in the synchronous way with blocking the calling thread.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.Bounds">
            <summary>
            Gets the bounds, available to show <see cref="T:Dapfor.Net.Ui.Row"/>s in the scrollable surface.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.VisibleRowsHeight">
            <summary>
            Gets the integral height of all visible <see cref="T:Dapfor.Net.Ui.Row"/>s in the <see cref="P:Dapfor.Net.Ui.RowCollection.Grid"/>.
            </summary>
            <value>The height of all visible <see cref="T:Dapfor.Net.Ui.Row"/>s.</value>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Enumerator.#ctor(Dapfor.Net.Internal.RowContainer,Dapfor.Net.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.RowCollection.Enumerator"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <remarks>
            	<para>Thread safety:</para>
            If the call comes from the non-GUI thread, then it will be synchronized with the GUI thread in the
            synchronous way with blocking the calling thread.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Dapfor.Net.Ui.RowCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Dapfor.Net.Ui.RowCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:Dapfor.Net.Ui.SortDirection">
            <summary>
            Specifies sorting direction
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.SortDirection.Undefined">
            <summary>
            Direction is not specified
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.SortDirection.Ascending">
            <summary>
            Ascending sort
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.SortDirection.Descending">
            <summary>
            Descending sort
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.DropRowPosition">
            <summary>
            Specifies the location to which the data should be added during drag and drop operation.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.DropRowPosition.Begin">
            <summary>
            Data is added to the beginning on the current hierarchical level.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.DropRowPosition.End">
            <summary>
            Data is added to the end on the current hierarchical level.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.DropRowPosition.BeforeTargetRow">
            <summary>
            Data is added before the target row
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.DropRowPosition.AfterTargetRow">
            <summary>
            Data is added after the target row
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.DropRowPosition.AsChildToBegin">
            <summary>
            Data is added as a child of the target row at the very beginning
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.DropRowPosition.AsChildToEnd">
            <summary>
            Data is added as a child of the target row at the very end
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.DragContentEventArgs">
             <summary>
             Data related to drag and drop operation
             </summary>
             <remarks>.Net Grid supports drag &amp; drop operations with grid rows, moving the rows within a grid and between grids, changing hierarchy, exporting data to 
             applications like Word and Excel in text format and importing data from other applications.
             The following properties should be set to true to use drag &amp; drop feature:
             <code>
             Grid.AllowDrop = true;
             Grid.DragAndDrop.Enabled = true;
             </code>
             <para>To start drag &amp; drop operation the end user should place the cursor over grid rows, left-click and start moving the row. First of all, drag &amp; drop 
             operation raises <see cref="E:Dapfor.Net.Ui.Grid.DragBegin">Grid.DragBegin</see> event that can be used to define available drag &amp; drop effects and content and, if desired, to 
             set <see cref="P:Dapfor.Net.Ui.DragContentBeginEventArgs.Data">DragContentBeginEventArgs.Data</see> property that is an object passed to <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">Control.DoDragDrop()</see> method 
             that can be used to export data to Word or Excel.</para>
             <para>The following events are called during drag &amp; drop operation when the cursor is moved to the target grid, passes over it and leaves it:
             <list type="bullet">
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent">Grid.DragEnterContent</see></item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragOverContent">Grid.DragOverContent</see></item>
             <item><see cref="E:System.Windows.Forms.Control.DragLeave">Control.DragLeave</see></item>
             </list></para>
             <para>The grid calculates the required values and data insertion position, checks whether drag &amp; drop is possible and enables customization of drag &amp; drop effects, 
             data location and data hierarchy. During drag &amp; drop operation the grid shows data insertion location indicators that enable the end user to see where exactly the 
             data will be inserted, including its position in hierarchy. The grid has user-friendly interface. If during drag &amp; drop operation the user keeps the cursor over a 
             row for 1 second, this row is automatically expanded. If the grid has a vertical scrollbar, the grid automatically scrolls if the user moves the cursor above or below the grid.</para>
             <para><b>Data insertion</b></para>
             <para>To insert data into the grid the end user moves the cursor over the grid with left mouse button pressed and the grid highlights the place of data insertion. 
             Two data insertion modes are available:
             <list type="bullet">
             <item>Flat mode, when data is inserted above the row at the current cursor position at the same hierarchy level.</item>
             <item>Data can also be inserted as a child row of the row at the current cursor position.</item>
             </list></para>
             <para>There are 3 other modes that control data insertion and are controlled by <see cref="T:Dapfor.Net.Ui.Grid.GridDragAndDrop">Grid.DragAndDrop.DropMode</see> property:
             <list type="bullet">
             <item>Flat mode only</item>
             <item>Hierarchical mode only</item>
             <item>Combined mode. In this mode the grid has special areas that can be used to set data insertion mode by placing the cursor over those areas. For flat mode such 
             areas are any place above the row except for small +/- icon. To insert data in hierarchical mode you have to place the cursor over this icon. 
             It is also possible to switch from flat mode to hierarchical mode using Shift key.</item>
             </list>
             </para>
             <para>In accordance with possible DragAndDrop effect, the grid supports 3 operations: Copy, Move and Link</para>
             <list type="bullet">
             <item>Copy. This operation creates new rows for data set in <b>DragDropContentEventArgs.Content</b>. <b>DragDropContentEventArgs.Content</b> 
             often contains a collection of rows created in the beginning of drag. In such case hierarchy, selection and expansion are preserved for newly created rows. 
             If <b>DragDropContentEventArgs.Content</b> contains other data than <see cref="T:Dapfor.Net.Ui.Row"/>, the new rows shall be created with relevant <see cref="T:Dapfor.Net.Data.IDataAccessor">DataAccessor</see>. 
             In any case data itself is not copied. If data supports <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface, newly created rows will also get data object notification.</item>
             <item>Move. Data is moved with all information of hierarchy, expansion and selection either within a grid or between grids.</item>
             <item>Link. This operation is similar to Copy, but in this operation DragDropContentEventArgs.Content may contain only Row collection.</item>
             </list>
             <para><b>Drag &amp; drop customization</b></para>
             <para>The grid provides a lot of customization opportunities in the form of event subscription that enable you to modify insertion content, mode and location and 
             to control visual effects of drag &amp; drop operation:
             <list type="bullet">
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragBegin">Grid.DragBegin</see> - controls content and initiation of drag &amp; drop operation. When grids copy or move data in an application they work with content. 
             If you need to send data to Excel, you can set a Data object containing image, string or any other object implementing IDataObject interface. This object is transferred to 
             <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">Control.DoDragDrop</see> method enabling data exchange with external applications.</item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent">Grid.DragEnterContent</see> and <see cref="E:Dapfor.Net.Ui.Grid.DragOverContent">Grid.DragOverContent</see> enable controlling various visual 
             effects and defining data insertion location, data hierarchy and inserted content.</item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragDropContent">Grid.DragDropContent</see> enables direct control of content insertion. If data is inserted from another grid, 
             <b>DragDropContentEventArgs.Content</b> should be defined in advance. It is possible to call any content insertion operation, 
             i.e. <b>DoCopy()/DoMove()/DoLink()</b>. Data will be inserted to the current position via <b>DragDropContentEventArgs.TargetRow</b> and 
             <b>DragDropContentEventArgs.TargetPosition</b>. These parameters can be modified at any moment. If drag &amp; drop operation 
             is initiated by another control or outside the application, <b>DragDropContentEventArgs.Content</b> will have null value. 
             In this case data can be received from <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.Data">DragContentEventArgs.Data</see>, which is an <see cref="T:System.Windows.Forms.IDataObject"/> object. 
             <see cref="T:Dapfor.Net.Ui.DragDropContentEventArgs"/> also provides methods for inserting data to the grid via <see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoCopy">DoCopy(...)</see>/
             <see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoMove">DoMove(...)</see>/<see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoLink(System.Boolean)">DoLink(...)</see> to the position determined by current value of 
             <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.TargetRow"/> and <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.TargetPosition"/>. This provides a possibility to import data to the grid from external applications.</item>
             </list>
             </para>
             </remarks>
             <example>
             To import data, Excel sends a text string formatted with the above-described method. The grid cannot process such string directly, but it has powerful features for 
             transforming data from Excel format to the format of application business data. Below is an example demonstrating exporting/importing data to/from Excel. 
             <code>
             //Implementation of the method, dragging data from the grid   
             private void OnDragBegin(object sender, DragContentBeginEventArgs e)
             {
                  //Create a string to put it to Excel
                  StringBuilder sb = new StringBuilder();
                  foreach (Row row in e.Content)
                  {
                      if (sb.Length &gt; 0) sb.AppendLine();
                      StringBuilder sbRow = new StringBuilder();
                      foreach (Column column in row.Header)
                      {
                          if (sbRow.Length &gt; 0) sbRow.Append("\t");
                          sbRow.Append(row[column.Id].Text);
                      }
                      sb.Append(sbRow);
                  }
                 e.Data = sb.ToString();
             }
            
             //Drag over event handler
             private void OnDragOverContent(object sender, DragContentEventArgs e)
             {
                 //The content is not specified. The data can be found in e.Data (IDataObject)
                 if (e.Content == null)
                 {
                     e.Effect = DragDropEffects.Copy;
                 }
             }
            
             //Drop data event handler
             private void OnDragDropContent(object sender, DragDropContentEventArgs e)
             {
                 if (e.Content == null)
                 {
                     string data = e.Data.GetData(typeof(string)) as string;
                     if (!string.IsNullOrEmpty(data))
                     {
                         string[] lines = data.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                         foreach (string line in lines)
                         {
                             string[] values = line.Split(new string[] { "\t" }, StringSplitOptions.None);
            
                             //Add an array of values to the grid. Here you can also create your own object and insert it to the grid 
                             e.DoCopy(values);
                         }
                         e.Handled = true;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.DragContentEventArgs.#ctor(Dapfor.Net.Ui.Grid,System.Windows.Forms.Control,System.Collections.IEnumerable,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects,System.Windows.Forms.IDataObject,Dapfor.Net.Ui.Row,Dapfor.Net.Ui.DropRowPosition,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.DragContentEventArgs"/> class.
            </summary>
            <param name="targetGrid">The target grid.</param>
            <param name="source">The source.</param>
            <param name="content">The content.</param>
            <param name="allowedEffects">The allowed effects.</param>
            <param name="effect">The effect.</param>
            <param name="data">The data.</param>
            <param name="targetRow">The target row.</param>
            <param name="targetPosition">The target position.</param>
            <param name="x">The x-coordinate of the mouse pointer in pixels.</param>
            <param name="y">The y-coordinate of the mouse pointer in pixels.</param>
            <param name="keyState">The current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.TargetGrid">
            <summary>
            Gets the target grid.
            </summary>
            <value>The target grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.Content">
            <summary>
            Gets the content. Usually collection of <see cref="T:Dapfor.Net.Ui.Row"/> objects
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.Data">
            <summary>
            Gets the data object. Usually specified in the case of drag and drop operation between different applications.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.AllowedEffects">
            <summary>
            Gets the allowed effects.
            </summary>
            <value>The allowed effects.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.Effect">
            <summary>
            Gets or sets the current effect.
            </summary>
            <value>The effect.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.TargetRow">
            <summary>
            Gets or sets the target row.
            </summary>
            <value>The target row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.TargetPosition">
            <summary>
            Gets or sets the target position.
            </summary>
            <value>The target position.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.X">
            <summary>
            Gets the x-coordinate of the mouse pointer in pixels.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.Y">
            <summary>
            Gets the y-coordinate of the mouse pointer in pixels.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEventArgs.KeyState">
             <summary>
            Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons. 
             </summary>
             <value>
             The current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons. 
             </value>
        </member>
        <member name="T:Dapfor.Net.Ui.DragContentBeginEventArgs">
            <summary>
            Data related to the beginning of the drag and drop operation.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.DragContentBeginEventArgs.#ctor(Dapfor.Net.Ui.Grid,System.Collections.Generic.IEnumerable{Dapfor.Net.Ui.Row})">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.DragContentBeginEventArgs"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="content">The content.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentBeginEventArgs.Source">
            <summary>
            Gets the source of the drag &amp; drop operation.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentBeginEventArgs.AllowedEffects">
            <summary>
            Gets or sets the allowed effects.
            </summary>
            <value>The allowed effects.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentBeginEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this drag &amp; drop operation should be cancelled.
            </summary>
            <value><c>true</c> if the drag &amp; drop should be cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentBeginEventArgs.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentBeginEventArgs.Data">
            <summary>
            Gets or sets the data object for drad &amp; drop operations between different applications.
            </summary>
            <value>The data to drag.</value>
            <remarks>
            If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<see cref="T:System.String"/>, <see cref="T:System.Drawing.Bitmap"/>, or <see cref="T:System.Drawing.Imaging.Metafile"/>), 
            or an object that implements <see cref="T:System.Runtime.Serialization.ISerializable"/> or <see cref="T:System.Windows.Forms.IDataObject"/>.
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.DragContentEndEventArgs">
            <summary>
            Data related to drag and drop operation.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.DragContentEndEventArgs.#ctor(Dapfor.Net.Ui.Grid,System.Windows.Forms.DragDropEffects)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.DragContentEndEventArgs"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="finalEffect">The final effect.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEndEventArgs.Source">
            <summary>
            Gets the source of the drag &amp; drop operation.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.DragContentEndEventArgs.FinalEffect">
            <summary>
            Gets the final effect that was performed during the drag-and-drop operation.
            </summary>
            <value>The final effect.</value>
        </member>
        <member name="T:Dapfor.Net.Theming.Theme">
            <summary>
            The theme defines style and appearance of controls in Dapfor library
            </summary>
            <remarks><para>Themes are sets of properties and colors for each control. They define style and appearance of controls in Dapfor library. 
            In addition to properties and cooler themes contain code for specific painting of various control elements (including .Net Grid).</para>
            <para>The grid supports attachment of themes via Grid.Theme property. Dapfor's library contains several predefined themes such as <see cref="P:Dapfor.Net.Theming.Theme.XPStyle">Theme.XPStyle</see>, <see cref="P:Dapfor.Net.Theming.Theme.Silver">Theme.Silver</see>, 
            etc. The list of predefined themes is stored in <see cref="T:Dapfor.Net.Theming.KnownTheme">Dapfor.Net.Theming.KnownTheme</see> enumeration. Accordingly, theme object can be obtained with the following code.</para>
            <code>
            grid1.Theme = Theme.XPStyle;
            grid2.Theme = Theme.FromKnownTheme(KnownTheme.XPStyle);
            </code>
            <para>A programmer may also create his own themes, including those based on already existing themes. The example below demonstrates creation of 
            an arbitrary theme on the basis of an existing theme. Therefore, all grids using the same theme shall look in the same way.</para>
            <code>
            Theme myTheme = new Theme("MyTheme", Theme.Silver);
            myTheme.Renderers.GridRenderer.Appearance.ColumnNormal.BackColor = Color.LightPink;
            myTheme.Renderers.GridRenderer.Appearance.ColumnNormal.GradientEndBackColor = ControlPaint.Dark(Color.LightPink);
            grid.Theme = myTheme;
            </code>
            <para>Dapfor’s library provides a convenient API for theme changing. For this purpose it uses a special default theme that is returned by <see cref="P:Dapfor.Net.Theming.Theme.Default">Theme.Default</see> property. 
            If a grid uses this theme, it subscribes to <see cref="E:Dapfor.Net.Theming.Theme.DefaultThemeChanged">Theme.DefaultThemeChanged</see> events. Therefore, when a new theme is set in <see cref="P:Dapfor.Net.Theming.Theme.Default">Theme.Default</see> 
            property, all controls subscribed to this theme shall receive notifications and automatically change their appearance.</para>
            <code>
            grid1.Theme = Theme.Default;
            grid2.Theme = Theme.Default;
            
            Theme myTheme = new Theme("MyTheme", Theme.Silver);
            Theme.Default = myTheme;
            </code>
            <para>Grid themes have been developed to enable the programmer to change appearance of any grid elements. When a theme is set for the grid, this grid uses colors 
            and renderer defined for each theme. In addition to that a programmer may modify colors for headers, columns, rows etc using properties like <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, etc.</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Theming.Theme.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Theming.Theme"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Theming.Theme.#ctor(System.String,Dapfor.Net.Theming.Theme)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Theming.Theme"/> class.
            </summary>
            <param name="name">The theme name.</param>
            <param name="theme">The theme.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.Theme.#ctor(System.String,Dapfor.Net.Theming.IThemeRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Theming.Theme"/> class.
            </summary>
            <param name="name">The theme name.</param>
            <param name="renderers">The renderer.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.Theme.FromKnownTheme(Dapfor.Net.Theming.KnownTheme)">
            <summary>
            Provides a <see cref="T:Dapfor.Net.Theming.Theme"/> by its known type. 
            </summary>
            <param name="knownTheme">The known theme.</param>
            <returns><see cref="T:Dapfor.Net.Theming.Theme"/> object</returns>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.Default">
            <summary>
            Gets or sets the default theme.
            </summary>
            <value>The default theme.</value>
            <remarks>When the default theme is changed, all components, rendering with the default theme will receive a notification 
            about default theme changing.</remarks>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.Silver">
            <summary>
            Gets the silver theme.
            </summary>
            <value>The silver theme.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.YellowNight">
            <summary>
            Gets the professional theme.
            </summary>
            <value>The professional theme.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.XPStyle">
            <summary>
            Gets the default microsoft theme.
            </summary>
            <value>The default microsoft theme.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.Chrome">
            <summary>
            Gets the chrome theme.
            </summary>
            <value>The chrome theme.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.Thundercloud">
            <summary>
            Gets the thundercloud theme.
            </summary>
            <value>The thundercloud theme.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.LightTaupe">
            <summary>
            Gets the light taupe theme.
            </summary>
            <value>The light taupe theme.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.BluesAndYellows">
            <summary>
            Gets the blues and yellows theme.
            </summary>
            <value>The blues and yellows theme.</value>
        </member>
        <member name="E:Dapfor.Net.Theming.Theme.DefaultThemeChanged">
            <summary>
            Occurs when the default theme is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.Name">
            <summary>
            Gets the theme name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.Renderers">
            <summary>
            Gets the renderer collection.
            </summary>
            <value>The renderer collection.</value>
        </member>
        <member name="T:Dapfor.Net.Theming.Theme.ThemeEditor">
            <summary>
            Theme editor
            </summary>
        </member>
        <member name="M:Dapfor.Net.Theming.Theme.ThemeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Theming.Theme.ThemeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Theming.Theme.ThemeEditor.IsDropDownResizable">
            <summary>
            Gets a value indicating whether drop-down editors should be resizable by the user.
            </summary>
            <value></value>
            <returns>true if drop-down editors are resizable; otherwise, false.
            </returns>
        </member>
        <member name="T:Dapfor.Net.Editors.FormatEditor">
            <summary>
            Edits <see cref="T:Dapfor.Net.Formats.StringFormat"/> object
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.FormatEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.FormatEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="T:Dapfor.Net.Internal.NodeContainer">
            <summary>
            Summary description for NodeContainer.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.NodeContainer.Find(Dapfor.Net.Internal.Node)">
            <summary>
            Finds the position of the <see cref="T:Dapfor.Net.Internal.Node"/> in the parent. The position may be as visible as invisible.
            Do not confuse with the row index in the <see cref="T:Dapfor.Net.Ui.RowCollection"/>.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Internal.NodeContainer.FastCompare(Dapfor.Net.Internal.Node,Dapfor.Net.Internal.Node)">
            <summary>
            Compares positions of x &amp; y
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>pos(x) - pos(y)</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.NodeContainer.NodeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one
            is less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>
            	<list type="table">
            		<listheader>
            			<term>Value</term><description>Condition</description>
            		</listheader>
            		<item>
            			<term> Less than zero</term><description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            		</item>
            		<item>
            			<term> Zero</term><description><paramref name="x"/> equals <paramref name="y"/>.</description>
            		</item>
            		<item>
            			<term> Greater than zero</term><description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            		</item>
            	</list>
            </returns>
            <exception cref="T:System.ArgumentException"><para>Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.</para><para>-or-</para><para><paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other.</para></exception>
        </member>
        <member name="T:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter2">
            <summary>
            Column filter that enables multiple value selection.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter2.IsFiltered(Dapfor.Net.Ui.Row)">
            <summary>
            Determines whether the specified <see cref="T:Dapfor.Net.Ui.Row"/> is filtered.
            </summary>
            <param name="row">The row.</param>
            <returns>
            	<c>true</c> if the specified row is filtered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter2.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter2.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter2.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter2.FilterUpdated">
            <summary>
            Occurs when the filter's conditions are changed.
            </summary>
            <remarks>This event is raised to force the <see cref="T:Dapfor.Net.Ui.Grid"/> to verify the state of all inserted <see cref="T:Dapfor.Net.Ui.Row"/>s.</remarks>
            <threadsafety>This event may be raised from any thread. If the <see cref="T:Dapfor.Net.Ui.Grid"/> receives a notification from the non-GUI thread, then it will synchronize
            the calling thread with the GUI thread in the asynchronous way without blocking the calling thread. </threadsafety>
        </member>
        <member name="P:Dapfor.Net.Filters.ValueEqualityCheckBoxFilter2.IsDropDownResizable">
            <summary>
            Returns true.
            </summary>
            <value></value>
            <returns>Always <c>true</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Internal.ISortComparer.Compare(System.Collections.Generic.IList{Dapfor.Net.Internal.SortInfo},Dapfor.Net.Internal.Node,Dapfor.Net.Internal.Node)">
            <summary>
            Compares two items and returns a value indicating whether one
            is less than, equal to or greater than the other.
            </summary>
            <param name="sort">The sort.</param>
            <param name="x">First item to compare.</param>
            <param name="y">Second item to compare.</param>
            <returns>
            	<list type="table">
            		<listheader>
            			<term>Value</term><description>Condition</description>
            		</listheader>
            		<item>
            			<term> Less than zero</term><description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            		</item>
            		<item>
            			<term> Zero</term><description><paramref name="x"/> equals <paramref name="y"/>.</description>
            		</item>
            		<item>
            			<term> Greater than zero</term><description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            		</item>
            	</list>
            </returns>
        </member>
        <member name="M:Dapfor.Net.Internal.RowComparer.Compare(System.Collections.Generic.IList{Dapfor.Net.Internal.SortInfo},Dapfor.Net.Internal.Node,Dapfor.Net.Internal.Node)">
            <summary>
            Compares two items and returns a value indicating whether one
            is less than, equal to or greater than the other.
            </summary>
            <param name="sort">The sort.</param>
            <param name="x">First item to compare.</param>
            <param name="y">Second item to compare.</param>
            <returns>
            	<list type="table">
            		<listheader>
            			<term>Value</term><description>Condition</description>
            		</listheader>
            		<item>
            			<term> Less than zero</term><description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            		</item>
            		<item>
            			<term> Zero</term><description><paramref name="x"/> equals <paramref name="y"/>.</description>
            		</item>
            		<item>
            			<term> Greater than zero</term><description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            		</item>
            	</list>
            </returns>
        </member>
        <member name="T:Dapfor.Net.Ui.ColumnScrollType">
            <summary>
            Indicates column scroll mode
            </summary>
            <code>
            public void ColumnScrollBehaviour(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                grid.Headers.Add(new Header());
                grid.Headers.Add(new Header());
            
                //Scroll columns each time when the horizontal scroll changes
                grid.Headers[0].ScrollType = ColumnScrollType.Normal;
            
                //Scroll columns only if there is no more space on the right on the last visible column
                grid.Headers[1].ScrollType = ColumnScrollType.Optimized;
            }
            </code>
        </member>
        <member name="F:Dapfor.Net.Ui.ColumnScrollType.Optimized">
            <summary>
            Tries to fill unused space on the right of the columns where it is possible
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ColumnScrollType.Normal">
            <summary>
            Scrolls the grid's content in a normal way, leaving unused space on the right of the last column.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.ColumnStretchMode">
            <summary>
            Indicates how the widths of the columns in a grid are stretched
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ColumnStretchMode.None">
            <summary>
            The widths of the columns are not stretched
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ColumnStretchMode.All">
            <summary>
            The widths of all the columns are stretched so that they evenly occupy the available space
            </summary>
        </member>
        <member name="T:Dapfor.Net.Exceptions.FieldDeclarationException">
             <summary>
             This exception is raised when two or more fields in a user-defined class have the same identifiers
             </summary>
             <remarks>
             <code>
             //Class with identical field identifiers
             public class Product
             {
                 private string name;
                 private string description;
            
                 public string Name
                 {
                     get { return name; }
                     set { name = value; }
                 }
            
                 //Modify default field identifier
                 [Field("Name")]
                 public string Description
                 {
                     get { return description; }
                     set { description = value; }
                 }
             }
             
             void PopulateGrid(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Name"));
                 grid.Headers[0].Add(new Column("Description"));
            
                 //The grid throws FieldDeclarationException because Product has two identical fields
                 grid.Rows.Add(new Product());
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Exceptions.FieldDeclarationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Exceptions.FieldDeclarationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Dapfor.Net.Exceptions.FieldDeclarationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Exceptions.FieldDeclarationException"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Exceptions.FieldDeclarationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Exceptions.FieldDeclarationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Dapfor.Net.Exceptions.FieldDeclarationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Exceptions.FieldDeclarationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Dapfor.Net.Data.FieldAttribute">
             <summary>
             Enables property identifier changes.
             </summary>
             <remarks>By default property identifier equals to property name. This attribute enables to change this identifier. 
             <code>
             public class Product
             {
                 //Some fields
                 private double price;
                 private double lastPrice;
            
                 //Property, which is accessed by the "LastPrice" identifier
                 public double LastPrice
                 {
                     get { return lastPrice; }
                 }
            
                 //Property, which is accessed by the "CurrentPrice" identifier
                 [Field("CurrentPrice")]
                 public double Price
                 {
                     get { return price; }
                 }
             }
            
             public void HowToUseFieldAttribute(Grid grid)
             {
                 //Initialize the header
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("LastPrice"));
                 grid.Headers[0].Add(new Column("CurrentPrice"));
            
                 //Add a product to the grid. 
                 grid.Rows.Add(new Product());
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.FieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.FieldAttribute"/> class.
            </summary>
            <param name="id">The field identifier.</param>
        </member>
        <member name="P:Dapfor.Net.Data.FieldAttribute.Id">
            <summary>
            Gets the field identifier.
            </summary>
            <value>The field identifier.</value>
        </member>
        <member name="T:Dapfor.Net.Data.DataObjectAccessor">
             <summary>
             Wraps an object of arbitrary class and provides access to it via reflection. Can be a part of event-driven model. 
             </summary>
             <remarks> 
             <para>In .Net 1.0 a very important interface was added to the <see cref="N:System.ComponentModel">System.ComponentModel</see> namespace <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
             It is used to notify clients(typically binding clients) that a property value has changed. .Net Grid can bind to a data source for implementing such operations as automated real-time updates, sorting, filtering and data grouping. It's important to emphasize that all notifications are synchronized by the .Net Grid with GUI thread, which in turn means that data can be changed not only in GUI thread but also in any other thread, safely reporting to the .Net Grid about value changes.
             </para>
             <para> A typical application consists of a set of classes that represent its business logic. In object-oriented programming this logic should always be present in some form. This business logic is represented by rows in the .Net Grid without regard to specific model used. When a programmer changes data object values in non-event-driven data grids, he has to find rows in the data grid and sort them, group them and verify their filtering criteria. It's important to remember that in well-designed applications it is necessary to take care about thread safety. In event-driven model, a data grid receives notifications about data changes and performs all the above mentioned operations. </para>
             <code>
             //Some data object
             public class Product : INotifyPropertyChanged
             {
                 //Some fields
                 private double price;
                 private DateTime maturity;
            
                 [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                 public double Price
                 {
                     get { return price; }
                     set 
                     {
                         price = value;
                         if(PropertyChanged != null)
                         {
                             PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                         }
                     }
                 }
            
                 public DateTime Maturity
                 {
                     get { return maturity; }
                 }
            
                 public event PropertyChangedEventHandler PropertyChanged;
             }
            
             //Using sample
             public void AddDataObjectToGrid(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Maturity"));
            
            
                 //Add a data object to grid. The object is implicitly wrapped with DataObjectAccessor
                 grid.Rows.Add(new Product());
            
                 //Add a data object to grid and wrap it explicitly with DataObjectAccessor
                 //(You can provide your custom implementation of the data accessor). 
                 grid.Rows.Add(new DataObjectAccessor(new Product()));
            
                 //Build some hierarchy...
                 grid.Rows[0].Add(new Product());
            
                 //Or from another thread - this is safe.
                 ThreadPool.QueueUserWorkItem(delegate
                 {
                     grid.Rows[0].Add(new Product());
                 });
             }    
             </code>
             </remarks>
        </member>
        <member name="T:Dapfor.Net.Data.DataObjectAccessorBase">
            <summary>
            Base data accessor
            </summary>
        </member>
        <member name="M:Dapfor.Net.Data.DataObjectAccessorBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.DataObjectAccessor"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the <c>dataObject</c> is null.</exception>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="M:Dapfor.Net.Data.DataObjectAccessorBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.DataObjectAccessorBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.DataObjectAccessorBase.FireFieldChanged(Dapfor.Net.Data.IDataField)">
            <summary>
            Fires the field changed.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:Dapfor.Net.Data.DataObjectAccessorBase.Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.DataObjectAccessorBase.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.DataObjectAccessorBase.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether the access to the fields of the data object by their field identifier is available.
            </summary>
            <value>
            	Always <c>true</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.DataObjectAccessorBase.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value><c>true</c> it the data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.</value>
        </member>
        <member name="P:Dapfor.Net.Data.DataObjectAccessorBase.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.DataObjectAccessorBase.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>The underliyng data object.</value>
        </member>
        <member name="P:Dapfor.Net.Data.DataObjectAccessorBase.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="E:Dapfor.Net.Data.DataObjectAccessorBase.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Data.DataObjectAccessor.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.DataObjectAccessor"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the <c>dataObject</c> is null.</exception>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="P:Dapfor.Net.Data.DataObjectAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value><c>true</c> it the data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.</value>
        </member>
        <member name="E:Dapfor.Net.Data.DataObjectAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Threading.NamespaceDoc">
            <summary>
            Classes to handle the multithreading aspects in applications.
            </summary>
            <remarks>
            <para>All .Net controls are single-threaded, which means that their methods can be called only in thread where they are running, i.e. the GUI thread. 
            This thread also processes all window messages. To make sure that application will run safely, you have to synchronize threads. There are two types of 
            synchronization: synchronous and asynchronous. These types are available via <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">Control.Invoke()</see> and <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">Control.BeginInvoke()</see> methods accordingly. 
            The main difference between these two methods is that synchronous calls block the calling thread until the end of <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">Control.Invoke()</see> function call, 
            while asynchronous calls block the thread only for the time while a delegate is added to the queue. Delegate code and the calling thread are executed simultaneously. </para>
            
            <para>All things we described above are the basics of multi-threaded application development, especially with regard to GUI interaction. However this seeming simplicity may cause dire consequences. The following example shows, how an application may deadlock.</para>
            <code>
            //Some class
            public class Product
            {
                private readonly object synchro = new object();
                private double price;
            
                //Threadsafe property
                public double Price
                {
                    get
                    {
                        lock (synchro)
                        {
                            return price;
                        }
                    }
                    set
                    {
                        //When price is changed, this object sends a notification. 
                        lock (synchro)
                        {
                            price = value;
                            if (PriceChanged != null)
                            {
                                PriceChanged(this, EventArgs.Empty);
                            }
                        }
                    }
                }
            
                public event EventHandler PriceChanged;
            }
            
            //Some control
            public class DeadLockExample : Control
            {
                public void SubscribeToProduct(Product product)
                {
                    product.PriceChanged += OnProduct_PriceChanged;
                }
            
                private void OnProduct_PriceChanged(object sender, EventArgs e)
                {
                    if (InvokeRequired)
                    {
                        //Call OnProduct_PriceChanged in the GUI thread.
                        Invoke(new EventHandler(OnProduct_PriceChanged), new object[] {sender, e});
                    }
                    else
                    {
                        //We are in the GUI thread. The calling thread is blocked by Invoke() method
            
                        //Get a product
                        Product updatedProduct = (Product) sender;
            
                        //Get a price... Boom! The GUI thread is deadlocked with the calling thread!
                        double price = updatedProduct.Price;
                    }
                }
            }
            
            //If we change product price in non-GUI thread, the application deadlocks
            public void UpdateProductPrice(Product product)
            {
                ThreadPool.QueueUserWorkItem(delegate
                {
                    product.Price = 10;
                });
            }
            </code>
            <para>Today .Net Grid is the only component that supports working with data that is added, removed and updated via non-GUI threads. The grid may work in several modes. 
            We shall describe the most important modes and explain how thread safety is achieved in these modes.</para>
            <list type="bullet">
            <item>Non-event mode. Data is added to the grid and updated as follows: 
            <code>
            grid.Rows.Add(new object[]{"value1", 123, true, DateTime.Now});
            
            //Data is updated by calling Cell.Value property.
            Row row = ...;
            Cell cell = row[0] ;
            cell.Value = "value2";
            </code>
            All calls for adding, modifying and removing data are thread safe. In all cases synchronization is performed with synchronous method blocking the calling thread. We also want 
            to add an important note about data updating. Data is usually repainted in two stages firstly, <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">Control.Invalidate()</see> method is 
            called and then the required area is repainted via WM_PAINT message. WM_PAINT message is not generated within <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">Control.Invalidate()</see> function, but arrives when it is completed. From practical point of view this means that data is repainted is already unblocked and therefore there is no risk of deadlock. 
            </item>
            <item>Event-driven model implies working with objects of classes that implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. When a grid received a notification 
            from this interface, it repaints, sorts, groups and invalidates data of this sole object. In this case you can use <see cref="P:Dapfor.Net.Ui.Grid.Threadsafety">Grid.Threadsafety</see> property 
            to choose whether to use synchronous or asynchronous method.</item>
            <item>The third method of grid operation is called data source binding. Both <see cref="P:Dapfor.Net.Ui.Grid.DataSource">Grid.DataSource</see> and <see cref="P:Dapfor.Net.Ui.Grid.DataMember">Grid.DataMember</see> methods 
            are thread-safe with synchronous data processing method. Dapfor .Net Grid supports data sources that implement <see cref="T:System.ComponentModel.IBindingList"/> interface and can receive <see cref="E:System.ComponentModel.IBindingList.ListChanged">IBindingList.ListChanged</see> 
            notifications from any thread. Synchronization is performed with synchronous method. We can say that today it is the only existing thread-safe data binding implementation 
            among the grids.</item>
            </list>
            <para>As we have said above, ensuring thread safety is not a trivial task for application developers. Complex modern applications may contain a lot of assemblies. Some of 
            them may contain codes with graphical controls, others may contain business logic, various math libraries, code for TCP/IP interaction, etc. However, 
            limitations related to GUI operation only in one thread and thread synchronization method require unneeded and dangerous dependencies of business logic from graphical components 
            (<see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">Control.Invoke</see> / <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">Control.BeginInvoke</see>). This may seriously violate 
            the principle of business logic independence from its presentation. Dapfor .Net Grid doesn't just enable thread synchronization, but also makes it possible to completely 
            avoid such dependencies using an event-driven model. It means that if the application is well architected, business logic assemblies will not (and should not!) depend on Dapfor 
            assemblies and <see cref="N:System.Windows.Forms">System.Windows.Forms</see> libraries.</para>
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Editors.TrackBarEditor">
            <summary>
            TrackBar editor to edit numeric values. 
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.TrackBarEditor.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Editors.TrackBarEditor"/> class.
            </summary>
            <param name="minValue">The lower limit of the range.</param>
            <param name="maxValue">The upper limit of the range.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.TrackBarEditor.GetPaintCellSupported">
            <summary>
            Gets a value, indicating whether this editor supports <see cref="T:Dapfor.Net.Ui.Cell"/> painting.
            </summary>
            <returns>
            	Always <c>true</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.TrackBarEditor.PaintCell(Dapfor.Net.Ui.PaintCellEventArgs)">
            <summary>
            Paints the cell.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.PaintCellEventArgs"/> instance containing the data to paint the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.TrackBarEditor.EditCell(Dapfor.Net.Editors.IGridEditorService,Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StartEditReason)">
            <summary>
            Edits the cell.
            </summary>
            <param name="service">The service.</param>
            <param name="cell">The cell.</param>
            <param name="reason">The reason, why the editing is started.</param>
            <returns>The reason, why the editing was stopped.</returns>
        </member>
        <member name="P:Dapfor.Net.Editors.TrackBarEditor.MinValue">
            <summary>
            Gets the lower limit of the range this<see cref="T:Dapfor.Net.Editors.TrackBarEditor"/> is working with. 
            </summary>
            <value>The min value.</value>
        </member>
        <member name="P:Dapfor.Net.Editors.TrackBarEditor.MaxValue">
            <summary>
            Gets the upper limit of the range this <see cref="T:Dapfor.Net.Editors.TrackBarEditor"/> is working with. 
            </summary>
            <value>The max value.</value>
        </member>
        <member name="P:Dapfor.Net.Editors.TrackBarEditor.Navigable">
            <summary>
            Gets a value indicating whether this editor is navigable.
            </summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.Severity">
            <summary>
            Severity of a log message
            </summary>
            <example>
            <code>
            public enum Way
            {
                Buy,
                Sell,
            }
            
            public sealed class Quote
            {
                private readonly long qty;
                private readonly decimal price;
                private readonly Way way;
            	
                public Quote(long qty, decimal price, Way way)
                {
                    this.qty = qty;
                    this.price = price;
                    this.way = way;
                }
            
                public long Qty
                {
                    get { return qty; }
                }
                public decimal Price
                {
            	    get { return price; }
                }
                public Way Way
                {
                    get { return way; }
                }
            }
            
            Logger.Info("Hey, I just got a new price", new Quote(31911, 41, Way.Buy));
            </code>
            </example>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.Severity.Debug">
            <summary>
            The log message has 'Debug' severity
            </summary>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.Severity.Info">
            <summary>
            The log message has 'Info' severity
            </summary>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.Severity.Warning">
            <summary>
            The log message has 'Warning' severity
            </summary>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.Severity.Error">
            <summary>
            The log message has 'Error' severity
            </summary>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.Severity.Fatal">
            <summary>
            The log message has 'Fatal' severity
            </summary>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.LogMessageEventArgs">
            <summary>
            Information on log message.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.LogMessageEventArgs.#ctor(Dapfor.Net.Diagnostics.LogMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Diagnostics.LogMessageEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogMessageEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.Logger">
            <summary>
            Thread-safe container that stores log messages
            </summary>
            <remarks>
            <para><see cref="T:Dapfor.Net.Diagnostics.Logger">.Net Logger</see> is a thread-safe system for storing and representation of various log messages. Besides text messages, programmer 
            can associate with data any object that can carry extended information. For example, it can be a price snapshot, quantity value of a product or a pointer 
            to the product object. When a programmer analyzes a log file, he can not just review messages, but also vizw product characteristics that can be dynamically changed. 
            There are several possibilities of object association:  
            <list type="bullet">
            <item>Creating a hierarchical representation of associated object's properties and its values</item>
            <item>Displaying a list of properties with its values in a popup tooltip</item>
            <item>Transferring an object associated with message to the <see cref="T:Dapfor.Net.Diagnostics.Inspector">.Net Inspector</see> for detailed viewing and editing</item>
            </list>
            <code>
            public enum Way
            {
                Buy,
                Sell,
            }
            
            public sealed class Quote
            {
                private readonly long qty;
                private readonly decimal price;
                private readonly Way way;
            	
                public Quote(long qty, decimal price, Way way)
                {
                    this.qty = qty;
                    this.price = price;
                    this.way = way;
                }
            
                public long Qty
                {
                    get { return qty; }
                }
                public decimal Price
                {
            	    get { return price; }
                }
                public Way Way
                {
                    get { return way; }
                }
            }
            
            Logger.Info("Hey, I just got a new price", new Quote(31911, 41, Way.Buy));
            </code>
            </para>
            <para><b>How much memory does the .Net Logger consume?</b></para>
            <para>The logging system is divided by two parts: </para>
            <list type="bullet">
            <item>The logger that stores a list of messages</item>
            <item>The viewer that displays them</item>
            </list>
            <para>The logging system by itself doesn't consumes a lot of memory. On the average, memory consumption does not exceed 40 bytes per message. In other words, it consumes almost 40 MB for 1 million of lines. Data logging occurs like this: 
            <code>
            Logger.Info("some message");
            </code>
            </para>
            <para>Memory consumption of the Viewer is about 150-160 bytes per message. The maximum quantity of the lines in the grid can be limited via 
            <see cref="P:Dapfor.Net.Diagnostics.LogViewer.MaxRowCount">LogViewer.MaxRowCount</see> = MAX_VALUE. If the MAX_VALUE is exceeded, older messages are not displayed.</para>
            <para>Besides that, memory consumption depends on size and type of object that can be stored together with the log entry. On the average, for simple objects this size equals 30-40 bytes per message. From the practical point of view, when the number of rows is limited to 100,000, memory consumption should not exceed 60-100 MB per 1,000,000 messages.</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Clear">
            <summary>
            Removes all messages from the container.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Info(System.String)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Info"/> severity.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Info(System.String,System.Object)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Info"/> severity and extended data.
            </summary>
            <param name="message">The message.</param>
            <param name="dataObject">The extended data.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Debug(System.String)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Debug"/> severity.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Debug(System.String,System.Object)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Debug"/> severity and extended data.
            </summary>
            <param name="message">The message.</param>
            <param name="dataObject">The extended data.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Warn(System.String)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Warning"/> severity.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Warn(System.String,System.Object)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Warning"/> severity and extended data.
            </summary>
            <param name="message">The message.</param>
            <param name="dataObject">The extended data.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Error(System.String)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Error"/> severity.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Error(System.String,System.Object)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Error"/> severity and extended data.
            </summary>
            <param name="message">The message.</param>
            <param name="dataObject">The extended data.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Fatal(System.String)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Fatal"/> severity.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.Logger.Fatal(System.String,System.Object)">
            <summary>
            Adds a log message with <see cref="F:Dapfor.Net.Diagnostics.Severity.Fatal"/> severity and extended data.
            </summary>
            <param name="message">The message.</param>
            <param name="dataObject">The extended data.</param>
        </member>
        <member name="E:Dapfor.Net.Diagnostics.Logger.NewMessage">
            <summary>
            Occurs when a new log message is added to the <see cref="T:Dapfor.Net.Diagnostics.Logger"/>. While subscription for this event, the <see cref="T:Dapfor.Net.Diagnostics.Logger"/> will notify the subscriber with all existing messages.
            </summary>
        </member>
        <member name="E:Dapfor.Net.Diagnostics.Logger.ClearMessages">
            <summary>
            Occurs when the <see cref="T:Dapfor.Net.Diagnostics.Logger"/> removes all log messages.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.InspectorForm">
            <summary>
            Top level form with <see cref="T:Dapfor.Net.Diagnostics.Inspector">.Net Inspector</see> control.
            </summary>
            <remarks>
            <para><see cref="T:Dapfor.Net.Diagnostics.Inspector">.Net Inspector</see> is a powerful and thread-safe tool for applications debugging. It can be used to inspect business logic level 
            of an application in real-time mode and to alter various application parameters. It's a common practice in software development to put break points 
            in certain lines of code to view and alter values of certain variables in the IDE. When a developer inspects values through the IDE, the application is 
            suspended. It is convenient for debugging simple applications. But if your application has lots of threads and timers, the debugging process becomes a really challenging task.</para>
            <para>.Net Inspector is an additional tool among already existing debugging facilities. Besides displaying values of variables for different objects, .Net Inspector also enables a developer to edit these values via built-in editors at the application run-time. Moreover, a developer can inspect other objects reffered by the inspected object. In other words, a programmer can view the whole business layer logic of the application from the inside.</para>
            <para>Together with the <see cref="T:Dapfor.Net.Diagnostics.LogViewer">logging system</see>, .Net Inspector provides a perfect opportunity to dramatically reduce application debugging time and to conceive the way of the application works.</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.InspectorForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Diagnostics.InspectorForm"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.InspectorForm.Inspect(System.Object)">
            <summary>
            Inspects the specified data object.
            </summary>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.InspectorForm.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Dapfor.Net.Diagnostics.InspectorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.InspectorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.InspectorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.PrintGridPageEventArgs">
             <summary>
             Provides data and methods for reporting
             </summary>
             <remarks><para>Grid provides standard printing and print preview features via <see cref="T:System.Drawing.Printing.PrintDocument"/> object that enables document printing and previewing.</para>
             <para>The example below demonstrates implementation of document preview feature:
             <code>
             public void PrintPreview(Grid grid)
             {
                PrintPreviewDialog ppd = new PrintPreviewDialog();
                ppd.Document = grid.PrintDocument;
                ppd.ShowDialog(grid);
             }
             </code></para>
            <para>The following example demonstrates implementation of content printing feature.
             <code>
             public void PrintContent(Grid grid)
             {
                PrintDialog pd = new PrintDialog();
                pd.Document = grid.PrintDocument;
                pd.ShowDialog(grid);
             }
             </code></para>
             <para>
             The grid provides callback feature for print customization. This feature can also be used to customize page headers and footers:
             <code>
             grid.PrintPage += delegate(object sender, PrintGridPageEventArgs e)
             {
                 //Print a page header
                 Rectangle rcHeader = new Rectangle(e.MarginBounds.X, e.PageBounds.Y, e.MarginBounds.Width, e.MarginBounds.Y - e.PageBounds.Y);
                 using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcHeader.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Far;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString("This is a page header. Print your text here!", SystemFonts.MenuFont, SystemBrushes.GrayText, rcHeader, sf);    
                 }
             
                 //Print a page footer
                 Rectangle rcFooter = new Rectangle(e.MarginBounds.X, e.MarginBounds.Bottom, e.MarginBounds.Width, e.PageBounds.Bottom - e.MarginBounds.Bottom);
                 using (System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
                 {
                     rcFooter.Inflate(0, -10);
                     sf.LineAlignment = StringAlignment.Near;
                     sf.Alignment = StringAlignment.Center;
                     e.Graphics.DrawString(string.Format("Page {0} of {1}\r\nThis is a page footer. Print your text here!", e.PageNumber, e.PagesCount), SystemFonts.MenuFont, SystemBrushes.GrayText, rcFooter, sf);
                 }
             }
             </code></para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.PrintGridPageEventArgs.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PrintGridPageEventArgs.PageSettings">
            <summary>
            Gets the page settings.
            </summary>
            <value>The page settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PrintGridPageEventArgs.PageBounds">
            <summary>
            Gets the page bounds.
            </summary>
            <value>The page bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PrintGridPageEventArgs.MarginBounds">
            <summary>
            Gets the margin bounds.
            </summary>
            <value>The margin bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PrintGridPageEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PrintGridPageEventArgs.PageNumber">
            <summary>
            Gets the page number.
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PrintGridPageEventArgs.PagesCount">
            <summary>
            Gets the total count of pages.
            </summary>
            <value>The pages count.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PrintGridPageEventArgs.HasMorePages">
            <summary>
            Gets or sets a value indicating whether an additional page should be printed.
            </summary>
            <value>
            	<c>true</c> an additional page should be printed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dapfor.Net.Theming.KnownTheme">
            <summary>
            Specifies predefined themes
            </summary>
        </member>
        <member name="F:Dapfor.Net.Theming.KnownTheme.XPStyle">
            <summary>
            Microsoft XP theme
            </summary>
        </member>
        <member name="F:Dapfor.Net.Theming.KnownTheme.YellowNight">
            <summary>
            YellowNight theme
            </summary>
        </member>
        <member name="F:Dapfor.Net.Theming.KnownTheme.Silver">
            <summary>
            Silver theme
            </summary>
        </member>
        <member name="F:Dapfor.Net.Theming.KnownTheme.Chrome">
            <summary>
            Chrome theme
            </summary>
        </member>
        <member name="F:Dapfor.Net.Theming.KnownTheme.Thundercloud">
            <summary>
            Thundercloud theme
            </summary>
        </member>
        <member name="F:Dapfor.Net.Theming.KnownTheme.LightTaupe">
            <summary>
            Light taupe theme
            </summary>
        </member>
        <member name="F:Dapfor.Net.Theming.KnownTheme.BluesAndYellows">
            <summary>
            BluesAndYellows theme
            </summary>
        </member>
        <member name="T:Dapfor.Net.Theming.NamespaceDoc">
            <summary>
            Specifies themes styles and appearance of controls in Dapfor library
            </summary>
            <remarks><para>Themes are sets of properties and colors for each control. They define style and appearance of controls in Dapfor library. 
            In addition to properties and cooler themes contain code for specific painting of various control elements (including .Net Grid).</para>
            <para>The grid supports attachment of themes via Grid.Theme property. Dapfor's library contains several predefined themes such as <see cref="P:Dapfor.Net.Theming.Theme.XPStyle">Theme.XPStyle</see>, <see cref="P:Dapfor.Net.Theming.Theme.Silver">Theme.Silver</see>, 
            etc. The list of predefined themes is stored in <see cref="T:Dapfor.Net.Theming.KnownTheme">Dapfor.Net.Theming.KnownTheme</see> enumeration. Accordingly, theme object can be obtained with the following code.</para>
            <code>
            grid1.Theme = Theme.XPStyle;
            grid2.Theme = Theme.FromKnownTheme(KnownTheme.XPStyle);
            </code>
            <para>A programmer may also create his own themes, including those based on already existing themes. The example below demonstrates creation of 
            an arbitrary theme on the basis of an existing theme. Therefore, all grids using the same theme shall look in the same way.</para>
            <code>
            Theme myTheme = new Theme("MyTheme", Theme.Silver);
            myTheme.Renderers.GridRenderer.Appearance.ColumnNormal.BackColor = Color.LightPink;
            myTheme.Renderers.GridRenderer.Appearance.ColumnNormal.GradientEndBackColor = ControlPaint.Dark(Color.LightPink);
            grid.Theme = myTheme;
            </code>
            <para>Dapfor�s library provides a convenient API for theme changing. For this purpose it uses a special default theme that is returned by <see cref="P:Dapfor.Net.Theming.Theme.Default">Theme.Default</see> property. 
            If a grid uses this theme, it subscribes to <see cref="E:Dapfor.Net.Theming.Theme.DefaultThemeChanged">Theme.DefaultThemeChanged</see> events. Therefore, when a new theme is set in <see cref="P:Dapfor.Net.Theming.Theme.Default">Theme.Default</see> 
            property, all controls subscribed to this theme shall receive notifications and automatically change their appearance.</para>
            <code>
            grid1.Theme = Theme.Default;
            grid2.Theme = Theme.Default;
            
            Theme myTheme = new Theme("MyTheme", Theme.Silver);
            Theme.Default = myTheme;
            </code>
            <para>Grid themes have been developed to enable the programmer to change appearance of any grid elements. When a theme is set for the grid, this grid uses colors 
            and renderer defined for each theme. In addition to that a programmer may modify colors for headers, columns, rows etc using properties like <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, etc.</para>
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Editors.EditorPicker">
            <summary>
            Enables to select an available <see cref="T:System.Drawing.Design.UITypeEditor"/>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.EditorPicker.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. 
            If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> 
            will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.EditorPicker.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.EditorPicker.EditorPickerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.Cell">
             <summary>
             Represents a cell
             </summary>
             <remarks>The most common operations with cells include painting, editing, determining location, setting appearance, custom painting and some others:
             <code>
             public void MostCommonOperationsWithCell(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 
                 //Set a new price programmatically
                 Cell cell = row["Price"];
            
                 cell.Value = 52.32;
            
                 //Edit cell with an appropriate editor
                 grid.Headers[0]["Price"].Editable = true;
                 cell.Edit();
            
                 //Highlight cell with the red color for 2 seconds
                 cell.Highlight(new TimeSpan(0, 0, 2), Color.Red);
            
                 //Ensure cell visible
                 cell.EnsureVisible();
            
                 //Force the grid to resort the row and verify if the row should be filtered. I.e. if the IFilter.IsFiltered(row) returns true.
                 //Normally this method is called automatically, if the data object implements INotifyPropertyChanged interface.
                 cell.Update();
            
                 //Just invalidate cell i.e. ask the grid to repaint cell without cheching for the position 
                 //in the sorted order and checking if the row is filtered.
                 cell.Invalidate();
            
                 //Set a back color for cell
                 cell.Appearance.BackColor = Color.Green;
            
                 //Set some image
                 Bitmap image = new Bitmap("Image.ico");
                 cell.Image = image;
            
                 //Demonstrates, how to custom draw in cell. 
                 //The delegate is called while cell's painting
                 grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
                 {
                     using(Brush brush = new SolidBrush(Color.DeepPink))
                     {
                         //Prevent from text painting
                         e.Parts &amp;= e.Parts ^ PaintPart.Text;
                         
                         //Set a new background color
                         e.Appearance.BackColor = Color.Yellow;
            
                         //Do default painting without the text drawing
                         e.PaintAll();
                         e.Handled = true;
            
                         //Draw a custom text above already pained cell
                         e.Graphics.DrawString("Custom string", SystemFonts.StatusFont, brush, e.Cell.VirtualBounds);
                     }
                 };
             }    
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.Update">
            <summary>
            Updates sorting, grouping and filtering of this the <see cref="P:Dapfor.Net.Ui.Cell.Row"/> and invalidates and highlights the <see cref="T:Dapfor.Net.Ui.Cell"/>. 
            </summary>
            <remarks>
            <para>When data is changed in business logic layer, the rows where this data is displayed should be sorted, filtrated, and grouped, and cells with this are 
            repainted and highlighted as well</para>
            <para><b>Data updates in non-event model</b><br/>
            These processes are automatically launched when <see cref="M:Dapfor.Net.Ui.Row.Update"/> / <see cref="M:Dapfor.Net.Ui.Cell.Update"/> methods are invoked. Moreover, .Net Grid constantly monitors row 
            state including their visibility, sorting position, grouping position and matching filtering conditions. Invocation of Row.Update() method initiates verification 
            of all the above conditions for a single row among ordered rows in a grid. This process is much more efficient than working with unsorted data, especially 
            during sorting. Invocation of Row.Update() in the event-driven model occurs regularly upon notification from the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. 
            The Row.Update() method call is thread-safe, and therefore you don't have to write your own thread synchronization logic. It is extremely convenient when 
            you develop multi-threaded applications.</para>
            <para>Therefore, when data is changed in the non-event model, you just have to invoke <see cref="M:Dapfor.Net.Ui.Row.Update"/> / <see cref="M:Dapfor.Net.Ui.Cell.Update"/> methods or 
            <see cref="P:Dapfor.Net.Ui.Cell.Value"/> setter, and .Net Grid will automatically perform all necessary operations with the row or with the cell
            <code>
            public void DataUpdating(Grid grid)
            {
                object[] data = new object[] { "value 1", 125, true, DockStyle.Fill };
                Row row = grid.Rows.Add(data);
            
                //The next calls will invalidate and highlight cells, and sort, filter and regroup the row
                row[2].Value = false;
                row[3].Value = DockStyle.Top;
            
                //The last value in the data should equal to 'DockStyle.Top'.
                Assert.AreEqual(data[3], DockStyle.Top);
            
                //This call will also invalidate and highlight the cell, and sort, filter and regroup the row
                data[1] = 125;
                row[1].Update();
            
                //The next call will just sort, filter and regroup the row
                data[0] = "value 2";
                row.Update();
            }
            </code>
            </para>
            
            <para><b>Event-driven model</b><br/>
            <para>In the event-driven model it is sufficient to implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface to notify grid about data changes. This approach has very important 
            advantages. The aforementioned interface is located in <see cref="N:System.ComponentModel"/> namespace and has only one public event - <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>. 
            Because of that business logic can notify subscribers (GUI controls) through this interface and the .Net Grid itself performs data sorting, filtration and other operations. 
            Moreover, a subscriber makes necessary actions for thread synchronization with the GUI thread. In other words, with good application architecture your assemblies with application 
            logic will have no dependencies from <see cref="N:System.Windows.Forms"/> and Dapfor assemblies.</para>
            <para>This is an implementation of the popular OOP design pattern that is known as Observer or Publisher / Subscriber. This approach provides a considerable advantage 
            over conventional programming models. Your applications may have multiple Graphic User Interfaces (multiple grids) that are subscribed to <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> 
            event as event-listeners to the business object. A business object is an event generator or event publisher. When an object field changes in the setter of any property, 
            the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event is fired and all subscribers get guaranteed notification about it:</para>
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        price = value;
                        if(PropertyChanged != null)
                        {
                            PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                        }
                    }
                }
                public DateTime Maturity
                {
                    get { return maturity; }
                }
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Add a data object to the grid. 
            Product product = new Product();
            Row row = grid.Rows.Add(product);
            
            //The grid will automatically sort, filter, group and highlight corresponding row!
            //The product is your business logic and may be placed in any assembly that doesn't need to have references to Dapfor assemblies!
            product.Price = 123;
            
            //The value in the "Price" cell should equal to '123'.
            Assert.AreEqual(row["Price"].Value, 123);
            </code>
            
            <para><b>Performance</b><br/>
            We would also like to emphasize performance advantages of the .Net Grid. In an unsorted grid all rows are systematically indexed, and when sorting is enabled, 
            the search occurs at most <b>ln(N)</b> iterations due to efficient algorithms used in .Net Grid. It's obvious that storing row state data consumes memory. 
            Average memory consumption per row equals to <b>160</b> bytes, and that results in <b>16 MB</b> per <b>100,000</b> data objects inserted into the grid, 
            while the performance advantage is tremendous! The grid with <b>2,000</b> rows enables updating of more than <b>50,000</b> cells and sorting of more than <b>3,000</b>
             rows per second in realtime!
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.Invalidate">
            <summary>
            Invalidates this <see cref="T:Dapfor.Net.Ui.Cell"/>
            </summary>
            <threadsafety>The method is not thread safe.</threadsafety>
            <remarks><para>This method does not force the <see cref="T:Dapfor.Net.Ui.Grid"/> to resort or refilter <see cref="P:Dapfor.Net.Ui.Cell.Row"/>.</para>
            <para>It is well known that <see cref="N:System.Windows.Forms"/> controls use standard Windows API based on window messages. To repaint a certain part of a control, 
            it should invoke the <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)"/> method, where Rectangle specifies location and size of the client surface that should be repainted. 
            In general, the calculation of screen coordinates of an element is a quite complicated process, especially in a hierarchical data grid. The .Net Grid provides 
            very convenient API to repaint different elements such as cells, rows, columns etc.</para>
            <para>Below you may see a list of elements that can be repainted in the grid:</para>
            <list type="bullet">
            <item><see cref="M:Dapfor.Net.Ui.Cell.Invalidate">Cell.Invalidate()</see> - Repainting of a single cell.</item>
            <item><see cref="M:Dapfor.Net.Ui.Row.Invalidate">Row.Invalidate()</see> - Repainting of a single row.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.Invalidate">Header.Invalidate()</see> - Header invalidation. If the header is located in the hierarchical grid (not top-level header), all duplicates in visible surface are repainted.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.InvalidateRows">Header.InvalidateRows()</see> - Repaint all rows in the grid on the same hierarchical level as the header.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.Invalidate">Column.Invalidate()</see> - Column title invalidation.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.InvalidateCells">Column.InvalidateCells()</see> - Repainting of all cells in the grid that are related to a certain column located on the same hierarchical level as a header.</item>
            </list>
            <code>
            public void InvalidateUiElements(Grid grid)
            {
                //Add a new header on the top hierarchical level (level 0)
                Header header1 = new Header();
                header1.Add(new Column("Name"));
                header1.Add(new Column("Price"));
                header1.Add(new Column("Quantity"));
                grid.Headers.Add(header1);
            
                Header header2 = new Header();
                header2.Add(new Column("Name"));
                header2.Add(new Column("Date"));
                grid.Headers.Add(header2);
            
            
                //Add some data objects 
                Row product1 = grid.Rows.Add(new Product());
                Row product2 = grid.Rows.Add(new Product());
            
                //Add some customers to the first product
                Row customer1 = product1.Add(new Customer());
                Row customer2 = product1.Add(new Customer());
            
                //Add some customers to the another product
                Row customer3 = product2.Add(new Customer());
            
                //Expand all rows
                grid.Rows.ExpandAll();
            
            
                //Invalidate the cell
                customer1["Date"].Invalidate();
            
                //Invalidate the row
                customer1.Invalidate();
            
                //Invalidate the top-level header
                header1.Invalidate();
            
                //Invalidate product1 and product2
                header1.InvalidateRows();
            
                //Invalidate the column title 'Date' on the header2
                header2["Date"].Invalidate();
            
                //Invalidate all cells in the column 'Date'
                header2["Date"].InvalidateCells();
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.EnsureVisible">
            <summary>
            Ensures this cell visible. 
            </summary>
            <threadsafety>The method is not thread safe.</threadsafety>
            <remarks>The grid provides a simple ability to place rows or cells in visible area of the grid with <see cref="M:Dapfor.Net.Ui.Row.EnsureVisible">Row.EnsureVisible()</see> and 
            <see cref="M:Dapfor.Net.Ui.Cell.EnsureVisible">Cell.UnsureVisible()</see>. If necessary, the grid scrolls rows and columns.
            <code>
             public void EnsureVisibleExample(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
                 //Add more columns...
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 //Add more rows...
            
                 //Ensure the row visible
                 row.EnsureVisible();
            
                 //Ensure the column visible
                 grid.Headers[0]["Price"].EnsureVisible();
            
            
                 //Ensure the cell visible
                 row["Price"].EnsureVisible();
             }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.Edit">
             <summary>
             Starts editing of this <see cref="T:Dapfor.Net.Ui.Cell"/>.
             </summary>
             <threadsafety>The method is not thread safe.</threadsafety>
             <remarks>
             <para>.Net Grid supports multiple ways of cell editing. When we were developing this mechanism, we based it on standard editors used in the <see cref="T:System.Windows.Forms.PropertyGrid"/> control. 
             There are several types of these editors including controls that can be displayed in a dropdown box or as a modal dialog. Such editors enable users to edit text, 
             colors and enumerations and to perform painting in small rectangles inside cells. There are plenty of predefined editors. For example, you can get the color editor as follows:
             <code>
             UITypeEditor editor = (UITypeEditor)TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor));
             </code>
             </para>
             <para>To edit values, these editors use the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. Within this method a mandatory control is created and 
             placed in the dropdown box. You should note a very important detail the return from the function <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> occurs 
             only when editing within in the control is completed, which is convenient from the programmer's point of view. Look at this example: 
             <code>
             object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
             {
                 IWindowsFormsEditorService service = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
                 using (SomeControl control = new SomeControl(value))
                 {
                     service.DropDownControl(control);
                     value = control.NewValue;
                 }
                 return value;
             }
             </code>
             </para>
             <para>The .Net Grid fully supports this mechanism and editors of other vendors that can be used in your applications.</para>
             <para>Despite the convenience of this interface, we have concluded that it lacks some functionality. These editors can't be created above the edited cell with its size 
             (for example, slider control). Besides that, they can't be painted in the whole cell just in a small rectangular area. To remediate this, 
             we have created <see cref="T:Dapfor.Net.Editors.UITypeEditorEx"/> a class, derived from <see cref="T:System.Drawing.Design.UITypeEditor"/> that allows to create controls directly above a cell. 
             The process of editing is quite similar to the aforementioned code example: 
             <code>
             StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
             {
                 using (SomeControl control = new SomeControl(cell))
                 {
                     return service.CellEditControl(control, cell.VirtualBounds, reason);
                 }
             }
             </code>
             </para>
             <para>Besides, some editors can be used without creating graphic controls, i.e. a rating editor. It simply draws stars, and when the user clicks on a certain star, this control calculates its relative location and sets a new value. The whole editing code will look as follows:
             <code>
             StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
             {    
                 //compute a new rating
                 cell.Value = rating ;
                 return StopEditReason.UserStop ;
             }
             </code>
             </para>
             <para>The following code shows how to edit the cell programmatically:
             <code>
             public void CellEditExample(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 
                 //Set a new price programmatically
                 Cell cell = row["Price"];
            
                 //Edit the cell with an appropriate editor
                 grid.Headers[0]["Price"].Editable = true;
                 cell.Edit();
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.Edit(Dapfor.Net.Editors.StartEditReason,System.Drawing.Point)">
             <summary>
             Starts editing of this <see cref="T:Dapfor.Net.Ui.Cell"/> with specified <see cref="T:Dapfor.Net.Editors.StartEditReason"/>.
             </summary>
             <param name="reason">The reason, why the cell editing is started.</param>
             <param name="point">The cursor location inside of this <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
             <threadsafety>The method is not thread safe.</threadsafety>
             <remarks>
             <para>.Net Grid supports multiple ways of cell editing. When we were developing this mechanism, we based it on standard editors used in the <see cref="T:System.Windows.Forms.PropertyGrid"/> control. 
             There are several types of these editors including controls that can be displayed in a dropdown box or as a modal dialog. Such editors enable users to edit text, 
             colors and enumerations and to perform painting in small rectangles inside cells. There are plenty of predefined editors. For example, you can get the color editor as follows:
             <code>
             UITypeEditor editor = (UITypeEditor)TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor));
             </code>
             </para>
             <para>To edit values, these editors use the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. Within this method a mandatory control is created and 
             placed in the dropdown box. You should note a very important detail the return from the function <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> occurs 
             only when editing within in the control is completed, which is convenient from the programmer's point of view. Look at this example: 
             <code>
             object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
             {
                 IWindowsFormsEditorService service = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
                 using (SomeControl control = new SomeControl(value))
                 {
                     service.DropDownControl(control);
                     value = control.NewValue;
                 }
                 return value;
             }
             </code>
             </para>
             <para>The .Net Grid fully supports this mechanism and editors of other vendors that can be used in your applications.</para>
             <para>Despite the convenience of this interface, we have concluded that it lacks some functionality. These editors can't be created above the edited cell with its size 
             (for example, slider control). Besides that, they can't be painted in the whole cell just in a small rectangular area. To remediate this, 
             we have created <see cref="T:Dapfor.Net.Editors.UITypeEditorEx"/> a class, derived from <see cref="T:System.Drawing.Design.UITypeEditor"/> that allows to create controls directly above a cell. 
             The process of editing is quite similar to the aforementioned code example: 
             <code>
             StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
             {
                 using (SomeControl control = new SomeControl(cell))
                 {
                     return service.CellEditControl(control, cell.VirtualBounds, reason);
                 }
             }
             </code>
             </para>
             <para>Besides, some editors can be used without creating graphic controls, i.e. a rating editor. It simply draws stars, and when the user clicks on a certain star, this control calculates its relative location and sets a new value. The whole editing code will look as follows:
             <code>
             StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
             {    
                 //compute a new rating
                 cell.Value = rating ;
                 return StopEditReason.UserStop ;
             }
             </code>
             </para>
             <para>The following code shows how to edit the cell programmatically:
             <code>
             public void CellEditExample(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 
                 //Set a new price programmatically
                 Cell cell = row["Price"];
            
                 //Edit the cell with an appropriate editor
                 grid.Headers[0]["Price"].Editable = true;
                 cell.Edit();
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)">
             <summary>
             Highlights the <see cref="T:Dapfor.Net.Ui.Cell"/> for the specified amount of time with the specified background color.
             </summary>
             <param name="interval">The time interval, when the <see cref="T:Dapfor.Net.Ui.Cell"/> is highlighted.</param>
             <param name="backColor">The background color.</param>
             <remarks>
             <para>.Net Grid provides an extremely convenient mechanism of data highlighting. Highlighting is the process of changing background color of a cell for a specified time 
             interval and gradual restoration of the initial color afterwards. Background color of a cell can be changed twice (at the beginning and at the end) or with a little 
             periodicity (about 30 ms)enabling fading effect with gradual transition between the highlight color and the original background color of the cell.</para>
             
             <para>In programming cell highlighting can be achieved by calling <see cref="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)"/>. When a programmer calls this method, the grid adds specific information 
             about cell's state into an internal container and launches timers when necessary. The second parameter is the color that may contain alpha-channel enabling mixing of 
             the highlight color and the background color (transparency effect). It's important to mention that the .Net Grid has a very easy to use API that saves programmer's time. 
             Highlighting management and initial parameters are accessible via <see cref="P:Dapfor.Net.Ui.Grid.Highlighting"/> property.
             </para>
             <seealso cref="P:Dapfor.Net.Ui.Cell.HighlightColor"/>
             <seealso cref="P:Dapfor.Net.Ui.Cell.RemainingHighlightTime"/>
             <code>
             public void HowToHighlightCell(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 
                 //Set a new price programmatically
                 Cell cell = row["Price"];
            
                 //Highlight the cell with the red color for 2 seconds
                 cell.Highlight(new TimeSpan(0, 0, 2), Color.Red);
            
             }    
             </code>
             </remarks>
             <threadsafety>The method is not thread safe.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color,System.Drawing.Color)">
             <summary>
             Highlights the <see cref="T:Dapfor.Net.Ui.Cell"/> for the specified amount of time with specified background and foreground colors.
             </summary>
             <param name="interval">The time interval, when the <see cref="T:Dapfor.Net.Ui.Cell"/> is highlighted.</param>
             <param name="backColor">The background color.</param>
             <param name="foreColor">The foreground color.</param>
             <remarks>
             <para>.Net Grid provides an extremely convenient mechanism of data highlighting. Highlighting is the process of changing background color of a cell for a specified time 
             interval and gradual restoration of the initial color afterwards. Background color of a cell can be changed twice (at the beginning and at the end) or with a little 
             periodicity (about 30 ms)enabling fading effect with gradual transition between the highlight color and the original background color of the cell.</para>
             
             <para>In programming cell highlighting can be achieved by calling <see cref="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)"/>. When a programmer calls this method, the grid adds specific information 
             about cell's state into an internal container and launches timers when necessary. The second parameter is the color that may contain alpha-channel enabling mixing of 
             the highlight color and the background color (transparency effect). It's important to mention that the .Net Grid has a very easy to use API that saves programmer's time. 
             Highlighting management and initial parameters are accessible via <see cref="P:Dapfor.Net.Ui.Grid.Highlighting"/> property.
             </para>
             <seealso cref="P:Dapfor.Net.Ui.Cell.HighlightColor"/>
             <seealso cref="P:Dapfor.Net.Ui.Cell.RemainingHighlightTime"/>
             <code>
             public void HowToHighlightCell(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 
                 //Set a new price programmatically
                 Cell cell = row["Price"];
            
                 //Highlight the cell with red background and green foreground colors for 2 seconds
                 cell.Highlight(new TimeSpan(0, 0, 2), Color.Red, Color.Green);
            
             }    
             </code>
             </remarks>
             <threadsafety>The method is not thread safe.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.Cell.ShowTooltip(System.String,System.TimeSpan)">
            <summary>
            Shows a tooltip over this <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Appearance">
             <summary>
             Gets a cell appearance.
             </summary>
             <value>The appearance.</value>
             <remarks>
             <para>.Net Grid applies different styles for even and odd rows, enabling the programmer to his own color styles and even gradient 
             colors via via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, via <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see> property.</para>
             <para>.Net Grid uses appearance inheritance. By default, colors and styles for all grids are taken from <see cref="T:Dapfor.Net.Ui.Preferences">Dapfor.Net.Ui.Preferences</see> class. 
             However, these preferences can be overridden for every grid separately via <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see> property. Then, every <see cref="T:Dapfor.Net.Ui.Header"/> and <see cref="P:Dapfor.Net.Ui.Cell.Column"/> 
             can override previously set appearance for every hierarchical level individually. And finally, you can also use <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> 
             properties to change individual appearance of rows and cells, but using of these properties may require allocation of a significant volume of memory.
             </para>
             <code>
             public void CellAppearance(Grid grid)
             {
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
             
                 //Set appearance for even and odd rows on all hierarchical levels
                 grid.Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Appearance.OddRows.BackColor = Color.Black;
            
                 //Set appearance for even and odd rows on the top hierarchical level
                 grid.Headers[0].Appearance.EvenRows.BackColor = Color.Gray;
                 grid.Headers[0].Appearance.OddRows.BackColor = Color.Black;
            
                 //Set a back color for cell
                 row["Price"].Appearance.BackColor = Color.Green;
             }
             </code>
             
             <para>If you are interested in maximum performance of the grid, you should subscribe for <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see> event to change appearance instead of setting <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see> and <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see> properties: 
             <code>
             grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
             {
                 //custom paint...
                 e.Appearance.BackColor = Color.Red;
                 e.Font = SystemFonts.MenuFont;
             }
             </code>
             </para>
             
             </remarks>
             <threadsafety>The property is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.VisibleBounds">
            <summary>
            Gets visible bounds of <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
            <value>Visible bounds.</value>
            <threadsafety>The property is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.VirtualBounds">
            <summary>
            Gets virtual bounds of cell.
            </summary>
            <value>Virtual bounds.</value>
            <threadsafety>The property is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Value">
            <summary>
            Gets or sets value of a data object, held by <see cref="P:Dapfor.Net.Ui.Cell.Row"/>.
            </summary>
            <value>The value.</value>
            <remarks>
            <para>When data is changed in business logic layer, the rows where this data is displayed should be sorted, filtrated, and grouped, and cells with this are 
            repainted and highlighted as well</para>
            <para><b>Data updates in non-event model</b><br/>
            These processes are automatically launched when <see cref="M:Dapfor.Net.Ui.Row.Update"/> / <see cref="M:Dapfor.Net.Ui.Cell.Update"/> methods are invoked. Moreover, .Net Grid constantly monitors row 
            state including their visibility, sorting position, grouping position and matching filtering conditions. Invocation of Row.Update() method initiates verification 
            of all the above conditions for a single row among ordered rows in a grid. This process is much more efficient than working with unsorted data, especially 
            during sorting. Invocation of Row.Update() in the event-driven model occurs regularly upon notification from the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. 
            The Row.Update() method call is thread-safe, and therefore you don't have to write your own thread synchronization logic. It is extremely convenient when 
            you develop multi-threaded applications.</para>
            <para>Therefore, when data is changed in the non-event model, you just have to invoke <see cref="M:Dapfor.Net.Ui.Row.Update"/> / <see cref="M:Dapfor.Net.Ui.Cell.Update"/> methods or 
            <see cref="P:Dapfor.Net.Ui.Cell.Value"/> setter, and .Net Grid will automatically perform all necessary operations with the row or with the cell
            <code>
            public void DataUpdating(Grid grid)
            {
                object[] data = new object[] { "value 1", 125, true, DockStyle.Fill };
                Row row = grid.Rows.Add(data);
            
                //The next calls will invalidate and highlight cells, and sort, filter and regroup the row
                row[2].Value = false;
                row[3].Value = DockStyle.Top;
            
                //The last value in the data should equal to 'DockStyle.Top'.
                Assert.AreEqual(data[3], DockStyle.Top);
            
                //This call will also invalidate and highlight the cell, and sort, filter and regroup the row
                data[1] = 125;
                row[1].Update();
            
                //The next call will just sort, filter and regroup the row
                data[0] = "value 2";
                row.Update();
            }
            </code>
            </para>
            
            <para><b>Event-driven model</b><br/>
            <para>In the event-driven model it is sufficient to implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface to notify grid about data changes. This approach has very important 
            advantages. The aforementioned interface is located in <see cref="N:System.ComponentModel"/> namespace and has only one public event - <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>. 
            Because of that business logic can notify subscribers (GUI controls) through this interface and the .Net Grid itself performs data sorting, filtration and other operations. 
            Moreover, a subscriber makes necessary actions for thread synchronization with the GUI thread. In other words, with good application architecture your assemblies with application 
            logic will have no dependencies from <see cref="N:System.Windows.Forms"/> and Dapfor assemblies.</para>
            <para>This is an implementation of the popular OOP design pattern that is known as Observer or Publisher / Subscriber. This approach provides a considerable advantage 
            over conventional programming models. Your applications may have multiple Graphic User Interfaces (multiple grids) that are subscribed to <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> 
            event as event-listeners to the business object. A business object is an event generator or event publisher. When an object field changes in the setter of any property, 
            the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event is fired and all subscribers get guaranteed notification about it:</para>
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        price = value;
                        if(PropertyChanged != null)
                        {
                            PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                        }
                    }
                }
                public DateTime Maturity
                {
                    get { return maturity; }
                }
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Add a data object to the grid. 
            Product product = new Product();
            Row row = grid.Rows.Add(product);
            
            //The grid will automatically sort, filter, group and highlight corresponding row!
            //The product is your business logic and may be placed in any assembly that doesn't need to have references to Dapfor assemblies!
            product.Price = 123;
            
            //The value in the "Price" cell should equal to '123'.
            Assert.AreEqual(row["Price"].Value, 123);
            </code>
            
            <para><b>Performance</b><br/>
            We would also like to emphasize performance advantages of the .Net Grid. In an unsorted grid all rows are systematically indexed, and when sorting is enabled, 
            the search occurs at most <b>ln(N)</b> iterations due to efficient algorithms used in .Net Grid. It's obvious that storing row state data consumes memory. 
            Average memory consumption per row equals to <b>160</b> bytes, and that results in <b>16 MB</b> per <b>100,000</b> data objects inserted into the grid, 
            while the performance advantage is tremendous! The grid with <b>2,000</b> rows enables updating of more than <b>50,000</b> cells and sorting of more than <b>3,000</b>
             rows per second in realtime!
            </para>
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Text">
             <summary>
             Gets or sets a formatted text.
             </summary>
             <value>The formatted text.</value>
             <remarks>Firstly the <see cref="T:Dapfor.Net.Ui.Cell"/> takes a value from <see cref="T:Dapfor.Net.Data.IDataField"/> returned by <see cref="P:Dapfor.Net.Ui.Cell.DataField"/> property. Then it applies a <see cref="T:Dapfor.Net.Formats.IFormat"/> 
             to transform returned value to string.</remarks>
             <threadsafety>The property is thread-safe. The synchronization happens in the synchronious way with blocking the calling thread.</threadsafety>
             <example>
             <code>
             //Some product
             class Product
             {
                 private double price;
            
                 [DoubleFormat(2, true, false)]
                 public double Price
                 {
                     get { return price; }
                     set { price = value; }
                 }
             }
             
             public void CellText(Grid grid)
             {
                 Product product = new Product();
                 grid.Rows.Add(product);
                 Row row = grid.Rows[0];
            
                 product.Price = 1246078.656542;
                 Console.WriteLine("Price value = {0}", row["Price"].Value);
                 Console.WriteLine("Price text = {0}", row["Price"].Text);
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Image">
             <summary>
             Gets or sets cell image.
             </summary>
             <value>The image.</value>
             <remarks>To align the cell image, use <see cref="P:Dapfor.Net.Ui.Column.ColumnAppearance.CellImageSettings"/>.</remarks>
             <threadsafety>The property is not thread safe.</threadsafety>
             <example>
             <code>
             public void CellImage(Grid grid)
             {
                 grid.Headers[0]["Price"].Appearance.CellImageSettings.Alignment = ContentAlignment.MiddleLeft;
            
                 Product product = new Product();
                 grid.Rows.Add(product);
                 Row row = grid.Rows[0];
            
                 Bitmap image = new Bitmap("Image.ico");
                 row["Price"].Image = image;
             }
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Row">
            <summary>
            Gets a <see cref="P:Dapfor.Net.Ui.Cell.Row"/>.
            </summary>
            <value>The row.</value>
            <threadsafety>The property is thread-safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Column">
            <summary>
            Gets a <see cref="P:Dapfor.Net.Ui.Cell.Column"/>.
            </summary>
            <value>The column.</value>
            <remarks>The column can be <c>null</c>.</remarks>
            <threadsafety>The property is thread-safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Focused">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Cell"/> is focused.
             </summary>
             <value><c>true</c> if focused; otherwise, <c>false</c>.</value>
             <remarks>The <see cref="T:Dapfor.Net.Ui.Cell"/> can be focused only if grid <see cref="P:Dapfor.Net.Ui.Grid.GridFocus.Mode">focus mode</see> is set to <see cref="F:Dapfor.Net.Ui.FocusMode.Cell"/>.</remarks>
             <example>
             <code>
             public void FocusedCellExample(Grid grid)
             {
                 //Add a new header on the top hierarchical level (level 0)
                 Header header = new Header();
                 header.Add(new Column("Name"));
                 header.Add(new Column("Price"));
                 header.Add(new Column("Quantity"));
                 grid.Headers.Add(header);
            
                 //Set the focus mode
                 grid.FocusSettings.Mode = FocusMode.Cell;
            
                 //Add some data objects 
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Focus the cell
                 grid.Rows[0]["Price"].Focused = true;
            
                 Console.WriteLine("Focused row = {0}", grid.FocusedRow.VisibleChildIndex);
                 Console.WriteLine("Focused column = {0}", grid.Headers[0].FocusedColumn.Id);
            
                 //Focus other column
                 grid.Headers[0]["Quantity"].Focused = true;
            
                 Console.WriteLine("The cell[0, 'Quantity'] is {0}", grid.Rows[0]["Quantity"].Focused ? "focused" : "not focused");
             }
             
             //Console output:
             Focused row = 0
             Focused column = Price
             The cell[0, 'Quantity'] is focused
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Format">
            <summary>
            Gets or sets cell format.
            </summary>
            <value>The format.</value>
            <threadsafety>The property is thread-safe.</threadsafety>
            <remarks>
            <para>A very important feature in .Net Grid its ability to work directly with application business logic. Business logic is a set of classes that may have certain 
            properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling <see cref="M:System.Object.ToString"/> or <see cref="M:System.String.Format(System.String,System.Object)"/>. 
            However, this approach is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to 
            convert values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a 
            value equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. 
            For application programming it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc:
            <code>
            public class Product
            {
                private double price;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                }
            }
            </code>
            </item>
            <item>In a column: Column.Format = 'your format';</item>
            <item>Directly in a <see cref="T:Dapfor.Net.Ui.Cell"/> (this method requires a lot of memory): Cell.Format = 'your format';</item>
            </list>
            </para>
            <para>The .Net Grid looks for IFofmat object to format values or parse strings in the following order:
            <list type="bullet">
            <item>In a <see cref="T:Dapfor.Net.Ui.Cell"/></item>
            <item>In a <see cref="P:Dapfor.Net.Ui.Cell.Column"/> returned by the <see cref="P:Dapfor.Net.Ui.Cell.Column"/> property</item>
            <item>In a <see cref="T:Dapfor.Net.Data.IDataField"/> object, returned by the <see cref="P:Dapfor.Net.Ui.Cell.DataField"/> property.</item>
            <item>If the format is still not found, the grid uses default format for the specified object type.</item>
            </list>
            </para>
            <para>Some formats greatly simplify application development. For example, <see cref="T:Dapfor.Net.Formats.StringFormat"/>, enables use of standard patterns for formatting values through <see cref="M:System.String.Format(System.String,System.Object)"/>:
            <code>
            column.Format = new StringFormat("### ### ### ###", string.Empty, " $");
            //The value 12345 will be displayed in cells as "12 345 $"
            </code>
            </para>
            <para>.NET Framework has similar system of type conversion based on the <see cref="T:System.ComponentModel.TypeConverter"/> class that enables conversion of values to 
            strings and vice versa. This conversion system is more complete, but a little bit cumbersome in the context of formating and data parsing. Althrough converters 
            are bulky, such approach enables development of a business logic independently from data presentation. In a perfect case all these mechanisms can be completely based 
            on Microsoft's component model and therefore have no physical dependencies on libraries of other vendors and on the Dapfor libraries as well.
            <code>
            class SomeClass
            {
                private int intValue;
            
                [TypeConverter(typeof(HexTypeConverter))]
                int SomeHexdecimalValue
                {
                    get { return intValue;  }
                    set { intValue = value; }
                }
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.DataField">
             <summary>
             Gets a <see cref="T:Dapfor.Net.Data.IDataField"/>.
             </summary>
             <value>The data field if found. Otherwise <c>null</c>.</value>
             <threadsafety>The property is thread-safe.</threadsafety>
             <example>
             <code>
             public void CellValue(Grid grid)
             {
                 Product product = new Product();
                 grid.Rows.Add(product);
                 Row row = grid.Rows[0];
            
                 product.Price = 12.65;
                 Console.WriteLine("Price of the product = {0}", product.Price);
            
                 row["Price"].Value = 13.44;
                 Console.WriteLine("Updated price of the product = {0}", product.Price);
             }
             
             //Console output:
             Price of the product = 12,65
             Updated price of the product = 13,44   
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.OptimalWidth">
            <summary>
            Gets an optimal width of <see cref="T:Dapfor.Net.Ui.Cell"/> required to display the content without the loss of information.
            </summary>
            <value>The optimal width.</value>
            <remarks>This property is usually used by <see cref="M:Dapfor.Net.Ui.Column.Adjust(System.Boolean,System.Boolean)"/> method.</remarks>
            <threadsafety>The property is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.OptimalHeight">
            <summary>
            Gets an optimal height of <see cref="T:Dapfor.Net.Ui.Cell"/> required to display the content without the loss of information.
            </summary>
            <value>The optimal height.</value>
            <remarks>This property is usually used by <see cref="M:Dapfor.Net.Ui.Row.Adjust"/> method.</remarks>
            <threadsafety>The property is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Editable">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Ui.Cell"/> is editable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
            <threadsafety>The property is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.Editor">
             <summary>
             Gets cell editor.
             </summary>
             <value>The editor.</value>
             <threadsafety>The property is not thread safe.</threadsafety>
             <remarks>
             <para>.Net Grid supports multiple ways of cell editing. When we were developing this mechanism, we based it on standard editors used in the <see cref="T:System.Windows.Forms.PropertyGrid"/> control. 
             There are several types of these editors including controls that can be displayed in a dropdown box or as a modal dialog. Such editors enable users to edit text, 
             colors and enumerations and to perform painting in small rectangles inside cells. There are plenty of predefined editors. For example, you can get the color editor as follows:
             <code>
             UITypeEditor editor = (UITypeEditor)TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor));
             </code>
             </para>
             <para>To edit values, these editors use the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. Within this method a mandatory control is created and 
             placed in the dropdown box. You should note a very important detail the return from the function <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> occurs 
             only when editing within in the control is completed, which is convenient from the programmer's point of view. Look at this example: 
             <code>
             object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
             {
                 IWindowsFormsEditorService service = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
                 using (SomeControl control = new SomeControl(value))
                 {
                     service.DropDownControl(control);
                     value = control.NewValue;
                 }
                 return value;
             }
             </code>
             </para>
             <para>The .Net Grid fully supports this mechanism and editors of other vendors that can be used in your applications.</para>
             <para>Despite the convenience of this interface, we have concluded that it lacks some functionality. These editors can't be created above the edited cell with its size 
             (for example, slider control). Besides that, they can't be painted in the whole cell just in a small rectangular area. To remediate this, 
             we have created <see cref="T:Dapfor.Net.Editors.UITypeEditorEx"/> a class, derived from <see cref="T:System.Drawing.Design.UITypeEditor"/> that allows to create controls directly above a cell. 
             The process of editing is quite similar to the aforementioned code example: 
             <code>
             StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
             {
                 using (SomeControl control = new SomeControl(cell))
                 {
                     return service.CellEditControl(control, cell.VirtualBounds, reason);
                 }
             }
             </code>
             </para>
             <para>Besides, some editors can be used without creating graphic controls, i.e. a rating editor. It simply draws stars, and when the user clicks on a certain star, this control calculates its relative location and sets a new value. The whole editing code will look as follows:
             <code>
             StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
             {    
                 //compute a new rating
                 cell.Value = rating ;
                 return StopEditReason.UserStop ;
             }
             </code>
             </para>
             <para>The following code shows how to edit the cell programmatically:
             <code>
             public void CellEditExample(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 
                 //Set a new price programmatically
                 Cell cell = row["Price"];
            
                 //Edit the cell with an appropriate editor
                 grid.Headers[0]["Price"].Editable = true;
                 cell.Edit();
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.RemainingHighlightTime">
             <summary>
             Gets remaining highlight time.
             </summary>
             <value>The remaining highlight time.</value>
             <seealso cref="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)"/>
             <seealso cref="P:Dapfor.Net.Ui.Cell.HighlightColor"/>
             <remarks>
             <para>.Net Grid provides an extremely convenient mechanism of data highlighting. Highlighting is the process of changing background color of a cell for a specified time 
             interval and gradual restoration of the initial color afterwards. Background color of a cell can be changed twice (at the beginning and at the end) or with a little 
             periodicity (about 30 ms)enabling fading effect with gradual transition between the highlight color and the original background color of the cell.</para>
             
             <para>In programming cell highlighting can be achieved by calling <see cref="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)"/>. When a programmer calls this method, the grid adds specific information 
             about cell's state into an internal container and launches timers when necessary. The second parameter is the color that may contain alpha-channel enabling mixing of 
             the highlight color and the background color (transparency effect). It's important to mention that the .Net Grid has a very easy to use API that saves programmer's time. 
             Highlighting management and initial parameters are accessible via <see cref="P:Dapfor.Net.Ui.Grid.Highlighting"/> property.
             </para>
             <seealso cref="P:Dapfor.Net.Ui.Cell.HighlightColor"/>
             <seealso cref="P:Dapfor.Net.Ui.Cell.RemainingHighlightTime"/>
             <code>
             public void HowToHighlightCell(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 grid.Rows.Add(new Product());
                 Row row = grid.Rows[0];
                 
                 //Set a new price programmatically
                 Cell cell = row["Price"];
            
                 //Highlight the cell with the red color for 2 seconds
                 cell.Highlight(new TimeSpan(0, 0, 2), Color.Red);
            
             }    
             </code>
             </remarks>
             <threadsafety>The method is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.HighlightColor">
            <summary>
            Gets the current highlighting background color that is evaluated with time.
            </summary>
            <value>The background color that is used to highlight the <see cref="T:Dapfor.Net.Ui.Cell"/>.</value>
            <remarks>Alpha value of returned color can change with time that is used in fading effect implementation</remarks>
            <seealso cref="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)"/>
            <seealso cref="P:Dapfor.Net.Ui.Cell.RemainingHighlightTime"/>
            <threadsafety>The method is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.HighlightForeColor">
            <summary>
            Gets the current highlighting foreground color that is evaluated with time.
            </summary>
            <value>The foreground color that is used to highlight the <see cref="T:Dapfor.Net.Ui.Cell"/>.</value>
            <remarks>Alpha value of returned color can change with time that is used in fading effect implementation</remarks>
            <seealso cref="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)"/>
            <seealso cref="P:Dapfor.Net.Ui.Cell.RemainingHighlightTime"/>
            <threadsafety>The method is not thread safe.</threadsafety>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.NextEditableCell">
            <summary>
            Gets next editablce cell in the following order: from left to right, from top to bottom.
            </summary>
            <returns>Next editable <see cref="T:Dapfor.Net.Ui.Cell"/> if found. Otherwise <c>null</c></returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.PrevEditableCell">
            <summary>
            Gets previous editablce cell in the following order: from right to left, from bottom to top.
            </summary>
            <returns>Previous editable <see cref="T:Dapfor.Net.Ui.Cell"/> if found. Otherwise <c>null</c></returns>
        </member>
        <member name="P:Dapfor.Net.Ui.Cell.TooltipMessage">
            <summary>
            Gets or sets tooltip message to display it when the cursor is over this cell.
            </summary>
            <value>Tooltip message.</value>
            <summary>
            Gets the <see cref="T:Dapfor.Net.Ui.Cell"/>'s tooltip settings.
            </summary>
            <value>The tooltips.</value>
            <remarks>Displaying auxiliary information above a grid cell is a typical task. In the .Net Grid this process is considerably simplified. 
            To display a tooltip is is sufficient to set text calling <see cref="P:Dapfor.Net.Ui.Cell.TooltipMessage">Cell.TooltipMessage</see><b> = "some text"</b>. Color management, 
            display time and tooltip location can be set with <see cref="P:Dapfor.Net.Ui.Grid.Tooltips">Grid.Tooltips</see> property. The programmer can control tooltips via .Net Grid notifications.
            <code>
            public void ShowTooltip(Grid grid)
            {
                grid.Tooltips.TooltipEnabled = true;                      // enable tooltips
                grid.Rows[4][4].TooltipMessage = "My Custom Message";     // setting tooltip for a specific cell
                grid.Tooltips.TooltipDuration = TimeSpan.FromSeconds(3);  // hiding tooltip after 3 seconds
                grid.Tooltips.IsBalloon = true;                           // balloon-like tooltip style
                grid.Tooltips.CellFrameColor = Color.Orange;              // color of the cell's frame
            }
            </code>
            </remarks>
            <threadsafety>The method is thread safe.</threadsafety>
        </member>
        <member name="T:Dapfor.Net.Ui.FocusMode">
             <summary>
             Specifies focus mode
             </summary>
             <remarks>
             Following example demonstrates how to focus cells, rows and columns
             <code>
             public void FocusedCellExample(Grid grid)
             {
                 //Add a new header on the top hierarchical level (level 0)
                 Header header = new Header();
                 header.Add(new Column("Name"));
                 header.Add(new Column("Price"));
                 header.Add(new Column("Quantity"));
                 grid.Headers.Add(header);
            
                 //Set the focus mode
                 grid.FocusSettings.Mode = FocusMode.Cell;
            
                 //Add some data objects 
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Focus the cell
                 grid.Rows[0]["Price"].Focused = true;
            
                 Console.WriteLine("Focused row = {0}", grid.FocusedRow.VisibleChildIndex);
                 Console.WriteLine("Focused column = {0}", grid.Headers[0].FocusedColumn.Id);
            
                 //Focus other column
                 grid.Headers[0]["Quantity"].Focused = true;
            
                 Console.WriteLine("The cell[0, 'Quantity'] is {0}", grid.Rows[0]["Quantity"].Focused ? "focused" : "not focused");
             }
             
             //Console output:
             Focused row = 0
             Focused column = Price
             The cell[0, 'Quantity'] is focused
             </code>
             </remarks>
        </member>
        <member name="F:Dapfor.Net.Ui.FocusMode.Row">
            <summary>
            The <see cref="T:Dapfor.Net.Ui.Grid"/> can focus a whole <see cref="F:Dapfor.Net.Ui.FocusMode.Row"/>.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.FocusMode.Cell">
            <summary>
            The <see cref="T:Dapfor.Net.Ui.Grid"/> can focus a <see cref="F:Dapfor.Net.Ui.FocusMode.Cell"/>.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.FocusedRowEventArgs">
             <summary>
             Provides information about changing the focused <see cref="T:Dapfor.Net.Ui.Row"/> in the <see cref="P:Dapfor.Net.Ui.FocusedRowEventArgs.Grid"/>
             </summary>
             <example>
             <code>
             public void FocusExample(Grid grid)
             {
                 //Set a new color with the alpha channel for the focused row.
                 grid.FocusSettings.Color = Color.FromArgb(30, 128, 0, 30);
            
                 grid.FocusedRowChanged += delegate(object sender, FocusedRowEventArgs e)
                 {
                     Console.WriteLine("Previous focused row: {0}", e.PrevFocusedRow != null ? e.PrevFocusedRow.VisibleIndex.ToString() : "not specified");
                     Console.WriteLine("New focused row: {0}", e.NewFocusedRow != null ? e.NewFocusedRow.VisibleIndex.ToString() : "not specified");
                 };
            
                 //Add some data object
                 grid.Rows.Add(new Product());
                 grid.Rows.Add(new Product());
            
                 //Set the row focused
                 grid.Rows[1].Focused = true;
                 
                 Console.WriteLine("Focused row visible index: {0}", grid.FocusedRow.VisibleIndex);
            
                 //Clear the focus
                 grid.FocusedRow = null;
                 //Another way to clear focus:
                 grid.FocusSettings.Clear();
             }
             
             //Console output:
             Previous focused row: not specified
             New focused row: 1
             Focused row visible index: 1
             Previous focused row: 1
             New focused row: not specified
             </code>
             </example>
        </member>
        <member name="P:Dapfor.Net.Ui.FocusedRowEventArgs.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.FocusedRowEventArgs.PrevFocusedRow">
            <summary>
            Gets the previously focused row.
            </summary>
            <value>The previous focused row.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.FocusedRowEventArgs.NewFocusedRow">
            <summary>
            Gets the new focused row.
            </summary>
            <value>The new focused row.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.FocusedColumnEventArgs">
            <summary>
            Provides information about changing the focused <see cref="T:Dapfor.Net.Ui.Column"/>
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.FocusedColumnEventArgs.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.FocusedColumnEventArgs.PrevFocusedColumn">
            <summary>
            Gets the previously focused column.
            </summary>
            <value>The previous focused column.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.FocusedColumnEventArgs.NewFocusedColumn">
            <summary>
            Gets the new focused column.
            </summary>
            <value>The new focused column.</value>
        </member>
        <member name="T:Dapfor.Net.Design.ColumnTypeConverter">
            <summary>
            Column type converter
            </summary>
        </member>
        <member name="M:Dapfor.Net.Design.ColumnTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Design.ColumnTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Dapfor.Net.Exceptions.NamespaceDoc">
             <summary>
             Set of exceptions that can be thrown.
             </summary>
             <remarks>
             Following example demonstrates a case when two fields in a user-defined class have identical identifiers. 
             <code>
             //Class with identical field identifiers
             public class Product
             {
                 private string name;
                 private string description;
            
                 public string Name
                 {
                     get { return name; }
                     set { name = value; }
                 }
            
                 //Modify default field identifier
                 [Field("Name")]
                 public string Description
                 {
                     get { return description; }
                     set { description = value; }
                 }
             }
             
             void PopulateGrid(Grid grid)
             {
                 //Initialize the grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Name"));
                 grid.Headers[0].Add(new Column("Description"));
            
                 //The grid throws FieldDeclarationException because Product has two identical fields
                 grid.Rows.Add(new Product());
             }
             </code>
             </remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.ToolStripGridRemoveSort">
             <summary>
             Represents an option to remove sort displayed on a Grid.HeaderContextMenu
             </summary>
             <code>
             grid.HeaderContextMenu.ItemClicked += delegate(object sender, ToolStripItemClickedEventArgs e)
             {
                 ToolStripGridRemoveSort item = e.ClickedItem as ToolStripGridRemoveSort;
                 Header headerItem = item != null ? item.Header : null;
            
                 //Do something...
             };
             </code>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolStripGridRemoveSort.#ctor(Dapfor.Net.Ui.Header)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ToolStripGridRemoveSort"/> class.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolStripGridRemoveSort.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.ToolStripItem.Click"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolStripGridRemoveSort.Header">
            <summary>
            Gets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="T:Dapfor.Net.Theming.GridXPRenderer">
            <summary>
            Draws dapfor controls using XP/Vista/Win7 styles
            </summary>
        </member>
        <member name="T:Dapfor.Net.Theming.IGridRenderer">
            <summary>
            Provides an appearance and methods to draw <see cref="T:Dapfor.Net.Ui.Grid">.Net Grid</see> with selected style.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Theming.IGridRenderer.DrawColumnBackground(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.ElementState,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the column background.
            </summary>
            <param name="grid">The grid.</param>
            <param name="appearance">The appearance.</param>
            <param name="state">The state.</param>
            <param name="visibleBounds">The visible bounds.</param>
            <param name="virtualBounds">The virtual bounds.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.IGridRenderer.DrawRowSelectorBackground(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.ElementState,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the row selector background.
            </summary>
            <param name="grid">The grid.</param>
            <param name="appearance">The appearance.</param>
            <param name="state">The state.</param>
            <param name="bounds">The bounds.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.IGridRenderer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapfor.Net.Theming.IGridRenderer.Appearance">
            <summary>
            Gets the appearance to be applied to dapfor controls.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="M:Dapfor.Net.Theming.GridXPRenderer.#ctor(Dapfor.Net.Ui.Grid.ThemeAppearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Theming.GridXPRenderer"/> class.
            </summary>
            <param name="appearance">The appearance.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.GridXPRenderer.DrawColumnBackground(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.ElementState,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the column background.
            </summary>
            <param name="grid">The grid.</param>
            <param name="appearance">The appearance.</param>
            <param name="state">The state.</param>
            <param name="visibleBounds">The visible bounds.</param>
            <param name="virtualBounds">The virtual bounds.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.GridXPRenderer.DrawRowSelectorBackground(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.ElementState,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the row selector background.
            </summary>
            <param name="grid">The grid.</param>
            <param name="appearance">The appearance.</param>
            <param name="state">The state.</param>
            <param name="bounds">The bounds.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.GridXPRenderer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapfor.Net.Theming.GridXPRenderer.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.EditorProvider">
            <summary>
            Provides System and default Dapfor editors
            </summary>
        </member>
        <member name="P:Dapfor.Net.Editors.EditorProvider.SystemEditors">
            <summary>
            Gets the system editors.
            </summary>
            <value>The system editors.</value>
        </member>
        <member name="P:Dapfor.Net.Editors.EditorProvider.DapforEditors">
            <summary>
            Gets the dapfor editors.
            </summary>
            <value>The dapfor editors.</value>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.RegisterWindowMessage(System.String)">
            <summary>
            Declares a named message
            </summary>
            <param name="name">message name</param>
            <returns>identifier</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Post a message in the window queue
            </summary>
            <param name="handle">windows handle</param>
            <param name="message">message identifier</param>
            <param name="wParam">The w param.</param>
            <param name="lParam">The l param.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Send a message in the window queue
            </summary>
            <param name="handle">windows handle</param>
            <param name="message">message identifier</param>
            <param name="wParam">The w param.</param>
            <param name="lParam">The l param.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.GetKeyState(System.Int32)">
            <summary>
            Gets the state of the key.
            </summary>
            <param name="keyCode">The key code.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.GetUpdateRgn(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            The GetUpdateRgn function retrieves the update region of a window by copying it into the specified region. 
            The coordinates of the update region are relative to the upper-left corner of the window 
            (that is, they are client coordinates). 
            </summary>
            <param name="hWnd">handle to window</param>
            <param name="hRgn">handle to region</param>
            <param name="bErase">erase state</param>
            <returns>The return value indicates the complexity of the resulting region; it can be one of the following values</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The CreateRectRgn function creates a rectangular region
            </summary>
            <param name="nLeftRect">Specifies the x-coordinate of the upper-left corner of the region in logical units</param>
            <param name="nTopRect">Specifies the y-coordinate of the upper-left corner of the region in logical units</param>
            <param name="nRightRect">Specifies the x-coordinate of the lower-right corner of the region in logical units</param>
            <param name="nBottomRect">Specifies the y-coordinate of the lower-right corner of the region in logical units</param>
            <returns>If the function succeeds, the return value is the handle to the region</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, 
            freeing all system resources associated with the object. 
            After the object is deleted, the specified handle is no longer valid
            </summary>
            <param name="hObject">handle to graphic object</param>
            <returns>If the function succeeds, the return value is nonzero</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.GetRegionData(System.IntPtr,System.Int32,Dapfor.Net.Internal.SafeNativeMethods.RGNDATA@)">
            <summary>
            The GetRegionData function fills the specified buffer with data describing a region. 
            This data includes the dimensions of the rectangles that make up the region. 
            </summary>
            <param name="hRgn">Handle to the region</param>
            <param name="dwCount">Specifies the size, in bytes, of the lpRgnData buffer</param>
            <param name="rgnData">Pointer to a RGNDATA structure that receives the information. 
            The dimensions of the region are in logical units. If this parameter is NULL, 
            the return value contains the number of bytes needed for the region data</param>
            <returns>If the function succeeds and dwCount specifies an adequate number of bytes, 
            the return value is always dwCount. If dwCount is too small or the function fails, 
            the return value is 0.</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.GetRegionData(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The GetRegionData function fills the specified buffer with data describing a region. 
            This data includes the dimensions of the rectangles that make up the region. 
            </summary>
            <param name="hRgn">Handle to the region</param>
            <param name="dwCount">Specifies the size, in bytes, of the lpRgnData buffer</param>
            <param name="lpRgnData">Pointer to int value. Must be 0
            The dimensions of the region are in logical units. If this parameter is NULL, 
            the return value contains the number of bytes needed for the region data</param>
            <returns>If the function succeeds the return value is the required number of bytes.</returns>
        </member>
        <member name="M:Dapfor.Net.Internal.SafeNativeMethods.GetUpdateRect(System.IntPtr,Dapfor.Net.Internal.SafeNativeMethods.RECT@,System.Int32)">
            <summary>
            The GetUpdateRect function retrieves the coordinates of the smallest rectangle that completely 
            encloses the update region of the specified window. GetUpdateRect retrieves the rectangle in logical coordinates. 
            If there is no update region, GetUpdateRect retrieves an empty rectangle (sets all coordinates to zero). 
            </summary>
            <param name="hWnd">handle to window</param>
            <param name="rc">Pointer to the RECT structure that receives the coordinates, in device units, of the enclosing rectangle</param>
            <param name="bErase">erase state</param>
            <returns>If the update region is not empty, the return value is nonzero</returns>
        </member>
        <member name="T:Dapfor.Net.Internal.SafeNativeMethods.RGNDATAHEADER">
            <summary>
            The RGNDATAHEADER structure describes the data returned by the GetRegionData function. 
            </summary>
        </member>
        <member name="T:Dapfor.Net.Internal.SafeNativeMethods.RGNDATA">
            <summary>
            The RGNDATA structure contains a header and an array of rectangles that compose a region. The rectangles are sorted top to bottom, left to right. They do not overlap.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.ScrollChangeEventArgs">
            <summary>
            Provides information on scroll changes
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ScrollChangeEventArgs.#ctor(System.Int32,System.Int32,Dapfor.Net.Ui.IScrollManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ScrollChangeEventArgs"/> class.
            </summary>
            <param name="newPosition">The new position.</param>
            <param name="oldPosition">The old position.</param>
            <param name="scrollManager">The scroll manager.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.ScrollChangeEventArgs.NewPosition">
            <summary>
            Gets the new position of the scroll.
            </summary>
            <value>The new position.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ScrollChangeEventArgs.OldPosition">
            <summary>
            Gets the old position of the scroll.
            </summary>
            <value>The old position.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ScrollChangeEventArgs.ScrollManager">
            <summary>
            Gets the scroll manager.
            </summary>
            <value>The scroll manager.</value>
        </member>
        <member name="T:Dapfor.Net.Data.CustomTypeDescriptorAccessor">
             <summary>
             Wraps an object the <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> type.
             </summary>
             <remarks>Usually this class enables the grid working with data tables.
             <code>
             void SetDataSource(Grid grid)
             {
                 DataSet dataSet = new DataSet();
                 dataSet.ReadXml("test.xml");
                 DataTable employee = dataSet.Tables["Employee"];
            
                 grid.DataSource = employee;
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.CustomTypeDescriptorAccessor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.CustomTypeDescriptorAccessor"/> class.
            </summary>
            <param name="dataObject">The data object.</param>
            <exception cref="T:System.ArgumentNullException">Raised if the <c>dataObject</c> is null.</exception>
        </member>
        <member name="M:Dapfor.Net.Data.CustomTypeDescriptorAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.CustomTypeDescriptorAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.CustomTypeDescriptorAccessor.FireFieldChanged(Dapfor.Net.Data.IDataField)">
            <summary>
            Fires the field changed.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="E:Dapfor.Net.Data.CustomTypeDescriptorAccessor.FieldChanged">
            <summary>
            Occurs when a field of the row is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.CustomTypeDescriptorAccessor.Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.CustomTypeDescriptorAccessor.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.CustomTypeDescriptorAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether the access to the fields of the data object by their field identifier is available.
            </summary>
            <value>
            	Always <c>true</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.CustomTypeDescriptorAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value><c>true</c> if the <c>dataObject</c> implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.CustomTypeDescriptorAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.CustomTypeDescriptorAccessor.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>The underlying data object.</value>
        </member>
        <member name="P:Dapfor.Net.Data.CustomTypeDescriptorAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.EnumerableEditor">
            <summary>
            A dropdown editor to edit <see cref="T:System.Collections.IEnumerable"/> values
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.EnumerableEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Editors.EnumerableEditor"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.EnumerableEditor.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Editors.EnumerableEditor"/> class.
            </summary>
            <param name="collection">The collection of items.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.EnumerableEditor.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Editors.EnumerableEditor"/> class.
            </summary>
            <param name="sortItems">if set to <c>true</c> all items in the drop down list will be sorted.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.EnumerableEditor.#ctor(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Editors.EnumerableEditor"/> class.
            </summary>
            <param name="collection">The collection of items.</param>
            <param name="sortItems">if set to <c>true</c> [sort items].</param>
        </member>
        <member name="M:Dapfor.Net.Editors.EnumerableEditor.Populate(System.Windows.Forms.ListBox,System.Object,System.Drawing.ContentAlignment@)">
            <summary>
            Populates the list box with items from <see cref="T:System.Collections.IEnumerable"/> object.
            </summary>
            <param name="listBox">The list box.</param>
            <param name="value">The value to be edited.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.EnumerableEditor.EndEdit(System.Windows.Forms.ListBox,System.Object)">
            <summary>
            Is called when the end used selected the item in the list box.
            </summary>
            <param name="listBox">The list box.</param>
            <param name="value">The previous value of the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
            <returns>
            A new value, to be passed to the <see cref="T:Dapfor.Net.Ui.Cell"/>
            </returns>
        </member>
        <member name="P:Dapfor.Net.Editors.EnumerableEditor.SortItems">
            <summary>
            Gets or sets a value indicating whether the items in the dropdown list are sorted.
            </summary>
            <value><c>true</c> if items are sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Threading.DirectDispatcher">
            <summary>
            The direct dispatcher executes all tasks in the calling thread without any synchronization. 
            </summary>
        </member>
        <member name="M:Dapfor.Net.Threading.DirectDispatcher.Dispatch(Dapfor.Net.Threading.ITask)">
            <summary>
            Executes the task immediately in the calling thread.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Dapfor.Net.Threading.DirectDispatcher.SyncDispatch(Dapfor.Net.Threading.ITask)">
            <summary>
            Executes the task immediately in the calling thread.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Dapfor.Net.Threading.DirectDispatcher.SynchronizationRequired">
            <summary>
            Gets a value indicating whether the synchronization is required. The value will be always false.
            </summary>
            <value>
            	Always false.
            </value>
        </member>
        <member name="T:Dapfor.Net.Theming.IRoundButtonRenderer">
            <summary>
            Provides an appearance and methods to draw <see cref="T:Dapfor.Net.Ui.RoundButton">RoundButton</see> with selected style.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Theming.IRoundButtonRenderer.DrawBackground(Dapfor.Net.Ui.RoundButton,Dapfor.Net.Ui.Appearance,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background.
            </summary>
            <param name="button">The button.</param>
            <param name="appearance">The appearance.</param>
            <param name="graphics">The graphics.</param>
            <param name="clipRc">The clip rc.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.IRoundButtonRenderer.DrawText(Dapfor.Net.Ui.RoundButton,Dapfor.Net.Ui.Appearance,System.String,System.Windows.Forms.TextFormatFlags,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the text.
            </summary>
            <param name="roundButton">The round button.</param>
            <param name="appearance">The appearance.</param>
            <param name="text">The text.</param>
            <param name="formatFlags">The format flags.</param>
            <param name="graphics">The graphics.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.IRoundButtonRenderer.DrawImage(Dapfor.Net.Ui.RoundButton,Dapfor.Net.Ui.Appearance,System.Drawing.Image,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the image.
            </summary>
            <param name="roundButton">The round button.</param>
            <param name="appearance">The appearance.</param>
            <param name="image">The image.</param>
            <param name="graphics">The graphics.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.IRoundButtonRenderer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapfor.Net.Theming.IRoundButtonRenderer.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="T:Dapfor.Net.Filters.NumericComparingFilter">
            <summary>
            Column filter that matches numeric values
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.NumericComparingFilter.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.NumericComparingFilter.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.NumericComparingFilter.Reset">
            <summary>
            Resets the filter
            </summary>
        </member>
        <member name="P:Dapfor.Net.Filters.NumericComparingFilter.IsDropDownResizable">
            <summary>
            Gets a value indicating whether drop-down editors should be resizable by the user.
            </summary>
            <value></value>
            <returns>true if drop-down editors are resizable; otherwise, false.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.NumericComparingFilter.NumericComparingEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Formats.DoubleFormatAttribute">
            <summary>
            An attribute that declares <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> for a property of data object.
            </summary>
            <remarks>
            <para>A very important feature in .Net Grid is its ability to work directly with application business logic. Business logic is a set of classes that may 
            have certain properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling 
            <see cref="M:System.Object.ToString">Object.ToString()</see> or <see cref="M:System.String.Format(System.String,System.Object[])">String.Format("{0}", value)</see>. However, this approach 
            is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to convert 
            values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a value 
            equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. For application programming 
            it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc.</item>
            <item>In a column: <see cref="P:Dapfor.Net.Ui.Column.Format">Column.Format</see> = 'your format';</item>
            <item>Directly in a cell (this method requires a lot of memory): <see cref="P:Dapfor.Net.Ui.Cell.Format">Cell.Format</see> = 'your format';</item>
            </list>
            </para>
            <para>
            The <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> can be declared with the <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>. The following example demonstrates this:</para>
            <code>
            public class Product
            {
                private double price;
                
                //With this declaration all double values are formatted with DoubleFormat.
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                }
            }
            
            //Populate the grid and set a specified format for the 'Price' column
            public void PopulateGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
            
                //Populate the grid
                grid.Rows.Add(new Product());
            }
            </code>
            </remarks>  
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormatAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormatAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <example>
            <code>
            [DoubleFormat(Precision = 4)]
            public double Price
            {
                get { return price; }
            }
            
            //The grid will show the double value 123456789.123456 as "123 456 789.1235"
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Formats.DoubleFormatAttribute.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="shortForm">if set to <c>true</c> the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> will format big values to the short form, remplacing millions and billions by 'M' or 'B' letters</param>
            <param name="showZero">if set to <c>true</c>, the <see cref="T:Dapfor.Net.Formats.DoubleFormat"/> will show '0' symbol for the zero values.</param>
            <example>
            <code>
            [DoubleFormat(Precision = 4, ShortForm = true, ShowZero = false)]
            public double Price
            {
                get { return price; }
            }
            
            //The grid will show the double value 123456789.123456 as "123.4568 M"
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormatAttribute.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormatAttribute.ShortForm">
            <summary>
            Gets or sets a value indicating whether the value is shown in short form.
            </summary>
            <value><c>true</c> if value is shown in short form; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormatAttribute.ShowZero">
            <summary>
            Gets or sets a value indicating whether the symbol '0' is shown when the value equals to zero.
            </summary>
            <value><c>true</c> if '0' is shown when the value equals to zero; otherwise, empty string will be a result of formatting.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.DoubleFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.ElementState">
            <summary>
            Specifies state of a UI element
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ElementState.Normal">
            <summary>
            Normal state
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ElementState.Hover">
            <summary>
            The mouse is over the UI element
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ElementState.Active">
            <summary>
            The end user holds the left mouse button over the UI element
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ElementState.Disabled">
            <summary>
            The control is disabled
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.GradientDirection">
            <summary>
            Gradient direction
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.GradientDirection.Horizontal">
            <summary>
            Gradient from left to right
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.GradientDirection.Vertical">
            <summary>
            Gradient from top to bottom
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintPart">
            <summary>
            Specifies the parts of UI element that are to be painted. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Empty">
            <summary>
            Nothing to paint
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Background">
            <summary>
            Background 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Borders">
            <summary>
            Borders around the UI element 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.SortIcon">
            <summary>
            Sort icon on the column's caption
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Image">
            <summary>
            Icon in the <see cref="T:Dapfor.Net.Ui.Column"/> or in the <see cref="T:Dapfor.Net.Ui.Cell"/> 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Text">
            <summary>
            Text of the UI element. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.ColumnCaptions">
            <summary>
            Column caption. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.ColumnSeparator">
            <summary>
            Separator between column captions. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.HierarchicalLines">
            <summary>
            Hierarchical lines between row selector and the first cell.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.HierarchicalLinesBackground">
            <summary>
            Background of hierarchical lines between row selector and the first cell.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.SpaceBeforeFirstColumn">
            <summary>
            Empty space before of the first <see cref="T:Dapfor.Net.Ui.Column"/>. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.SpaceAfterLastColumn">
            <summary>
            Empty space after the last <see cref="T:Dapfor.Net.Ui.Column"/>. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.ExpansionButton">
            <summary>
            Expansion (+/-) button. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Focus">
            <summary>
            Frame around focused <see cref="T:Dapfor.Net.Ui.Row"/> or <see cref="T:Dapfor.Net.Ui.Cell"/>.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Selection">
            <summary>
            Frame around selected <see cref="T:Dapfor.Net.Ui.Row"/>s.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.RowSelector">
            <summary>
            Row selector
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.RowSelectorImages">
            <summary>
            Row selector images
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Editor">
            <summary>
            Cell editor
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.EditorValue">
            <summary>
            value, if <see cref="T:System.Drawing.Design.UITypeEditor"/> supports value painting 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Highlighting">
            <summary>
            Cell highlighting
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.TooltipMessage">
            <summary>
            Tooltip icon in cell
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.TooltipCellFrame">
            <summary>
            A frame around cell if it has tooltip message
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.VerticalLines">
            <summary>
            Vertical lines between cells
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.HorizontalLines">
            <summary>
            Horizontal lines between cells
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.Filter">
            <summary>
            Filter icon in column
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.PaintPart.All">
            <summary>
            Paints all parts of the UI element
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.BorderSide">
            <summary>
            Borders of a rectangle. 
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.BorderSide.None">
            <summary>
            No border is specified.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.BorderSide.Left">
            <summary>
            The left border is specified.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.BorderSide.Top">
            <summary>
            The top border is specified.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.BorderSide.Right">
            <summary>
            The right border is specified.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.BorderSide.Bottom">
            <summary>
            The bottom border is specified.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.BorderSide.All">
            <summary>
            All borders are specified.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.ImageStretch">
            <summary>
            Indicates how should the image be stretched
            </summary>
            <see cref="T:Dapfor.Net.Ui.ImageSettings"/>
            <seealso cref="T:Dapfor.Net.Ui.Appearance"/>
        </member>
        <member name="F:Dapfor.Net.Ui.ImageStretch.NotSet">
            <summary>
            The image is not stretched. Default images's size is used.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ImageStretch.Vertical">
            <summary>
            The image is stretched vertically.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ImageStretch.Horizontal">
            <summary>
            The image is stretched horizontally.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ImageStretch.Both">
            <summary>
            Stretches the image vertically and horizontally.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ImageStretch.BestFit">
            <summary>
            Stretches to the optimal width and height.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.MouseWheelBehaviour">
            <summary>
            Specifies mouse wheel behavior
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.MouseWheelBehaviour.None">
            <summary>
            Mouse wheel does not take a part in the navigation.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.MouseWheelBehaviour.Scroll">
            <summary>
            Scroll the content of the <see cref="T:Dapfor.Net.Ui.Grid"/> without changing the focus or selection.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.MouseWheelBehaviour.MoveFocus">
            <summary>
            Scroll the content and change the focused <see cref="T:Dapfor.Net.Ui.Row"/>
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.MouseWheelBehaviour.MoveFocusAndSelection">
            <summary>
            Scroll the content and change the focus and selection
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.ExpansionButtonBehaviour">
            <summary>
            Specifies behavior of expansion (+/-) button.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ExpansionButtonBehaviour.HideWhenNoChildren">
            <summary>
            If the <see cref="T:Dapfor.Net.Ui.Row"/> does not have children or all children are filtered, then the 
            expansion button is not visible.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ExpansionButtonBehaviour.ShowAlways">
            <summary>
            Shows the expansion button all the time, even the <see cref="T:Dapfor.Net.Ui.Row"/> does not have the children.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ExpansionButtonBehaviour.HideAlways">
            <summary>
            The expansion button is not visible.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.ExpansionButtonBehaviour.ShowHover">
            <summary>
            Shows the expansion button only if the <see cref="T:Dapfor.Net.Ui.Row"/> has non-filtered children and 
            the mouse is over the <see cref="T:Dapfor.Net.Ui.Row"/>.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Editors.BoolEditor">
            <summary>
            A dropdown editor to edit boolean values.
            </summary>
            <example> Demonstrates how to declare the <see cref="T:Dapfor.Net.Editors.CheckBoxEditor"/> to edit values in <see cref="T:Dapfor.Net.Ui.Cell"/>s
            <code>
            //Some data object with boolean Properties
            public class Product
            {
                private bool active;
                private bool tradable;
            
                //Declare the CheckBoxEditor for this property. Each Grid will use this editor to edit values in cells
                [Editor(typeof(CheckBoxEditor), typeof(UITypeEditor))]
                public bool Active
                {
                    get { return active; }
                    set { active = value; }
                }
            
                //The CheckBoxEditor may be declared in the Column 
                public bool Tradable
                {
                    get { return tradable; }
                    set { tradable = value; }
                }
            }
            
            //Initialize the grid
            public void AddDataObjectToGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Active"));
                grid.Headers[0].Add(new Column("Tradable"));
            
                grid.Headers[0]["Active"].Editable = true;
                grid.Headers[0]["Tradable"].Editable = true;
                //Declare the editor only for the current grid
                grid.Headers[0]["Tradable"].Editor = new CheckBoxEditor();
                
                //Add a data object
                grid.Rows.Add(new Product());
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Editors.BoolEditor.Populate(System.Windows.Forms.ListBox,System.Object,System.Drawing.ContentAlignment@)">
            <summary>
            Is called to populate the list box.
            </summary>
            <param name="listBox">The list box.</param>
            <param name="value">The value to be edited.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.BoolEditor.EndEdit(System.Windows.Forms.ListBox,System.Object)">
            <summary>
            Is called when the end used selected the item in the list box.
            </summary>
            <param name="listBox">The list box.</param>
            <param name="value">The previous value of the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
            <returns>
            A new value, to be passed to the <see cref="T:Dapfor.Net.Ui.Cell"/>
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.BoolEditor.GetPaintCellSupported">
            <summary>
            Gets a value, indicating whether this editor supports <see cref="T:Dapfor.Net.Ui.Cell"/> painting.
            </summary>
            <returns>Always <c>true</c></returns>
        </member>
        <member name="M:Dapfor.Net.Editors.BoolEditor.PaintCell(Dapfor.Net.Ui.PaintCellEventArgs)">
            <summary>
            Paints the cell.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.PaintCellEventArgs"/> instance containing the data to paint the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
        </member>
        <member name="T:Dapfor.Net.Ui.ColorButton">
             <summary>
             Color button with a drop-down color picker
             </summary>
             <remarks>
             Following example demonstrates how to use color button:
             <code>
             class SomeControl : UserControl
             {
                 private ColorButton colorButton;
            
                 private void InitializeComponent()
                 {
                     this.SuspendLayout();
            
                     this.colorButton = new Dapfor.Net.Ui.ColorButton();
                     // 
                     // colorButton
                     // 
                     this.colorButton.BorderStyle = System.Windows.Forms.Border3DStyle.RaisedInner;
                     this.colorButton.Color = System.Drawing.Color.Red;
                     this.colorButton.FlatAppearance.BorderSize = 0;
                     this.colorButton.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
                     this.colorButton.Location = new System.Drawing.Point(99, 18);
                     this.colorButton.Name = "colorButton";
                     this.colorButton.Size = new System.Drawing.Size(53, 14);
                     this.colorButton.ColorChanged += new System.EventHandler&lt;System.EventArgs&gt;(this.OnColorChanged);
            
            
                     this.Controls.Add(this.colorButton);
                     this.ResumeLayout(false);
                 }
            
                 private void OnColorChanged(object sender, EventArgs e)
                 {
                     //The color of the colorButton has been changed: Do something...
                 }
             }
             </code>
             </remarks>
             <threadsafety>The control is not thread safe.</threadsafety>
        </member>
        <member name="M:Dapfor.Net.Ui.ColorButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ColorButton"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.ColorButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the button with the current color and 3D borders
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ColorButton.OnMouseEnter(System.EventArgs)">
            <summary>Called when the mouse enters to the button</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ColorButton.OnMouseLeave(System.EventArgs)">
            <summary>Called when the mouse leaves the button</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ColorButton.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the end user clicks with the mouse's button over the control
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.ColorButton.Color">
            <summary>
            Gets or sets the color of the button.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.ColorButton.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The border style.</value>
        </member>
        <member name="E:Dapfor.Net.Ui.ColorButton.ColorChanged">
            <summary>
            Occurs when the color is changed.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Formats.HexFormat">
            <summary>
            Formats and parses hexadecimal values
            </summary>
            <remarks>
            <para>The following example demonstrates how to set hexadecimal format in a column:
            <code>
            public void InitializeGrid(Grid grid)
            {
                Column column = grid.Headers[0]["SomeColumn"];
                column.Format = new HexFormat();
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Formats.HexFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.HexFormat"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Formats.HexFormat.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.HexFormat"/> class.
            </summary>
            <param name="showZero">if set to <c>true</c>, the format will display '0' or '0x0' when the value is zero. Otherwise the format displays an empty string.</param>
            <param name="showPrefix">if set to <c>true</c>, the format adds a '0x' prefix to a hexadecimal string.</param>
        </member>
        <member name="M:Dapfor.Net.Formats.HexFormat.Format(Dapfor.Net.Data.IDataField)">
            <summary>
            Formats the specified value of the hexadecimal text.
            </summary>
            <param name="dataField">The data field.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Dapfor.Net.Formats.HexFormat.CanParse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Indicates whether the format can parse the specified text to a numeric value.
            </summary>
            <param name="text">The text.</param>
            <param name="dataField">The data field.</param>
            <returns>
            	<c>true</c> if this instance can parse the specified text; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Formats.HexFormat.Parse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Parses the hexadecimal text to the value of the numeric value.
            </summary>
            <param name="text">The text to be parsed.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="P:Dapfor.Net.Formats.HexFormat.ShowZero">
            <summary>
            Gets or sets a value indicating whether the format will display '0' or '0x0' when the value is zero. 
            </summary>
            <value><c>true</c> if '0' or '0x0' are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.HexFormat.ShowPrefix">
            <summary>
            Gets or sets a value indicating whether the format adds a '0x' prefix to a hexadecimal string.
            </summary>
            <value><c>true</c> if the prefix is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Formats.EmptyFormat">
             <summary>
             Formats all values to empty strings to prevent displaying text in cells.
             </summary>
             <remarks>
             <para>A very important feature in .Net Grid is its ability to work directly with application business logic. Business logic is a set of classes that may 
             have certain properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
             System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling 
             <see cref="M:System.Object.ToString">Object.ToString()</see> or <see cref="M:System.String.Format(System.String,System.Object[])">String.Format("{0}", value)</see>. However, this approach 
             is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to convert 
             values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a value 
             equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. For application programming 
             it's better to have a set of format classes, where data presentation is centralized.</para>
             <para>In programming, formats can be defined in the following places:
             <list type="bullet">
             <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc.</item>
             <item>In a column: <see cref="P:Dapfor.Net.Ui.Column.Format">Column.Format</see> = 'your format';</item>
             <item>Directly in a cell (this method requires a lot of memory): <see cref="P:Dapfor.Net.Ui.Cell.Format">Cell.Format</see> = 'your format';</item>
             </list>
             </para>
             <para>
             This format can be declared with the <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>. The following example demonstrates this:</para>
             <code>
             //Some data object
             public class Product1
             {
                 private double price;
             
                 //There is no displayed text in cells.
                 [EmptyFormat]
                 public double Price
                 {
                     get { return price; }
                 }
             }
             
             //Other data object
             public class Product2
             {
                 private double price;
             
                 public double Price
                 {
                     get { return price; }
                 }
             }
             
             //Populate the grid with data objects
             public void PopulateGrid(Grid grid)
             {
                 //Initialize grid
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
             
                 //Populate grid. Only the Product2 price will displayed
                 grid.Rows.Add(new Product1());
                 grid.Rows.Add(new Product2());
             }
             </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Formats.EmptyFormat.Format(Dapfor.Net.Data.IDataField)">
            <summary>
            Formats the specified value of the specified data object.
            </summary>
            <param name="dataField">The data field.</param>
            <returns>Always the <see cref="F:System.String.Empty"/> string.</returns>
        </member>
        <member name="M:Dapfor.Net.Formats.EmptyFormat.CanParse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Indicates whether the format can parse the specified text to a unformatted value.
            </summary>
            <param name="text">The text.</param>
            <param name="dataField">The data field.</param>
            <returns>
            	<c>Always false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Formats.EmptyFormat.Parse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            This method does nothing.
            </summary>
            <param name="text">The text to be parsed.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="P:Dapfor.Net.Formats.EmptyFormat.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.DragDropContentEventArgs">
             <summary>
             Data and methods enable to complete the drag and drop operation.
             </summary>
             <remarks>.Net Grid supports drag &amp; drop operations with grid rows, moving the rows within a grid and between grids, changing hierarchy, exporting data to 
             applications like Word and Excel in text format and importing data from other applications.
             The following properties should be set to true to use drag &amp; drop feature:
             <code>
             Grid.AllowDrop = true;
             Grid.DragAndDrop.Enabled = true;
             </code>
             <para>To start drag &amp; drop operation the end user should place the cursor over grid rows, left-click and start moving the row. First of all, drag &amp; drop 
             operation raises <see cref="E:Dapfor.Net.Ui.Grid.DragBegin">Grid.DragBegin</see> event that can be used to define available drag &amp; drop effects and content and, if desired, to 
             set <see cref="P:Dapfor.Net.Ui.DragContentBeginEventArgs.Data">DragContentBeginEventArgs.Data</see> property that is an object passed to <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">Control.DoDragDrop()</see> method 
             that can be used to export data to Word or Excel.</para>
             <para>The following events are called during drag &amp; drop operation when the cursor is moved to the target grid, passes over it and leaves it:
             <list type="bullet">
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent">Grid.DragEnterContent</see></item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragOverContent">Grid.DragOverContent</see></item>
             <item><see cref="E:System.Windows.Forms.Control.DragLeave">Control.DragLeave</see></item>
             </list></para>
             <para>The grid calculates the required values and data insertion position, checks whether drag &amp; drop is possible and enables customization of drag &amp; drop effects, 
             data location and data hierarchy. During drag &amp; drop operation the grid shows data insertion location indicators that enable the end user to see where exactly the 
             data will be inserted, including its position in hierarchy. The grid has user-friendly interface. If during drag &amp; drop operation the user keeps the cursor over a 
             row for 1 second, this row is automatically expanded. If the grid has a vertical scrollbar, the grid automatically scrolls if the user moves the cursor above or below the grid.</para>
             <para><b>Data insertion</b></para>
             <para>To insert data into the grid the end user moves the cursor over the grid with left mouse button pressed and the grid highlights the place of data insertion. 
             Two data insertion modes are available:
             <list type="bullet">
             <item>Flat mode, when data is inserted above the row at the current cursor position at the same hierarchy level.</item>
             <item>Data can also be inserted as a child row of the row at the current cursor position.</item>
             </list></para>
             <para>There are 3 other modes that control data insertion and are controlled by <see cref="T:Dapfor.Net.Ui.Grid.GridDragAndDrop">Grid.DragAndDrop.DropMode</see> property:
             <list type="bullet">
             <item>Flat mode only</item>
             <item>Hierarchical mode only</item>
             <item>Combined mode. In this mode the grid has special areas that can be used to set data insertion mode by placing the cursor over those areas. For flat mode such 
             areas are any place above the row except for small +/- icon. To insert data in hierarchical mode you have to place the cursor over this icon. 
             It is also possible to switch from flat mode to hierarchical mode using Shift key.</item>
             </list>
             </para>
             <para>In accordance with possible DragAndDrop effect, the grid supports 3 operations: Copy, Move and Link</para>
             <list type="bullet">
             <item>Copy. This operation creates new rows for data set in <b>DragDropContentEventArgs.Content</b>. <b>DragDropContentEventArgs.Content</b> 
             often contains a collection of rows created in the beginning of drag. In such case hierarchy, selection and expansion are preserved for newly created rows. 
             If <b>DragDropContentEventArgs.Content</b> contains other data than <see cref="T:Dapfor.Net.Ui.Row"/>, the new rows shall be created with relevant <see cref="T:Dapfor.Net.Data.IDataAccessor">DataAccessor</see>. 
             In any case data itself is not copied. If data supports <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface, newly created rows will also get data object notification.</item>
             <item>Move. Data is moved with all information of hierarchy, expansion and selection either within a grid or between grids.</item>
             <item>Link. This operation is similar to Copy, but in this operation DragDropContentEventArgs.Content may contain only Row collection.</item>
             </list>
             <para><b>Drag &amp; drop customization</b></para>
             <para>The grid provides a lot of customization opportunities in the form of event subscription that enable you to modify insertion content, mode and location and 
             to control visual effects of drag &amp; drop operation:
             <list type="bullet">
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragBegin">Grid.DragBegin</see> - controls content and initiation of drag &amp; drop operation. When grids copy or move data in an application they work with content. 
             If you need to send data to Excel, you can set a Data object containing image, string or any other object implementing IDataObject interface. This object is transferred to 
             <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">Control.DoDragDrop</see> method enabling data exchange with external applications.</item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragEnterContent">Grid.DragEnterContent</see> and <see cref="E:Dapfor.Net.Ui.Grid.DragOverContent">Grid.DragOverContent</see> enable controlling various visual 
             effects and defining data insertion location, data hierarchy and inserted content.</item>
             <item><see cref="E:Dapfor.Net.Ui.Grid.DragDropContent">Grid.DragDropContent</see> enables direct control of content insertion. If data is inserted from another grid, 
             <b>DragDropContentEventArgs.Content</b> should be defined in advance. It is possible to call any content insertion operation, 
             i.e. <b>DoCopy()/DoMove()/DoLink()</b>. Data will be inserted to the current position via <b>DragDropContentEventArgs.TargetRow</b> and 
             <b>DragDropContentEventArgs.TargetPosition</b>. These parameters can be modified at any moment. If drag &amp; drop operation 
             is initiated by another control or outside the application, <b>DragDropContentEventArgs.Content</b> will have null value. 
             In this case data can be received from <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.Data">DragContentEventArgs.Data</see>, which is an <see cref="T:System.Windows.Forms.IDataObject"/> object. 
             <see cref="T:Dapfor.Net.Ui.DragDropContentEventArgs"/> also provides methods for inserting data to the grid via <see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoCopy">DoCopy(...)</see>/
             <see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoMove">DoMove(...)</see>/<see cref="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoLink(System.Boolean)">DoLink(...)</see> to the position determined by current value of 
             <b>DragContentEventArgs.TargetRow</b> and <see cref="P:Dapfor.Net.Ui.DragContentEventArgs.TargetPosition"/>. This provides a possibility to import data to the grid from external applications.</item>
             </list>
             </para>
             </remarks>
             <example>
             To import data, Excel sends a text string formatted with the above-described method. The grid cannot process such string directly, but it has powerful features for 
             transforming data from Excel format to the format of application business data. Below is an example demonstrating exporting/importing data to/from Excel. 
             <code>
             //Implementation of the method, dragging data from the grid   
             private void OnDragBegin(object sender, DragContentBeginEventArgs e)
             {
                  //Create a string to put it to Excel
                  StringBuilder sb = new StringBuilder();
                  foreach (Row row in e.Content)
                  {
                      if (sb.Length &gt; 0) sb.AppendLine();
                      StringBuilder sbRow = new StringBuilder();
                      foreach (Column column in row.Header)
                      {
                          if (sbRow.Length &gt; 0) sbRow.Append("\t");
                          sbRow.Append(row[column.Id].Text);
                      }
                      sb.Append(sbRow);
                  }
                 e.Data = sb.ToString();
             }
            
             //Drag over event handler
             private void OnDragOverContent(object sender, DragContentEventArgs e)
             {
                 //The content is not specified. The data can be found in e.Data (IDataObject)
                 if (e.Content == null)
                 {
                     e.Effect = DragDropEffects.Copy;
                 }
             }
            
             //Drop data event handler
             private void OnDragDropContent(object sender, DragDropContentEventArgs e)
             {
                 if (e.Content == null)
                 {
                     string data = e.Data.GetData(typeof(string)) as string;
                     if (!string.IsNullOrEmpty(data))
                     {
                         string[] lines = data.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                         foreach (string line in lines)
                         {
                             string[] values = line.Split(new string[] { "\t" }, StringSplitOptions.None);
            
                             //Add an array of values to the grid. Here you can also create your own object and insert it to the grid 
                             e.DoCopy(values);
                         }
                         e.Handled = true;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.DragDropContentEventArgs.#ctor(Dapfor.Net.Ui.Grid,System.Windows.Forms.Control,System.Collections.IEnumerable,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects,System.Windows.Forms.IDataObject,Dapfor.Net.Ui.Row,Dapfor.Net.Ui.DropRowPosition,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.DragDropContentEventArgs"/> class.
            </summary>
            <param name="targetGrid">The target grid.</param>
            <param name="source">The source.</param>
            <param name="content">The content.</param>
            <param name="allowedEffects">The allowed effects.</param>
            <param name="effect">The effect.</param>
            <param name="data">The data.</param>
            <param name="targetRow">The target row.</param>
            <param name="targetPosition">The target position.</param>
            <param name="x">The x-coordinate of the mouse pointer in pixels.</param>
            <param name="y">The y-coordinate of the mouse pointer in pixels.</param>
            <param name="keyState">The current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoMove">
            <summary>
            Moves the data specified in the <b>DragDropContentEventArgs.Content</b> property to the <b>DragContentEventArgs.TargetRow</b> and <b>DragDropContentEventArgs.TargetPosition</b>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoMove(Dapfor.Net.Ui.Row)">
            <summary>
            Moves the specified <see cref="T:Dapfor.Net.Ui.Row"/> to the <b>DragContentEventArgs.TargetRow"</b> and <b>DragDropContentEventArgs.TargetPosition</b>.
            </summary>
            <param name="sourceRow">The source row.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoLink(System.Boolean)">
            <summary>
            Links the data specified in the <b>DragDropContentEventArgs.Content</b> property to the <b>DragContentEventArgs.TargetRow</b> and <b>DragDropContentEventArgs.TargetPosition</b>.
            </summary>
            <param name="withHierarchy">indicates whether the data should be linked with its hierarchy.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoCopy">
            <summary>
            Copies the data specified in the <b>DragDropContentEventArgs.Content</b> property to the <b>DragContentEventArgs.TargetRow</b> and <b>DragDropContentEventArgs.TargetPosition</b>.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoCopy(Dapfor.Net.Ui.Row,System.Boolean)">
            <summary>
            Copies the specified <see cref="T:Dapfor.Net.Ui.Row"/> to the <b>DragContentEventArgs.TargetRow</b> and <b>DragDropContentEventArgs.TargetPosition</b>.
            </summary>
            <param name="sourceRow">The source row.</param>
            <param name="withHierarchy">indicates whether the data should be copied with its hierarchy.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Row"/> related to inserted data</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoCopy(Dapfor.Net.Data.IDataAccessor)">
            <summary>
            Puts the specified <see cref="T:Dapfor.Net.Data.IDataAccessor"/> to the <b>DragContentEventArgs.TargetRow</b> and <b>DragDropContentEventArgs.TargetPosition</b>.
            </summary>
            <remarks>Usually this method is used after deserialization data received from other application.</remarks>
            <param name="sourceData">The source data.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Row"/> related to inserted data</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.DragDropContentEventArgs.DoCopy(System.Object)">
            <summary>
            Puts the specified data object to the <b>DragContentEventArgs.TargetRow</b> and <b>DragDropContentEventArgs.TargetPosition</b>.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns><see cref="T:Dapfor.Net.Ui.Row"/> related to inserted data object</returns>
        </member>
        <member name="P:Dapfor.Net.Ui.DragDropContentEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the drag &amp; drop should be procecced manually.
            </summary>
            <value><c>true</c> indicates that drag &amp; drop was processed and prevents the grid from other data processing; <c>false</c> indicates default drag &amp; drop processing.</value>
        </member>
        <member name="T:Dapfor.Net.Filters.ValueEqualityDropdownFilter">
            <summary>
            Column filter that enables single value selection.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityDropdownFilter.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityDropdownFilter.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.ValueEqualityDropdownFilter.Reset">
            <summary>
            Resets the filter
            </summary>
        </member>
        <member name="P:Dapfor.Net.Filters.ValueEqualityDropdownFilter.IsDropDownResizable">
            <summary>
            Returns <c>true</c>
            </summary>
            <value></value>
            <returns>Always <c>true</c>.
            </returns>
        </member>
        <member name="E:Dapfor.Net.Filters.ValueEqualityDropdownFilter.Filter.FilterUpdated">
            <summary>
            Occurs when the filter's conditions are changed.
            </summary>
            <remarks>This event is raised to force the <see cref="T:Dapfor.Net.Ui.Grid"/> to verify the state of all inserted <see cref="T:Dapfor.Net.Ui.Row"/>s.</remarks>
            <threadsafety>This event may be raised from any thread. If the <see cref="T:Dapfor.Net.Ui.Grid"/> receives a notification from the non-GUI thread, then it will synchronize
            the calling thread with the GUI thread in the asynchronous way without blocking the calling thread. </threadsafety>
        </member>
        <member name="T:Dapfor.Net.Editors.MessageQueueHelper">
            <summary>
            Provides static methods and properties to process Windows messages. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.MessageQueueHelper.ProcessModal(System.TimeSpan)">
            <summary>
            Processes all Windows messages currently in the message queue while specified period.
            </summary>
            <param name="maxTime">Max duration to process messages</param>
        </member>
        <member name="T:Dapfor.Net.Ui.GDIPlusRender">
             <summary>
             Performs basic painting operations using GDI+ (<see cref="T:System.Drawing.Graphics"/> object) drawing
             </summary>
             <example>
             <code>
             public void CellCustomDraw(Grid grid)
             {
                 //Demonstrates, how to custom draw in cell. 
                 //The delegate is called while the cell's painting
                 grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
                 {
                     //Draw a button in the cell's bounds. 
                     Color startColor = Color.LightGray;
                     Color endColor = Color.LightSlateGray;
            
                     //Take into account, that the row can be selected.
                     if (e.Cell.Row != null &amp;&amp; e.Cell.Row.Selected)
                     {
                         startColor = PaintHelper.AlphaBlend(startColor, grid.Selection.Color);
                         endColor = PaintHelper.AlphaBlend(endColor, grid.Selection.Color);
                     }
            
                     //Draw the background
                     Appearance appearance = new Appearance(SystemColors.GrayText, startColor, true, endColor, GradientDirection.Vertical);
                     e.Render.DrawCaption(appearance, ElementState.Normal, e.Cell.VirtualBounds, BorderSide.All, e.Graphics);
            
                     //Prevent from background erasing
                     e.Parts &amp;= e.Parts ^ (PaintPart.Background | PaintPart.Borders);
            
                     //Set a new text color
                     e.Appearance.ForeColor = Color.Yellow;
            
                     //Do default painting without the text drawing
                     e.PaintAll();
                 };
             }
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.GDIPlusRender"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.Fill(System.Drawing.Color,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Fills the rectangle with a specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="bounds">The bounds of the rectangle.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.Fill(Dapfor.Net.Ui.Appearance,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Fills the rectangle with a specified <see cref="T:Dapfor.Net.Ui.Appearance"/>.
            </summary>
            <param name="appearance">The appearance.</param>
            <param name="gradientBounds">Specifies the bounds of the linear gradient.</param>
            <param name="drawBounds">Specifies the rectangle to fill.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.Fill(System.Drawing.Color,System.Drawing.Color,Dapfor.Net.Ui.GradientDirection,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Fills the rectangle with a gradient color.
            </summary>
            <param name="color1">The beginning gredient color.</param>
            <param name="color2">The ending gradient color.</param>
            <param name="direction">The gradient direction.</param>
            <param name="gradientBounds">Specifies the bounds of the linear gradient.</param>
            <param name="drawBounds">Specifies the rectangle to fill.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.DrawFrame(System.Drawing.Color,System.Drawing.Rectangle,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Graphics)">
            <summary>
            Draws a border on a button-style control.
            </summary>
            <param name="color">The color of the border.</param>
            <param name="bounds">The bounds of the border.</param>
            <param name="style">One of the <see cref="T:System.Windows.Forms.ButtonBorderStyle"/> values that specifies the style of the border.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.DrawFrame(System.Drawing.Color,System.Drawing.Rectangle,System.Windows.Forms.ButtonBorderStyle,Dapfor.Net.Ui.BorderSide,System.Drawing.Graphics)">
            <summary>
            Draws a border on a button-style control.
            </summary>
            <param name="color">The color of the border.</param>
            <param name="bounds">The bounds of the border.</param>
            <param name="style">One of the <see cref="T:System.Windows.Forms.ButtonBorderStyle"/> values that specifies the style of the border.</param>
            <param name="sides">One of the <see cref="T:Dapfor.Net.Ui.BorderSide"/> values that specifies which border side should be painted.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.DrawImage(System.Drawing.Image,Dapfor.Net.Ui.ImageSettings,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> at the specified location and with the specified <see cref="T:Dapfor.Net.Ui.ImageSettings"/>
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to draw.</param>
            <param name="settings">The <see cref="T:Dapfor.Net.Ui.ImageSettings"/> specifies the parameters, indicating how the <see cref="T:System.Drawing.Image"/> should be painted.</param>
            <param name="bounds">Specifies the location and size of the drawn image.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.DrawSortIcon(Dapfor.Net.Ui.SortDirection,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a sort icon, when the <see cref="T:Dapfor.Net.Ui.Header"/> has a single sorted <see cref="T:Dapfor.Net.Ui.Column"/>.
            </summary>
            <param name="direction">The sort direction.</param>
            <param name="bounds">Specifies the location and size of the drawn icon.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.DrawSortIcon(Dapfor.Net.Ui.SortDirection,System.Int32,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a sort icon for the specified sort level, when the <see cref="T:Dapfor.Net.Ui.Header"/> has many sorted <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <param name="direction">The sort direction.</param>
            <param name="sortLevel">The sort level.</param>
            <param name="bounds">Specifies the location and size of the drawn icon.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.DrawText(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.StringFormat,System.Drawing.Graphics)">
            <summary>
            Draws the text.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="bounds">The bounds.</param>
            <param name="format">The format.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.DrawExpansionButton(System.Boolean,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the expansion (+/-) button.
            </summary>
            <param name="expanded">Indicates whether the button is expanded. <c>true</c> - expanded, otherwise <c>false</c>.</param>
            <param name="bounds">The button's size.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.SortIconMetrics">
            <summary>
            Gets a sise, required to draw the sort icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.TextMetrics(System.String,System.Drawing.Font,System.Drawing.Graphics)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="text">The text to be measured.</param>
            <param name="font">The font.</param>
            <param name="graphics">The graphics.</param>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.GDIPlusRender.DrawCaption(Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.ElementState,System.Drawing.Rectangle,Dapfor.Net.Ui.BorderSide,System.Drawing.Graphics)">
            <summary>
            Draws a caption with the specified 3D-borders and <see cref="T:Dapfor.Net.Ui.Appearance"/>.
            </summary>
            <param name="appearance">The appearance.</param>
            <param name="state">One of the <see cref="T:Dapfor.Net.Ui.ElementState"/> values that specifies the style of the border.</param>
            <param name="bounds">The bounds of the border.</param>
            <param name="sides">One of the <see cref="T:Dapfor.Net.Ui.BorderSide"/> values that specifies which border side should be painted.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.GDIPlusRender.DefaultFont">
            <summary>
            Gets the default font to paint text in <see cref="T:Dapfor.Net.Ui.Cell"/>s and <see cref="T:Dapfor.Net.Ui.Column"/>s.
            </summary>
            <value>The default font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.GDIPlusRender.Instance">
            <summary>
            Gets the instance of the <see cref="T:Dapfor.Net.Ui.GDIPlusRender"/>.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.EnumEditor">
            <summary>
            A dropdown editor to edit values of <see cref="T:System.Enum"/> type
            </summary>
            <remarks>
            To edit value in <see cref="T:Dapfor.Net.Ui.Cell"/>, the data object must implement 
            the Set- property, and the <see cref="T:Dapfor.Net.Ui.Column"/> must be editable. If this two conditions are true, then the <see cref="T:Dapfor.Net.Ui.Grid"/> looks for the editor in the next order: 
            <list type="bullet"> 
            <item>In <see cref="T:Dapfor.Net.Ui.Column"/> by calling the <see cref="P:Dapfor.Net.Ui.Column.Editor"/> property</item>
            <item>In <see cref="T:Dapfor.Net.Data.IDataField"/> by calling the <see cref="P:Dapfor.Net.Data.IDataField.Editor"/> property. The editon can be specified with the <see cref="T:System.ComponentModel.EditorAttribute"/></item>
            <item>If the editor is not found, the <see cref="T:Dapfor.Net.Ui.Grid"/> tries to retrive an editor from the <see cref="T:System.ComponentModel.PropertyDescriptor"/> by calling the <see cref="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)"/> method</item>
            <item>If the value is of the bool type, <see cref="T:Dapfor.Net.Editors.BoolEditor"/> is used</item>
            <item>If the value is of the enum type, <see cref="T:Dapfor.Net.Editors.EnumEditor"/> is used</item>
            <item>If the value implements <see cref="T:System.Collections.IEnumerable"/> interface, <see cref="T:Dapfor.Net.Editors.EnumerableEditor"/> is used</item>
            <item>If the value implements <see cref="T:System.IConvertible"/> interface, <see cref="T:Dapfor.Net.Editors.ConvertibleValueEditor"/> is used</item>
            </list>
            </remarks>
            <example>
            <code>
            //A custom editor
            public class CustomEditor : UITypeEditor
            {
                //Implementation of the editor... (See more the System.Drawing.Design.UITypeEditor)
            }
            
            public class DataObject
            {
                //Declare some enum
                public enum DataFieldType
                {
                    Double,
                    Decimal,
                    String,
                }
            
                private DataFieldType fieldType;
            
                //Public property. If the user wants to edit this field, the EnumEditor will be used
                public DataFieldType FieldType
                {
                    get { return fieldType; }
                    set { fieldType = value; }
                }
            }
            
            
            //Initialize the grid
            public void PopulateGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("FieldType"));
                grid.Headers[0]["FieldType"].Editable = true;
                grid.Headers[0]["FieldType"].Editor = new CustomEditor();
            
                //Add a data object
                grid.Rows.Add(new DataObject());
            }    
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Editors.EnumEditor.Populate(System.Windows.Forms.ListBox,System.Object,System.Drawing.ContentAlignment@)">
            <summary>
            Is called to populate the list box.
            </summary>
            <param name="listBox">The list box.</param>
            <param name="value">The value to be edited.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.EnumEditor.EndEdit(System.Windows.Forms.ListBox,System.Object)">
            <summary>
            Is called when the end used selected the item in the list box.
            </summary>
            <param name="listBox">The list box.</param>
            <param name="value">The previous value of the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
            <returns>
            A new value, to be passed to the <see cref="T:Dapfor.Net.Ui.Cell"/>
            </returns>
        </member>
        <member name="T:Dapfor.Net.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.about">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.arrow_down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.arrow_left">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.arrow_right">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.arrow_up">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.bullet_triangle_blue">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.bullet_triangle_blue2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.bullet_triangle_grey">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.bullet_triangle_grey2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.bullet_triangle_red">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.bullet_triangle_red2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.Cursor">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.dapfor">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.date_time">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.document_down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.document_ok">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.find_again">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_debug">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_filter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_filter_add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_filter_delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_filter2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_gears">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_hammer">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_inspector">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.icon_warning2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.recycle_preferences">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.row_add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.row_add_after">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.row_current">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.save">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.sort_ascending">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.sort_descending">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Resources.view">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Data.PrimitiveTypeAccessor">
            <summary>
            Wraps primitive object types such as int, double, etc... 
            </summary>
             <see cref="T:Dapfor.Net.Data.IDataField"/> interface. 
            <remarks>
            This class enables to insert objects of primitive types via <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)">Grid.Rows.Add(object)</see> method.
            <code>
            void AddPrimitiveDataType(Grid grid)
            {
                //Configure headers. Top hierarchical level (level 0)
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("int values"));
                            
                grid.Rows.Add(10);
                grid.Rows.Add(20);
                grid.Rows.Add(30);
            
                Console.WriteLine("Value = {0}", grid.Rows[1][0].Value);  
            }   
            //Output:  
            //Value = 20
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.PrimitiveTypeAccessor.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.PrimitiveTypeAccessor"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Dapfor.Net.Data.PrimitiveTypeAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.PrimitiveTypeAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.PrimitiveTypeAccessor.FireFieldChanged(Dapfor.Net.Data.IDataField)">
            <summary>
            Fires the field changed.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Dapfor.Net.Data.PrimitiveTypeAccessor.NotifyUpdate">
            <summary>
            Notifies listeners of <see cref="T:Dapfor.Net.Data.IDataAccessor"/> about the field updating.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Dapfor#Net#Data#IDataAccessor#Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Dapfor#Net#Data#IDataAccessor#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether this accessor supports field indexing by the string identifiers.
            </summary>
            <value>
            	Always <c>false</c>.
            </value>
            <seealso cref="P:Dapfor.Net.Data.IDataField.Id"/>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>The underlying data object.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="E:Dapfor.Net.Data.PrimitiveTypeAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Id">
            <summary>
            Gets the string identifier of the data field. This identifier must be unique across the <see cref="T:Dapfor.Net.Data.IDataAccessor"/>.
            </summary>
            <value>The <c>null</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Index">
            <summary>
            Gets the index of the property.
            </summary>
            <value>Always <c>0</c></value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.DisplayName">
            <summary>
            Gets the user-friendly name, the property is displayed with. Usually is has a short form to display in columns.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Description">
            <summary>
            Gets the description of the property. Usually the full user-friendly description or explanation of the property.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Format">
            <summary>
            Gets a format to transform the value, returned by the <see cref="P:Dapfor.Net.Data.IDataField.Value"/> property to a string and vice-versa.
            If the format successfully parses the string, the resulting value will be passed to the <see cref="P:Dapfor.Net.Data.IDataField.Value"/> method.
            </summary>
            <value>Always <c>null</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Browsable">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Data.IDataField"/> is browsable in property-like grids.
            </summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Bindable">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Data.IDataField"/> is bindable.
            </summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Readonly">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Data.IDataField"/> is readonly.
            </summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Editor">
            <summary>
            Gets the editor to edit values of this <see cref="T:Dapfor.Net.Data.IDataField"/> at design or run time.
            </summary>
            <value>The editor if exists. Otherwise <c>null</c>.</value>
            <remarks>The <see cref="N:System.ComponentModel"/> provides two types of editors. Dialog-based that is
            shown as a modal or non-modal <see cref="T:System.Windows.Forms.Form"/> and ones, shown in a drop down control.
            It is possible to declare a custom editor by using <see cref="T:System.ComponentModel.EditorAttribute"/>.</remarks>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.FieldType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>The type of the field.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.DataAccessor">
            <summary>
            Gets the accessor to the data object.
            </summary>
            <value>The data accessor.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.Value">
            <summary>
            Gets or sets the value of this <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.IsComposite">
            <summary>
            Gets a value indicating whether this data filed is composite.
            </summary>
            <value>
            	<c>true</c> if this data field is composite; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.PrimitiveTypeAccessor.IsHierarchical">
            <summary>
            Gets a value indicating whether an object or a collection of objects returned by the field should be added to the grid as children of the current data object
            </summary>
            <value>
            	<c>true</c> if the an object or a collection of objects returned by the field should be added to the grid as children of the current data object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dapfor.Net.Theming.GridRenderer">
            <summary>
            Renders <see cref="T:Dapfor.Net.Ui.Grid"/> UI elements
            </summary>
        </member>
        <member name="M:Dapfor.Net.Theming.GridRenderer.#ctor(Dapfor.Net.Ui.Grid.ThemeAppearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Theming.GridRenderer"/> class.
            </summary>
            <param name="appearance">The appearance.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.GridRenderer.DrawColumnBackground(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.ElementState,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the background.
            </summary>
            <param name="grid">The grid.</param>
            <param name="appearance">The appearance.</param>
            <param name="state">The state.</param>
            <param name="visibleBounds">The visible bounds.</param>
            <param name="virtualBounds">The virtual bounds.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.GridRenderer.DrawRowSelectorBackground(Dapfor.Net.Ui.Grid,Dapfor.Net.Ui.Appearance,Dapfor.Net.Ui.ElementState,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the row selector background.
            </summary>
            <param name="grid">The grid.</param>
            <param name="appearance">The appearance.</param>
            <param name="state">The state.</param>
            <param name="bounds">The bounds.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.GridRenderer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapfor.Net.Theming.GridRenderer.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="T:Dapfor.Net.Data.HierarchicalDataAccessor">
            <summary>
            Provides an access to data containing hierarchical fields
            </summary>
            <remarks><para>Data objects containing <see cref="T:Dapfor.Net.Data.HierarchicalFieldAttribute">hierarchical fields</see> allows the grid to build a hierarchy:
            <example>
            <code>
            public class Strategy
            {
                ...
            
                [HierarchicalField]
                public IList&lt;Order&gt; Orders
                {
                    get { return _orders; }
                }
            
                ...
            }
            
            </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.HierarchicalDataAccessor.#ctor(Dapfor.Net.Data.IDataAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.HierarchicalDataAccessor"/> class.
            </summary>
            <param name="baseAccessor">The base accessor.</param>
        </member>
        <member name="M:Dapfor.Net.Data.HierarchicalDataAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.HierarchicalDataAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.HierarchicalDataAccessor.Dapfor#Net#Data#IDataAccessor#Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.HierarchicalDataAccessor.Dapfor#Net#Data#IDataAccessor#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.HierarchicalDataAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether this accessor supports field indexing by the string identifiers.
            </summary>
            <value>
            	<c>true</c> if this accessor supports <see cref="T:Dapfor.Net.Data.IDataField"/> indexing by string identifiers; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:Dapfor.Net.Data.IDataField.Id"/>
        </member>
        <member name="P:Dapfor.Net.Data.HierarchicalDataAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value><c>true</c> if they fire notifications; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.HierarchicalDataAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.HierarchicalDataAccessor.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>The underlying data object.</value>
        </member>
        <member name="E:Dapfor.Net.Data.HierarchicalDataAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.HierarchicalDataAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="F:Dapfor.Net.Internal.a_a.IllegalLicenseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.a_a.IllegalLicenseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dapfor.Net.Internal.a_a.IllegalLicenseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Internal.RowContainer">
            <summary>
            Summary description for RowContainer.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.RowContainer.DisplacedRowComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="M:Dapfor.Net.Internal.RowContainer.RowComparer.#ctor(Dapfor.Net.Internal.RowContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Internal.RowContainer.RowComparer"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Dapfor.Net.Internal.RowContainer.RowComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one
            is less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>
            	<list type="table">
            		<listheader>
            			<term>Value</term><description>Condition</description>
            		</listheader>
            		<item>
            			<term> Less than zero</term><description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            		</item>
            		<item>
            			<term> Zero</term><description><paramref name="x"/> equals <paramref name="y"/>.</description>
            		</item>
            		<item>
            			<term> Greater than zero</term><description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            		</item>
            	</list>
            </returns>
            <exception cref="T:System.ArgumentException"><para>Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.</para><para>-or-</para><para><paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other.</para></exception>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintHelper">
            <summary>
            Provides various useful functions for painting operations
            </summary>
            <example>
            <code>
            public void CellCustomDraw(Grid grid)
            {
                //Demonstrates, how to custom draw in cell. 
                //The delegate is called while the cell's painting
                grid.PaintCell += delegate(object sender, PaintCellEventArgs e)
                {
                    //Draw a button in the cell's bounds. 
                    Color startColor = Color.LightGray;
                    Color endColor = Color.LightSlateGray;
            
                    //Take into account, that the row can be selected.
                    if (e.Cell.Row != null &amp;&amp; e.Cell.Row.Selected)
                    {
                        startColor = PaintHelper.AlphaBlend(startColor, grid.Selection.Color);
                        endColor = PaintHelper.AlphaBlend(endColor, grid.Selection.Color);
                    }
            
                    //Draw the background
                    Appearance appearance = new Appearance(SystemColors.GrayText, startColor, true, endColor, GradientDirection.Vertical);
                    e.Render.DrawCaption(appearance, ElementState.Normal, e.Cell.VirtualBounds, BorderSide.All, e.Graphics);
            
                    //Prevent from background erasing
                    e.Parts &amp;= e.Parts ^ (PaintPart.Background | PaintPart.Borders);
            
                    //Set a new text color
                    e.Appearance.ForeColor = Color.Yellow;
            
                    //Do default painting without the text drawing
                    e.PaintAll();
                };
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.ContentToStringAlignment(System.Nullable{System.Drawing.ContentAlignment},System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Drawing.ContentAlignment"/> to the horizontal <see cref="T:System.Drawing.StringAlignment"/> (to be passed into the <see cref="P:System.Drawing.StringFormat.Alignment"/> property of the <see cref="T:System.Drawing.StringFormat"/> object).
            </summary>
            <param name="alignment">The <see cref="T:System.Drawing.ContentAlignment"/>.</param>
            <param name="rtl">if set to <c>true</c> right-to-left layout is used.</param>
            <returns>
            The <see cref="T:System.Drawing.StringAlignment"/>. If the alignment is <c>null</c>, then the <see cref="F:System.Drawing.StringAlignment.Center"/> value is returned.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.ContentToStringLineAlignment(System.Nullable{System.Drawing.ContentAlignment})">
            <summary>
            Converts the <see cref="T:System.Drawing.ContentAlignment"/> to the vertical <see cref="T:System.Drawing.StringAlignment"/> (to be passed into the <see cref="P:System.Drawing.StringFormat.LineAlignment"/> property of the <see cref="T:System.Drawing.StringFormat"/> object).
            </summary>
            <param name="alignment">The <see cref="T:System.Drawing.ContentAlignment"/>.</param>
            <returns>The <see cref="T:System.Drawing.StringAlignment"/>. If the alignment is <c>null</c>, then the <see cref="F:System.Drawing.StringAlignment.Center"/> value is returned.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.AlphaBlend(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Blends two colors.
            </summary>
            <param name="sourceColor">The source color.</param>
            <param name="alphaColor">The color which is blended with the source color. The intensity of blending is specified by the alpha-channel of the <c>alphaColor</c></param>
            <returns>The resulting <see cref="T:System.Drawing.Color"/>. The alpha channel of the returning <see cref="T:System.Drawing.Color"/> will be identical to alpha-channel of the <c>sourceColor</c></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.AlphaBlend(Dapfor.Net.Ui.Appearance,System.Drawing.Color)">
            <summary>
            Blends appearance background colors with alphaColor.
            </summary>
            <param name="appearance">The appearance.</param>
            <param name="alphaColor">The color which is blended with the appearance. The intensity of blending is specified by the alpha-channel of the <c>alphaColor</c></param>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.HierarchicalIndent(Dapfor.Net.Ui.Grid,System.Int32)">
            <summary>
            Measures the hierarchical indent (amount of space needed to show the row selector, hierarchical lines and expand/collapse buttons) on the left of <see cref="T:Dapfor.Net.Ui.Row"/>s on the specified hierarchical level.
            </summary>
            <param name="grid">The <see cref="T:Dapfor.Net.Ui.Grid"/>.</param>
            <param name="level">The zero-based hierarchical level.</param>
            <returns>Indent in pixels</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.ImageMetrics(Dapfor.Net.Ui.ImageSettings,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Drawing.Point@)">
            <summary>
            Measures size and location, needed to show the image in the rectangle with specified settings.
            </summary>
            <param name="settings">The <see cref="T:Dapfor.Net.Ui.ImageSettings"/>.</param>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to be shown in the rectangle.</param>
            <param name="bounds">The bounds where the image is to be shown.</param>
            <param name="rtl">Indicates right to left layout.</param>
            <param name="location">Indicates the top-left corner of the image.</param>
            <returns>The size of the image</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.MeasureHeaderCaptionTextBounds(Dapfor.Net.Ui.ImageSettings,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Measures the <see cref="T:Dapfor.Net.Ui.Column"/>'s bounds, remaining to show the text.
            </summary>
            <param name="imageSettings">The image settings.</param>
            <param name="image">The image to be displayed in the <see cref="T:Dapfor.Net.Ui.Column"/>.</param>
            <param name="rect">The <see cref="T:Dapfor.Net.Ui.Column"/>'s caption bounds.</param>
            <param name="rtl">if set to <c>true</c> right-to-left layout is used.</param>
            <returns>
            The bounds to display the <see cref="T:Dapfor.Net.Ui.Column"/>'s text.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.MeasureHeaderCaptionIconBounds(System.Drawing.Image,System.Drawing.Rectangle,Dapfor.Net.Ui.ImageSettings)">
            <summary>
            Measures the bounds, needed to show the <see cref="T:System.Drawing.Image"/> in the <see cref="T:Dapfor.Net.Ui.Column"/> with specified <see cref="T:Dapfor.Net.Ui.ImageSettings"/>.
            </summary>
            <param name="image">The image to be displayed in the <see cref="T:Dapfor.Net.Ui.Column"/>.</param>
            <param name="bounds">The <see cref="T:Dapfor.Net.Ui.Column"/>'s caption bounds.</param>
            <param name="imageSettings">The image settings.</param>
            <returns>The bounds, nested to display the <see cref="T:System.Drawing.Image"/> in the <see cref="T:Dapfor.Net.Ui.Column"/>.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.TextAlignment(System.Drawing.ContentAlignment)">
            <summary>
            Converts <see cref="T:System.Drawing.ContentAlignment"/> to <see cref="T:System.Windows.Forms.HorizontalAlignment"/>.
            </summary>
            <param name="alignment">The <see cref="T:System.Drawing.ContentAlignment"/>.</param>
            <returns>The <see cref="T:System.Windows.Forms.HorizontalAlignment"/></returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.AutoAlignment(System.Type)">
            <summary>
            Gets a default <see cref="T:System.Drawing.ContentAlignment"/> for various data types.
            </summary>
            <param name="type">The data type.</param>
            <returns>The <see cref="T:System.Drawing.ContentAlignment"/> which corresponds to the specified type.</returns>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintHelper.AutoAlignment(System.Nullable{System.Drawing.ContentAlignment},Dapfor.Net.Data.IDataField)">
            <summary>
            Gets a default <see cref="T:System.Drawing.ContentAlignment"/> for the specified <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <param name="alignment">The default alignment, specified in the <see cref="T:Dapfor.Net.Ui.Column"/>.</param>
            <param name="field">The data field.</param>
            <returns>
            The <see cref="T:System.Drawing.ContentAlignment"/> which corresponds to the specified <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </returns>
        </member>
        <member name="T:Dapfor.Net.Data.EnumerableDataAccessor">
             <summary>
             Wraps enumerable objects.
             </summary>
             <remarks>Objects of <see cref="T:System.Collections.IEnumerable"/> type can be added to grid via <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)">Grid.Rows.Add(object)</see> method:
             <code>
             public void AddEnumerableCollection(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Column 1"));
                 grid.Headers[0].Add(new Column("Column 2"));
                 grid.Headers[0].Add(new Column("Column 3"));
            
                 string[] collection = new string[] { "cell 11", "cell 12", "cell 13" };
            
                 //The collection implements IList interface and is wrapped by the ListDataAccessor
                 grid.Rows.Add(collection);
            
                 //The collection implements IList interface and is wrapped explicitly by the ListDataAccessor
                 grid.Rows.Add(new ListDataAccessor(collection));
            
                 //The next code adds the same collection to the grid, but wrapped by the EnumerableDataAccessor
                 grid.Rows.Add(new EnumerableDataAccessor(collection));
             }
             </code>
            </remarks>
             <seealso cref="T:Dapfor.Net.Data.ListDataAccessor"/>
        </member>
        <member name="M:Dapfor.Net.Data.EnumerableDataAccessor.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.EnumerableDataAccessor"/> class.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Dapfor.Net.Data.EnumerableDataAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.EnumerableDataAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.EnumerableDataAccessor.Item(System.String)">
            <summary>
            The dictionary can not be referenced by field identifiers. Any call of this method will lead to <see cref="T:System.NotSupportedException"/>
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.EnumerableDataAccessor.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.EnumerableDataAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether the access to the fields of the data object by their field identifier is available.
            </summary>
            <value>Always <c>false</c>. </value>
        </member>
        <member name="P:Dapfor.Net.Data.EnumerableDataAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value>Always <c>false</c>. </value>
        </member>
        <member name="P:Dapfor.Net.Data.EnumerableDataAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.EnumerableDataAccessor.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>The underlying data object.</value>
        </member>
        <member name="P:Dapfor.Net.Data.EnumerableDataAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="E:Dapfor.Net.Data.EnumerableDataAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Data.NamespaceDoc">
             <summary>
              Set of classes representing business data layer.
             </summary>
             <remarks>
             <para>.Net Grid is able to manipulate various data types, including user defined classes, string arrays or other objects, <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IDictionary`2"/>, 
             where K is a string identifier or some other type. As you remember, all this broad range of data can be inserted into the .Net Grid through the <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)">Grid.Rows.Add(object)</see> / 
             <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)">Row.Add(object)</see>. Besides that, the grid can be connected to a data source that implements <see cref="T:System.Collections.IList"/>, <see cref="T:System.ComponentModel.IListSource"/> or <see cref="T:System.ComponentModel.IBindingList"/> interfaces.
             </para>
             <para>Such broad functionality of the .Net Grid is possible due to the IDataAccessor interface that is one of the most crucial part of the grid. The main purpose of 
             this interface is to normalize presentation of different data types in the grid. There are lots of implementations of <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface. This way, 
             a programmer can add his own implementation to broaden the list of data types that can be used by the .Net Grid. When you call <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)">Grid.Rows.Add(object 'your object')</see>, an implementation of the 
             <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface is created implicitly for 'your object' and the .Net Grid works with it only via the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> proxy, making no 
             difference between the data types.</para>
             <para>Intrinsically, IDataAccessor interface is nothing more than a simple 'container' for data object fields (<see cref="T:Dapfor.Net.Data.IDataField"/> object), that should be displayed 
             in a grid cell. Each field contains an identifier, a name, a description, information about formats and editors, and it can be used to get values from a data object 
             or to set values. Please note, that for different objects the process of getting or setting values of a data object may vary. For user-defined classes you can use 
             the reflection mechanism to get or set values. For <see cref="T:System.Collections.Generic.IList`1"/> the grid gets them with a certain index; for <see cref="T:System.Collections.Generic.IDictionary`2">IDictionary&lt;string, object&gt;</see>  
             with a string key so on. <see cref="T:Dapfor.Net.Data.IDataAccessor"/> may support or not support data field identifiers it merely depends on its nature. If an object of user defined 
             class is inserted into the grid, than its property name become the identifiers in the IDataAccessor by default. However, sometimes identifiers may be absent, e.g. 
             if you you use an <see cref="T:System.Collections.Generic.IList`1"/> object as a parameter of the method <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)">Grid.Rows.Add(object 'your object')</see>. In such case, 
             to display data in cells the .Net Grid uses indices of <see cref="T:System.Collections.Generic.IList`1"/> and index of the column which is calculated when it is inserted into the header.</para>
             <para><see cref="T:Dapfor.Net.Data.IDataAccessor"/> is able to subscribe to events of data objects implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface and transfer them into the grid. 
             This approach is widely used in the event-driven model. Please note, that all implementations of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface in the 
             Dapfor's package are thread-safe!</para>
             <code>
              public void DataLevelAbstraction(Grid grid)
             {
                 //Initialize the header
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Quantity"));
            
                 //Add a data object to the grid. The object is implicitly wrapped by the DataObjectAccessor
                 Product product = new Product();
                 grid.Rows.Add(new Product());
            
                 //Add a data object which is explicitly wrapped by the DataObjectAccessor to the grid. 
                 grid.Rows.Add(new DataObjectAccessor(new Product()));
            
                 //Add a collection of values to the grid. 
                 //Because of this collection implements IList, it will be implicitly wrapped by the ListDataAccessor
                 grid.Rows.Add(new double[] {123, 12, 45});
            
                 //Add a dictionary of values to the grid. 
                 Hashtable hashTable = new Hashtable();
                 hashTable.Add("Price", 10);
                 grid.Rows.Add(hashTable);
            
                 //Add an empty row to the grid
                 Row row = grid.Rows.Add(new UnboundValueAccessor());
                 
                 //Set some values for this row
                 row["Price"].Value = 10;
            
                 //Build some hierarchy for the already added row
                 row.Add(new int[] {10, 11, 12});
            
            
                 //Now we will update the product. The property of Product fires the notification 
                 //and the grid will automatically refresh the cell, scroll and filter corresponding row if needed.
                 product.Price = 98.6;
            
                 //Update the product in other thread - this is safe. The grid will synchronize threads without blocking the calling thread
                 //and refresh, sort and filter the corresponding row.
                 ThreadPool.QueueUserWorkItem(delegate
                 {
                     product.Price = 102.7;
                 });
             }
             </code>
             </remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.ToolStripGridColumn">
             <summary>
             Represents a column visibility option displayed on a Grid.HeaderContextMenu
             </summary>
             <code>
             grid.HeaderContextMenu.ItemClicked += delegate(object sender, ToolStripItemClickedEventArgs e)
             {
                 ToolStripGridColumn item = e.ClickedItem as ToolStripGridColumn;
                 Column columnItem = item != null ? item.Column : null;
            
                 //Do something...
             };
             </code>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolStripGridColumn.#ctor(Dapfor.Net.Ui.Column)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ToolStripGridColumn"/> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolStripGridColumn.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.ToolStripItem.Click"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolStripGridColumn.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="T:Dapfor.Net.Formats.StringFormat">
            <summary>
            Formats values using standard string patters. 
            </summary>
            <remarks>
            <para>A very important feature in .Net Grid is its ability to work directly with application business logic. Business logic is a set of classes that may 
            have certain properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling 
            <see cref="M:System.Object.ToString">Object.ToString()</see> or <see cref="M:System.String.Format(System.String,System.Object[])">String.Format("{0}", value)</see>. However, this approach 
            is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to convert 
            values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a value 
            equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. For application programming 
            it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc.</item>
            <item>In a column: <see cref="P:Dapfor.Net.Ui.Column.Format">Column.Format</see> = 'your format';</item>
            <item>Directly in a cell (this method requires a lot of memory): <see cref="P:Dapfor.Net.Ui.Cell.Format">Cell.Format</see> = 'your format';</item>
            </list>
            </para>
            <para>Some formats greatly simplify application development. For example, StringFormat enables use of standard patterns for formatting values through <see cref="M:System.String.Format(System.String,System.Object[])">String.Format()</see>: 
            <code>
            column.Format = new StringFormat("### ### ### ###", string.Empty, " $");
            The value 12345 is displayed as "12 345 $"
            </code>
            </para>
            <para>The following example demonstrates how to declare StringFormat via <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>:
            <code>
            public class Product
            {
                private DateTime maturity;
                
                [Format("yyyy-MM-dd")]
                public DateTime Maturity
                {
                    get { return maturity; }
                }
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.#ctor(Dapfor.Net.Formats.StringFormat)">
            <summary>
            Copy constructor. Copies all fields from the original format.
            </summary>
            <param name="originalFormat">The original format.</param>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.#ctor(System.IFormatProvider)">
             <summary>
             Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.StringFormat"/> class.
             </summary>
             <param name="formatProvider">The format provider.</param>
             <example>
             <code>
             public void StringFormat()
             {
                 IFormat format = new StringFormat(CultureInfo.InvariantCulture);
            
                 UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                 accessor["Date"].Value = new DateTime(2009, 10, 02);
                 Console.WriteLine(format.Format(accessor["Date"]));
             }
             
             //Console output:
             10/02/2009 00:00:00
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.StringFormat"/> class.
             </summary>
             <param name="formatString">The string format, passed to the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See MSDN library for more details.</param>
             <example>
             <code>
             public void StringFormat()
             {
                 IFormat format = new StringFormat("yyyy-MM-dd");
            
                 UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                 accessor["Date"].Value = new DateTime(2009, 10, 02);
                 Console.WriteLine(format.Format(accessor["Date"]));
             }
             
             //Console output:
             2009-10-02
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.#ctor(System.String,System.IFormatProvider)">
             <summary>
             Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.StringFormat"/> class.
             </summary>
             <param name="formatString">The string format, passed to the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See MSDN library for more details.</param>
             <param name="formatProvider">The formatString provider.</param>
             <example>
             <code>
             public void StringFormat()
             {
                 IFormat format = new StringFormat("yyyy-MM-dd", CultureInfo.InvariantCulture);
            
                 UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                 accessor["Date"].Value = new DateTime(2009, 10, 02);
                 Console.WriteLine(format.Format(accessor["Date"]));
             }
             
             //Console output:
             2009-10-02
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.#ctor(System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.StringFormat"/> class.
             </summary>
             <param name="formatString">The string format, passed to the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See MSDN library for more details.</param>
             <param name="prefix">The prefix that is added before the formatted string.</param>
             <param name="suffix">The suffix that is added after the formatted string.</param>
             <example>
             <code>
             public void StringFormat()
             {
                 IFormat format = new StringFormat("yyyy-MM-dd", "***", "!!!");
            
                 UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                 accessor["Date"].Value = new DateTime(2009, 10, 02);
                 Console.WriteLine(format.Format(accessor["Date"]));
             }
             
             //Console output:
             ***2009-10-02!!!
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.#ctor(System.String,System.String,System.String,System.IFormatProvider)">
             <summary>
             Initializes a new instance of the <see cref="T:Dapfor.Net.Formats.StringFormat"/> class.
             </summary>
             <param name="formatString">The string format, passed to the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See MSDN library for more details.</param>
             <param name="prefix">The prefix that is added before the formatted string.</param>
             <param name="suffix">The suffix that is added after the formatted string.</param>
             <param name="formatProvider">The formatString provider.</param>
             <example>
             <code>
             public void StringFormat()
             {
                 IFormat format = new StringFormat("yyyy-MM-dd", "***", "!!!", CultureInfo.InvariantCulture);
            
                 UnboundValueAccessor accessor = new UnboundValueAccessor();
            
                 accessor["Date"].Value = new DateTime(2009, 10, 02);
                 Console.WriteLine(format.Format(accessor["Date"]));
             }
             
             //Console output:
             ***2009-10-02!!!
             </code>
             </example>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.Format(Dapfor.Net.Data.IDataField)">
            <summary>
            Formats the specified value of the specified data object.
            </summary>
            <param name="dataField">The data field.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.CanParse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Indicates whether the format can parse the specified text to a unformatted value.
            </summary>
            <param name="text">The text.</param>
            <param name="dataField">The data field.</param>
            <returns>Always <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.Parse(System.String,Dapfor.Net.Data.IDataField)">
            <summary>
            Does nothing.
            </summary>
            <param name="text">The text to be parsed.</param>
            <param name="dataField">The data field.</param>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.Equals(Dapfor.Net.Formats.StringFormat)">
            <summary>
            Determines whether the specified <see cref="T:Dapfor.Net.Formats.StringFormat"/> is equal to the current <see cref="T:Dapfor.Net.Formats.StringFormat"/>.
            </summary>
            <param name="format">The format.</param>
            <returns>
            true if the specified <see cref="T:Dapfor.Net.Formats.StringFormat"/> is equal to the current <see cref="T:Dapfor.Net.Formats.StringFormat"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Formats.StringFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Formats.StringFormat.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.StringFormat.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.StringFormat.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
            <value>The suffix.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.StringFormat.FormatProvider">
            <summary>
            Gets or sets the format provider.
            </summary>
            <value>The format provider.</value>
        </member>
        <member name="P:Dapfor.Net.Formats.StringFormat.DefaultCulture">
            <summary>
            Gets or sets the default culture for all instances of the <see cref="T:Dapfor.Net.Formats.StringFormat"/> class.
            </summary>
            <value>The default culture.</value>
            <example>This example demonstrates how to set invariant culture as a default format provider for all
            instances of <see cref="T:Dapfor.Net.Formats.StringFormat"/> class.
            <code>
            StringFormat.DefaultCulture = CultureInfo.InvariantCulture;
            </code>
            </example>
        </member>
        <member name="T:Dapfor.Net.Internal.RowItem">
            <summary>
            Summary description for RowItem.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Internal.RowItem.#ctor(Dapfor.Net.Internal.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Internal.RowItem"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:Dapfor.Net.Data.ListDataAccessor">
             <summary>
             Wraps <see cref="T:System.Collections.IList"/> objects. 
             </summary>
             <remarks>
             This class enables to insert <see cref="T:System.Collections.IList"/> objects via <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Collections.IList)">Grid.Rows.Add(IList)</see> method.
             <code>
             public void AddEnumerableCollection(Grid grid)
             {
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("Column 1"));
                 grid.Headers[0].Add(new Column("Column 2"));
                 grid.Headers[0].Add(new Column("Column 3"));
            
                 string[] collection = new string[] { "cell 11", "cell 12", "cell 13" };
            
                 //The collection implements IList interface and is wrapped by the ListDataAccessor
                 grid.Rows.Add(collection);
            
                 //The collection implements IList interface and is wrapped explicitly by the ListDataAccessor
                 grid.Rows.Add(new ListDataAccessor(collection));
            
                 //The next code adds the same collection to the grid, but wrapped by the EnumerableDataAccessor
                 grid.Rows.Add(new EnumerableDataAccessor(collection));
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.ListDataAccessor.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.ListDataAccessor"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Dapfor.Net.Data.ListDataAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.ListDataAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.ListDataAccessor.FireFieldChanged(Dapfor.Net.Data.IDataField)">
            <summary>
            Fires the field changed.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:Dapfor.Net.Data.ListDataAccessor.Item(System.String)">
            <summary>
            The IList can not be referenced by the field identifier. Any call of this method will lead to <see cref="T:System.NotSupportedException"/>
            </summary>
            <value></value>
            <exception cref="T:System.NotSupportedException">Raised at any call</exception>
        </member>
        <member name="P:Dapfor.Net.Data.ListDataAccessor.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.ListDataAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether the access to the fields of the data object by their field identifier is available.
            </summary>
            <value>
            	Always <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.ListDataAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.ListDataAccessor.DataObject">
            <summary>
            Gets the underlying <see cref="T:System.Collections.IList"/> object.
            </summary>
            <value>The underlying <see cref="T:System.Collections.IList"/> object.</value>
        </member>
        <member name="P:Dapfor.Net.Data.ListDataAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="E:Dapfor.Net.Data.ListDataAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.ListDataAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value> Always <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintColumnCaptionEventArgs">
            <summary>
            Provides data and methods for painting <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/> caption on the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Header"/>
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Grid"/>, <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Header"/>, <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Graphics"/> object, or do it vice versa!</para>
            
            
            <para>The following example shows how customize painting in column</para>
            <code>
            public void InitializeGrid(Grid grid)
            {
                Bitmap image = new Bitmap("image.ico");
            
                //Subscribe for column painting event
                grid.PaintColumnCaption += delegate(object sender, PaintColumnCaptionEventArgs e)
                {
                    using (Brush brush = new SolidBrush(Color.DeepPink))
                    {
                        //Prevent from text painting
                        e.Parts &amp;= e.Parts ^ PaintPart.Text;
            
                        //Another way to paint the custom text (do not turn off the PaintPart.Text):
                        e.Text = "New text to show in column";
            
                        //Set a new background color
                        e.Appearance.BackColor = Color.Yellow;
            
                        //Do default painting
                        e.PaintAll();
                        e.Handled = true;
            
                        //Draw a custom image above already pained cell
                        e.Graphics.DrawImage(image, e.VirtualBounds);
                    }
                };
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/>. The <see cref="T:Dapfor.Net.Ui.PaintPart"/> is used as a filter which defines which UI elements are to be painted.
            You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Grid"/> from default painting by setting 
            the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Handled"/> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintFilter">
            <summary>
            Atomic operation to paint the filter icon if any. The method <see cref="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Filter"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintBackground">
            <summary>
            Atomic operation to paint the background. The method <see cref="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Background"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintSortIcon">
            <summary>
            Atomic operation to paint the sort icon. The method <see cref="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.SortIcon"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintImage">
            <summary>
            Atomic operation to paint the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Image"/> if any. The method <see cref="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Image"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintText">
            <summary>
            Atomic operation to paint the text in the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/>. The method <see cref="M:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.PaintAll"/> does not call this method if the <see cref="F:Dapfor.Net.Ui.PaintPart.Text"/> flag in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> property is dropped.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Header">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Header"/>.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/>.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.TextSettings">
            <summary>
            Gets the text settings (padding, text orientation, wrapping, trimming, etc...).
            </summary>
            <value>The text settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Appearance">
            <summary>
            Gets the appearance of the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/> (Colors, gradient...).
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.ImageSettings">
            <summary>
            Gets the image settings (padding, alignment, stretching...).
            </summary>
            <value>The image settings.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.VirtualBounds">
            <summary>
            Gets the virtual bounds of the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/>.
            </summary>
            <value>The virtual bounds.</value>
            <remarks>If the end user scrolls columns, some part of the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/> can became invisible. This property returns the full bounds of the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/> even 
            it is partially visible. </remarks>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.VisibleBounds">
            <summary>
            Gets the visible bounds of the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/>.
            </summary>
            <value>The visible bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Text">
            <summary>
            Gets a text to be painted in <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/>.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Image">
            <summary>
            Gets an <see cref="T:System.Drawing.Image"/> to be painted in <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Column"/>.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> to draw the text.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Parts">
            <summary>
            Gets or sets the parts of header's caption that are to be painted. 
            </summary>
            <value>The parts.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Render">
            <summary>
            Gets or sets the render that performs basic painting operations
            </summary>
            <value>The render.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintColumnCaptionEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.HitTestInfo">
            <summary>
            Functional element of grid.
            </summary>
            <remarks>
            The grid has a convenient system of getting elements by their location inside the grid. This is done with <see cref="M:Dapfor.Net.Ui.Grid.HitTest(System.Drawing.Point)">Grid.HitTest()</see> 
            method that returns type of element in specified position. To get the element itself you can use one of <see cref="P:Dapfor.Net.Ui.Grid.HitTests">Grid.HitTests</see> methods 
            that return element pointers. We tried to create an API to avoid unnecessary type casting. An example of its use is provided below. 
            <code>
            public void HitTestExample(Grid grid)
            {
                //Get the current cursor position
                Point position = System.Windows.Forms.Cursor.Position;
            
                //Get position in the client coordinates
                position = grid.PointToClient(position);
            
                //Get a part of the grid, the cursor points to.
                HitTestInfo info = grid.HitTest(position);
            
                //Try get a header, the cursor points to.
                Header header = grid.HitTests.HeaderTest(position);
            
                //Try get a row, the cursor points to.
                Row row = grid.HitTests.RowTest(position);
            
                //Try get a cell, the cursor points to.
                Cell cell = grid.HitTests.CellTest(position);
            
                //Try get a column, the cursor points to.
                Column column = grid.HitTests.ColumnTest(position);
            
                //Do something...
            }
            </code>
            </remarks> 
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.OutsideGrid">
            <summary>
            The element is outside of the client area of <see cref="T:Dapfor.Net.Ui.Grid"/>
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.Cell">
            <summary>
            The <see cref="F:Dapfor.Net.Ui.HitTestInfo.Cell"/>
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.RowSelector">
            <summary>
            The row selector
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.RowSeparator">
            <summary>
            Separator between two row selectors
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.RowHierarchicalIndent">
            <summary>
            Space between row selector and first cell
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.RowEmptyRight">
            <summary>
            Space after the last cell
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.ExpansionButton">
            <summary>
            Space for expansion (+/-) button
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.EmptyBottom">
            <summary>
            Space below the last row
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.HeaderSelector">
            <summary>
            Space on the left of header
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.HeaderGroupPanel">
            <summary>
            Grouping panel in header
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.HeaderHierarchicalIndent">
            <summary>
            Space between <see cref="F:Dapfor.Net.Ui.HitTestInfo.HeaderSelector"/> and the first column.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.HeaderEmptyRight">
            <summary>
            Space after last column
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.Column">
            <summary>
            A <see cref="F:Dapfor.Net.Ui.HitTestInfo.Column"/>
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.ColumnSeparator">
            <summary>
            Separator between two <see cref="F:Dapfor.Net.Ui.HitTestInfo.Column"/>s
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.CellVerticalSeparator">
            <summary>
            Vertical separator between two <see cref="F:Dapfor.Net.Ui.HitTestInfo.Cell"/>s
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.CellHorizontalSeparator">
            <summary>
            Horizontal separator between two <see cref="F:Dapfor.Net.Ui.HitTestInfo.Cell"/>s
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.GroupRow">
            <summary>
            A group <see cref="T:Dapfor.Net.Ui.Row"/>
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.GroupedColumn">
            <summary>
            A <see cref="F:Dapfor.Net.Ui.HitTestInfo.Column"/> on the group panel
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.ColumnFilterIcon">
            <summary>
            A filter icon in the <see cref="F:Dapfor.Net.Ui.HitTestInfo.Column"/>
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.HitTestInfo.MergedColumn">
            <summary>
            A merged column
            </summary>
        </member>
        <member name="T:Dapfor.Net.Ui.NamespaceDoc">
            <summary>
            Set of UI controls including <see cref="T:Dapfor.Net.Ui.Grid"/> and classes of data presentation layer.
            </summary>
            <remarks>
            <para>Originally the grid was designed for electronic financial markets with their stringent requirements to robustness, low consumption of memory and CPU resources, ergonomic and simple user interface and rich API. These requirements have a common objective - to gain the first place on the market, to improve development time and to keep productive work in the run-time. As the result, we create the most productive and robust hierarchical grid with one of the best object models. It can be used in a great variety of applications (not just for financial markets). It makes software user-friendly, reduces CPU and memory consumption and considerably accelerates development time with multiple services included in the grid and RAD (rapid application development) patterns.</para>
             <para><br/><b>Working modes</b><br/>
            .Net Grid supports various working modes that that enable its use in various types of applicaitons
            <list type="bullet">
            <item>Non-event model supporting insertion of data of different types (user defined classes, IEnumerable&lt;T&gt;, IList&lt;T&gt;, IDictionary&lt;string, object&gt; etc.) into any level of grid hierarchy. The grid provides Grid.Rows.Add(object) and Row.Add(object) methods to work in this mode.</item>
            <item>Event-driven mode is used when a programmer uses objects that implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. We recommend to get acquainted with this mode and use it everywhere. It will enable you to eliminate all dependencies between business logic layer and the <see cref="N:System.Windows.Forms"/>, as well as Dapfor assemblies.</item>
            <item>Data binding mode is used to connect to data sources via <see cref="P:Dapfor.Net.Ui.Grid.DataSource">Grid.DataSource</see>/<see cref="P:Dapfor.Net.Ui.Grid.DataMember">Grid.DataMember</see> properties. Supported data sources: <see cref="T:System.Collections.IList"/>, <see cref="T:System.ComponentModel.IListSource"/>, <see cref="T:System.ComponentModel.IBindingList"/>.</item>
            </list>
            </para>
            <para>
            <para><br/><b>Data types</b><br/>
            Such broad functionality of the .Net Grid is possible due to the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface that is one of the most crucial part of the grid. The main purpose of this interface is to normalize presentation of different data types in the grid. There are lots of implementations of <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface. This way, a programmer can add his own implementation to broaden the list of data types that can be used by the .Net Grid. When you call <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)"/>, an implementation of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> interface is created implicitly for 'your object' and the .Net Grid works with it only via the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> proxy, making no difference between the data types.</para>
            
            <code>
            //Some data object
            public class Product : INotifyPropertyChanged
            {
                //Some fields
                private double price;
                private DateTime maturity;
                
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                    set
                    {
                        price = value;
                        if(PropertyChanged != null)
                        {
                            PropertyChanged(this, new PropertyChangedEventArgs("Price"));
                        }
                    }
                }
                public DateTime Maturity
                {
                    get { return maturity; }
                }
                public event PropertyChangedEventHandler PropertyChanged;
            }
            
            //Using sample
            public void AddDataObjectToGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
                grid.Headers[0].Add(new Column("Maturity"));
                
                //Add data object to the grid. The object will be implicitly wrapped by the DataObjectAccessor class
                Product product = new Product();
                grid.Rows.Add(product);
            
                //Add a collection of values to the grid.
                //Because of this collection implements IList, it will be implicitly wrapped by the ListDataAccessor
                grid.Rows.Add(new double[] {123, 12, 45});
            
                //The object will notify the grid through the INotifyPropertyChanged, and the grid will automatically
                //invalidate, sort, filter and highlight the affected cells.
                product.Price = 12.34;
            }
            </code>
            </para>
            <para><br/><b>Hierarchy</b><br/>
            <para>.Net Grid allows to present data both in tabular format and in hierarchical form. A data hierarchy may have one or more headers. Working with a 
            single header is similar to <see cref="T:System.Windows.Forms.TreeView"/> control with multiple columns (a classic example is file explorer). Multiple headers enable separate column management for 
            each hierarchical level. At a glance, every header consists of two panels: the grouping panel and the columns panel. These panels aren't related to each other. It means 
            that the same column may be present in both panels simultaneously. Each column carries very important information about width, location, visibility, grouping and data sorting</para>
            <para>Data can be added into the data grid via <see cref="M:Dapfor.Net.Ui.RowCollection.Add(System.Object)"/> method call. This method returns object of <see cref="T:Dapfor.Net.Ui.Row"/> type, which contains 
            information about a data object, its location, hierarchy in the data grid, color, etc. To build a hierarchy, it is enough to call the <see cref="M:Dapfor.Net.Ui.Row.Add(System.Object)"/> method, which in turn returns a new <see cref="T:Dapfor.Net.Ui.Row"/> object. 
            This way a programmer can build almost any data hierarchy in the .Net Grid. All headers and rows have their own zero-based hierarchical level that is defined by 
            <see cref="P:Dapfor.Net.Ui.Header.Level"/> and <see cref="P:Dapfor.Net.Ui.Row.Level"/> properties. To display data in every row, .Net Grid takes header of the same level as that row. However, if that 
            level doesn't have a header, the header for the previous hierarchical level is used. In other words, if only one header is present, the grid will behave 
            like Microsoft Windows Explorer.</para>
            <para>When multiple headers are used, those that have level greater than 0 will be displayed in the grid above the first visible row on the same hierarchy level. A header can be hidden/shown via the <see cref="P:Dapfor.Net.Ui.Header.Visible"/> property.</para>
            <code>
            public void PopulateGrid(Grid grid)
            {
                //Add some data objects
                Row product1 = grid.Rows.Add(new Product());
                Row product2 = grid.Rows.Add(new Product());
                
                //Add some customers to the first product
                product1.Add(new Customer());
                product1.Add(new Customer());
                //Add some customers to the another product
                product2.Add(new Customer());
            }
            </code>
            </para>
            
            <para><br/><b>Grouping</b><br/>
            <para>.Net Grid enables multiple data grouping in headers of the .Net Grid by any columns at any hierarchical level. 
            When data is grouped by a specific column, .Net Grid searches all rows within a group that has similar values. 
            When a group is organized, a row that doesn't contain a data object is added to the data grid. The <b>Row.IsGroup</b> property 
            of such row will always return true, and <b>Row["column id"].Value</b> will return a value by which data is grouped. 
            All rows with values that meet grouping conditions are attached to the newly created group. Before a new data object is added, .Net Grid 
            verifies whether there is any group with the required value on the current hierarchical level. If there is no such group, a new group is created. 
            When the <b>Row.Update()</b> method is invoked, the grid checks whether a row conforms to group value. 
            If there are no more rows in the group, the group is removed from the grid.</para>
            
            <para>In programming the grouping feature can be enabled via the <see cref="P:Dapfor.Net.Ui.Column.Grouped">Column.Grouped</see> property. Sequential invocation of this property for several columns results in 
            data grouping of these columns. The column with grouping remains visible unless <see cref="P:Dapfor.Net.Ui.Column.Visible">Column.Visible</see> property is set to false. 
            Sorting (and multiple sorting) can be enabled or disabled for grouped columns because sorting and grouping are completely independent processes. The list of grouped 
            columns can be viewed with <see cref="P:Dapfor.Net.Ui.Header.GroupedColumns">Header.GroupedColumns</see> collection property. A user can also group columns in the data grid. 
            To use this ability the user just needs to drag a column to a special panel on the grid's header. However, this is not possible if height of this panel is set to 0.</para>
            
            <para>Real-time grouping in non event-driven model is done with <see cref="M:Dapfor.Net.Ui.Row.Update"/> method. In the event-driven model <see cref="M:Dapfor.Net.Ui.Row.Update"/> method is 
            called every time when a data object sends a notification. Once again we'd like to emphasize the importance of such model as it removes dependency of the 
            business layer on <see cref="N:System.Windows.Forms"/> controls and on Dapfor assemblies as well.</para>
            </para>
            
            
            <para><br/><b>Formats</b><br/>
            <para>A very important feature in .Net Grid its ability to work directly with application business logic. Business logic is a set of classes that may have certain 
            properties returning specific values, i.g. prices, quantities, dates, etc. Generally these values are represented by primitive types, such as System.Int32, 
            System.Double, System.Decimal etc. To show this data in grid cells, it's sufficient to convert the necessary values into the System.String type by calling <see cref="M:System.Object.ToString"/> or <see cref="M:System.String.Format(System.String,System.Object)"/>. 
            However, this approach is not flexible and doesn't support parsing strings to objects. To fill in for this, the .Net Grid provides a very powerful system of formats to 
            convert values into strings and vice-versa. These formats are fully customizable. For instance, the grid can display empty strings instead of "0" when a 
            value equals 0 or add a separator between thousands or some prefix or suffix like "$". These formats can also parse strings back into values. 
            For application programming it's better to have a set of format classes, where data presentation is centralized.</para>
            <para>In programming, formats can be defined in the following places:
            <list type="bullet">
            <item>As an attribute of a class property. For example: <see cref="T:Dapfor.Net.Formats.FormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.DoubleFormatAttribute"/>, <see cref="T:Dapfor.Net.Formats.EmptyFormatAttribute"/>, etc:
            <code>
            public class Product
            {
                private double price;
            
                [DoubleFormat(Precision = 3, ShortForm = true, ShowZero = false)]
                public double Price
                {
                    get { return price; }
                }
            }
            </code>
            </item>
            <item>In a column: Column.Format = 'your format';</item>
            <item>Directly in a <see cref="T:Dapfor.Net.Ui.Cell"/> (this method requires a lot of memory): Cell.Format = 'your format';</item>
            </list>
            </para>
            <para>The .Net Grid looks for IFofmat object to format values or parse strings in the following order:
            <list type="bullet">
            <item>In a <see cref="T:Dapfor.Net.Ui.Cell"/></item>
            <item>In a <see cref="T:Dapfor.Net.Ui.Column"/> returned by the <see cref="P:Dapfor.Net.Ui.Cell.Column"/> property</item>
            <item>In a <see cref="T:Dapfor.Net.Data.IDataField"/> object, returned by the <see cref="P:Dapfor.Net.Ui.Cell.DataField"/> property.</item>
            <item>If the format is still not found, the grid uses default format for the specified object type.</item>
            </list>
            </para>
            <para>Some formats greatly simplify application development. For example, <see cref="T:Dapfor.Net.Formats.StringFormat"/>, enables use of standard patterns for formatting values through <see cref="M:System.String.Format(System.String,System.Object)"/>:
            <code>
            column.Format = new StringFormat("### ### ### ###", string.Empty, " $");
            //The value 12345 will be displayed in cells as "12 345 $"
            </code>
            </para>
            <para>.NET Framework has similar system of type conversion based on the <see cref="T:System.ComponentModel.TypeConverter"/> class that enables conversion of values to 
            strings and vice versa. This conversion system is more complete, but a little bit cumbersome in the context of formating and data parsing. Althrough converters 
            are bulky, such approach enables development of a business logic independently from data presentation. In a perfect case all these mechanisms can be completely based 
            on Microsoft's component model and therefore have no physical dependencies on libraries of other vendors and on the Dapfor libraries as well.
            <code>
            class SomeClass
            {
                private int intValue;
            
                [TypeConverter(typeof(HexTypeConverter))]
                int SomeHexdecimalValue
                {
                    get { return intValue;  }
                    set { intValue = value; }
                }
            }
            </code>
            </para>
            </para>
            
            <para><br/><b>Editors</b><br/>
            <para>.Net Grid supports multiple ways of cell editing. When we were developing this mechanism, we based it on standard editors used in the <see cref="T:System.Windows.Forms.PropertyGrid"/> control. 
            There are several types of these editors including controls that can be displayed in a dropdown box or as a modal dialog. Such editors enable users to edit text, 
            colors and enumerations and to perform painting in small rectangles inside cells. There are plenty of predefined editors. For example, you can get the color editor as follows:
            <code>
            UITypeEditor editor = (UITypeEditor)TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor));
            </code>
            </para>
            <para>To edit values, these editors use the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. Within this method a mandatory control is created and 
            placed in the dropdown box. You should note a very important detail the return from the function <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> occurs 
            only when editing within in the control is completed, which is convenient from the programmer's point of view. Look at this example: 
            <code>
            object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
            {
                IWindowsFormsEditorService service = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
                using (SomeControl control = new SomeControl(value))
                {
                    service.DropDownControl(control);
                    value = control.NewValue;
                }
                return value;
            }
            </code>
            </para>
            <para>The .Net Grid fully supports this mechanism and editors of other vendors that can be used in your applications.</para>
            <para>Despite the convenience of this interface, we have concluded that it lacks some functionality. These editors can't be created above the edited cell with its size 
            (for example, slider control). Besides that, they can't be painted in the whole cell just in a small rectangular area. To remediate this, 
            we have created <see cref="T:Dapfor.Net.Editors.UITypeEditorEx"/> a class, derived from <see cref="T:System.Drawing.Design.UITypeEditor"/> that allows to create controls directly above a cell. 
            The process of editing is quite similar to the aforementioned code example: 
            <code>
            StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
            {
                using (SomeControl control = new SomeControl(cell))
                {
                    return service.CellEditControl(control, cell.VirtualBounds, reason);
                }
            }
            </code>
            </para>
            <para>Besides, some editors can be used without creating graphic controls, i.e. a rating editor. It simply draws stars, and when the user clicks on a certain star, this control calculates its relative location and sets a new value. The whole editing code will look as follows:
            <code>
            StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
            {    
                //compute a new rating
                cell.Value = rating ;
                return StopEditReason.UserStop ;
            }
            </code>
            </para>
            </para>
            
            <para><br/><b>Real-time sorting</b><br/>
            <para>.Net Grid enables multiple row sorting upon data changes in real-time, taking into account sorting direction, grouping rules and data hierarchy.</para>
            <para>On programming side it can be done via <see cref="P:Dapfor.Net.Ui.Column.SortDirection"/> property. This property sets the sorting direction or turns it off. 
            When you sequentially set this property for several columns, you enable multiple sorting in the data grid. Every column that is involved in the sorting 
            has its own zero-based level. Information about all sorted columns can be retrieved via <see cref="P:Dapfor.Net.Ui.Header.SortedColumns"/> property. It's important to mention that column 
            visibility doesn't affect data sorting. It means that rows will be sorted without regard to column visibility or to whether column is grouped or not.</para>
            <para>Without sorting, all grid rows are automatically indexed thereby increasing grid performance. When sorting is used for some columns, all data is sorted in ordered 
            sequence according to sorting rules and data hierarchy. This way, when you add new data into the data grid, it is automatically added to the right 
            position according to the above rules. When you call <see cref="M:Dapfor.Net.Ui.Row.Update"/> method, the .Net Grid searches a new position for the row and moves it to the right 
            position. When you use an event-driven model (i.e. when you use the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface implementation), <see cref="M:Dapfor.Net.Ui.Row.Update"/> 
            method is invoked systematically. In other words, when sorting is enabled, the .Net Grid constantly stores data in ordered sequence. In addition to 
            that, the .Net Grid properly processes data changes in several rows including processing of separate threads. You won't find some kind of Sort() method in 
            the .Net Grid, because the data is always in the ordered sequence.</para>
            </para>
            
            <para><br/><b>Real-time data filtration</b><br/>
            <para>Simply put, data filtration is managing visibility of rows in the grid. Row invisibility in the grid means that the row is still in the grid, but it is invisible 
            together with its children. It's important to say that this row can be accessed only via <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/>/<see cref="P:Dapfor.Net.Ui.Row.Children"/> collection properties. 
            In the <see cref="P:Dapfor.Net.Ui.Grid.Rows"/> property invisible rows are absent, as it shows only visible rows. Filtration is particularly important when data is grouped. 
            If there are no visible rows, the whole group becomes invisible (but is not removed!). If a filtered row should be made visible again, it takes 
            certain position according to the sorting rules if any.</para>
            <para>.Net Grid presents 3 ways of data filtration: 
            <list type="bullet">
            <item>Setting boolean in the <see cref="P:Dapfor.Net.Ui.Row.Filtered"/> property</item>
            <item>Implementing the <see cref="T:Dapfor.Net.Ui.IFilter"/> interface and setting it with the <see cref="P:Dapfor.Net.Ui.Grid.Filter"/> property</item>
            <item>Filters in columns</item>
            </list>
            </para>
            <para>The first way is the easiest to use, however, we recommend you to favor the second one that provides definite advantages.</para>
            <para>The <see cref="T:Dapfor.Net.Ui.IFilter"/> interface has only one property <see cref="M:Dapfor.Net.Ui.IFilter.IsFiltered(Dapfor.Net.Ui.Row)"/>. This method is invoked when data is inserted into the data grid. 
            It is also invoked every time <see cref="M:Dapfor.Net.Ui.Row.Update"/> and <see cref="M:Dapfor.Net.Ui.Grid.FilterRefresh"/> methods are called. Therefore, grid rows always meed the filtration criteria. 
            However, when <see cref="T:Dapfor.Net.Ui.IFilter"/> interface is not implemented, the invocation of <see cref="M:Dapfor.Net.Ui.Row.Update"/> doesn't result in data filtration and newly added data is 
            always visible in the grid until the <see cref="P:Dapfor.Net.Ui.Row.Filtered"/> call. Besides, when filtering conditions are changed, invocation of <see cref="M:Dapfor.Net.Ui.Grid.FilterRefresh"/> 
            doesn't make the row visible the programmer should iterate through every row in the data grid via <see cref="P:Dapfor.Net.Ui.Grid.Nodes"/> and <see cref="P:Dapfor.Net.Ui.Row.Children"/> collections 
            to verify new conditions. There is an important thing to add regarding multi-threaded applications. Invocation of <see cref="M:Dapfor.Net.Ui.IFilter.IsFiltered(Dapfor.Net.Ui.Row)"/> method occurs 
            regularly in the GUI thread, and it should be considered during development of multi-threaded applications. Please note that <see cref="M:Dapfor.Net.Ui.Row.Update"/> method is 
            thread-safe and can be invoked in any thread.</para>
            <para>Data filtration implemented via IFilter interface of non-event-driven model consists in the Row.Update() method call:
            <code>
            public class CustomFilter : IFilter
            {
                public bool IsFiltered(Row row)
                {
                    //There are three ways to get cell's value: 
                    //1. Via Cell.Value property: double value = (double)row["Price"].Value
                    //2. Via IDataAccessor and IDataField: double value = (double) row.DataAccessor["Price"].Value
                    //3. Directly from the data object: double value = (double)((IList)row.DataObject)[2];
            
                    if ((double)row["Price"].Value &lt; 30000)
                    {
                        //Filter the row
                        return true;
                    }
            
                    //The row is not filtered
                    return false;
                }
            
                public event EventHandler&lt;EventArgs&gt; FilterUpdated;
            }
            
            public void FilterUsing(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Name"));
                grid.Headers[0].Add(new Column("Color"));
                grid.Headers[0].Add(new Column("Price"));
            
                //Set filter
                grid.Filter = new CustomFilter();
            
                //Populate the grid
                Row row1 = grid.Rows.Add(new object[] { "Mercedes", Color.Black, 25000d});
                Assert.IsFalse(row1.Visible);
            
                Row row2 = grid.Rows.Add(new object[] { "BMW", Color.White, 35000d });
                Assert.IsTrue(row2.Visible);
            
                //Set a new price for "Mercedes"
                row1["Price"].Value = 32000d;
                Assert.IsTrue(row1.Visible);
            }
            </code>
            </para>
            
            
            </para>
            
            <para><br/><b>Cell highlighting</b><br/>
            <para>.Net Grid provides an extremely convenient mechanism of data highlighting. Highlighting is the process of changing background color of a cell for a specified time 
            interval and gradual restoration of the initial color afterwards. Background color of a cell can be changed twice (at the beginning and at the end) or with a little 
            periodicity (about 30 ms)enabling fading effect with gradual transition between the highlight color and the original background color of the cell.</para>
            
            <para>In programming cell highlighting can be achieved by calling <see cref="M:Dapfor.Net.Ui.Cell.Highlight(System.TimeSpan,System.Drawing.Color)"/>. When a programmer calls this method, the grid adds specific information 
            about cell's state into an internal container and launches timers when necessary. The second parameter is the color that may contain alpha-channel enabling mixing of 
            the highlight color and the background color (transparency effect). It's important to mention that the .Net Grid has a very easy to use API that saves programmer's time. 
            Highlighting management and initial parameters are accessible via <see cref="P:Dapfor.Net.Ui.Grid.Highlighting"/> property.
            </para>
            
            </para>
            
            <para><br/><b>Customization and painting</b><br/>
            <para>.Net Grid provides broad functionality of displaying various data grid elements, such as cells, rows, headers and columns. There two ways for data grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via Appearance property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance"/>, <see cref="P:Dapfor.Net.Ui.Header.Appearance"/>, <see cref="P:Dapfor.Net.Ui.Column.Appearance"/>, <see cref="P:Dapfor.Net.Ui.Row.Appearance"/>, <see cref="P:Dapfor.Net.Ui.Cell.Appearance"/>. 
            All information about colors, fonts etc. is stored in memory. Therefore setting of this property is more suitable for <see cref="T:Dapfor.Net.Ui.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. 
            A programmer should not use this property on Rows and Cells, as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell"/>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow"/>, <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader"/> etc.</item>
            </list>
            </para>
            <para>The PaintXXXEventArgs contains the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a data grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in <b>PaintXXXEventArgs</b> and consists of the following: a data grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires Paint event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is used to paint all elements 
            of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of data grid customization. In other words, you may customize 
            any parameters, some painted elements (cell, column) and even use <see cref="T:System.Drawing.Graphics"/> object to manipulate the data grid. Even better, this approach enables you 
            to define a painting sequence. For example, you may perform some default actions and then finish drawing with the Graphics object, or do it vice versa!</para>
            </para>
            
            <para><br/><b>Invalidation</b><br/>
            <para>It is well known that <see cref="N:System.Windows.Forms"/> controls use standard Windows API based on window messages. To repaint a certain part of a control, 
            it should invoke the <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)"/> method, where Rectangle specifies location and size of the client surface that should be repainted. 
            In general, the calculation of screen coordinates of an element is a quite complicated process, especially in a hierarchical data grid. The .Net Grid provides 
            very convenient API to repaint different elements such as cells, rows, columns etc.</para>
            <para>Below you may see a list of elements that can be repainted in the grid:</para>
            <list type="bullet">
            <item><see cref="M:Dapfor.Net.Ui.Cell.Invalidate"/> to repaint of a single cell.</item>
            <item><see cref="M:Dapfor.Net.Ui.Row.Invalidate"/> to repaint of a single row.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.Invalidate"/> to repaint a header. If the header is located in the hierarchical grid (not top-level header), all duplicates in visible surface are repainted.</item>
            <item><see cref="M:Dapfor.Net.Ui.Header.InvalidateRows"/> to repaint all rows in the grid on the same hierarchical level as the header.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.Invalidate"/> to repaint a column title.</item>
            <item><see cref="M:Dapfor.Net.Ui.Column.InvalidateCells"/> to repaint of all cells in the grid that are related to a certain column located on the same hierarchical level as a header.</item>
            </list>
            </para>
            
            <para><br/><b>Tooltips</b><br/>
            <para>Displaying auxiliary information above a grid cell is a typical task. In the .Net Grid this process is considerably simplified. 
            To display a tooltip is is sufficient to set text calling <see cref="P:Dapfor.Net.Ui.Cell.TooltipMessage">Cell.TooltipMessage</see><b> = "some text"</b>. Color management, 
            display time and tooltip location can be set with <see cref="P:Dapfor.Net.Ui.Grid.Tooltips">Grid.Tooltips</see> property. The programmer can control tooltips via .Net Grid notifications.</para>
            </para>
            
            	
            </remarks>
        </member>
        <member name="T:Dapfor.Net.Ui.ToolStripGridHeaderConfigurator">
             <summary>
             Represents a header configurator option displayed on a Grid.HeaderContextMenu
             </summary>
             <code>
             grid.HeaderContextMenu.ItemClicked += delegate(object sender, ToolStripItemClickedEventArgs e)
             {
                 ToolStripGridHeaderConfigurator item = e.ClickedItem as ToolStripGridHeaderConfigurator;
                 Header headerItem = item != null ? item.Header : null;
            
                 //Do something...
             };
             </code>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolStripGridHeaderConfigurator.#ctor(Dapfor.Net.Ui.Header)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Ui.ToolStripGridHeaderConfigurator"/> class.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Dapfor.Net.Ui.ToolStripGridHeaderConfigurator.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.ToolStripItem.Click"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Dapfor.Net.Ui.ToolStripGridHeaderConfigurator.Header">
            <summary>
            Gets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="T:Dapfor.Net.Theming.RoundButtonRenderer">
            <summary>
            Draws the <see cref="T:Dapfor.Net.Ui.RoundButton"/> with the selected style.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Theming.RoundButtonRenderer.#ctor(Dapfor.Net.Ui.RoundButton.ButtonAppearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Theming.RoundButtonRenderer"/> class.
            </summary>
            <param name="appearance">The appearance.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.RoundButtonRenderer.DrawBackground(Dapfor.Net.Ui.RoundButton,Dapfor.Net.Ui.Appearance,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background.
            </summary>
            <param name="button">The button.</param>
            <param name="appearance">The appearance.</param>
            <param name="graphics">The graphics.</param>
            <param name="clipRc">The clip rc.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.RoundButtonRenderer.DrawImage(Dapfor.Net.Ui.RoundButton,Dapfor.Net.Ui.Appearance,System.Drawing.Image,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the image.
            </summary>
            <param name="roundButton">The button.</param>
            <param name="appearance">The appearance.</param>
            <param name="image">The image.</param>
            <param name="graphics">The graphics.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.RoundButtonRenderer.DrawText(Dapfor.Net.Ui.RoundButton,Dapfor.Net.Ui.Appearance,System.String,System.Windows.Forms.TextFormatFlags,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the text.
            </summary>
            <param name="roundButton">The button.</param>
            <param name="appearance">The appearance.</param>
            <param name="text">The text.</param>
            <param name="formatFlags">The format flags.</param>
            <param name="graphics">The graphics.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Dapfor.Net.Theming.RoundButtonRenderer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapfor.Net.Theming.RoundButtonRenderer.DrawRoundButtonBackground(Dapfor.Net.Ui.Appearance,System.Boolean,System.Windows.Forms.BorderStyle,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the round button background.
            </summary>
            <param name="appearance">The appearance.</param>
            <param name="drawHot">if set to <c>true</c> if the button is in the hot state.</param>
            <param name="borderStyle">The border style.</param>
            <param name="g2">The graphics.</param>
            <param name="buttonRc">The button bounds.</param>
        </member>
        <member name="P:Dapfor.Net.Theming.RoundButtonRenderer.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="P:Dapfor.Net.Internal.ScrollableLayout.BottomVisibleIndex">
            <summary>
            Gets the last index of the visible.
            </summary>
            <value>The last index of the visible.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.CheckBoxEditor">
            <summary>
            A checkbox editor to edit boolean values in cells. 
            </summary>
            <example> Demonstrates how to declare the <see cref="T:Dapfor.Net.Editors.CheckBoxEditor"/> to edit values in <see cref="T:Dapfor.Net.Ui.Cell"/>s
            <code>
            //Some data object with boolean Properties
            public class Product
            {
                private bool active;
                private bool tradable;
            
                //Declare the CheckBoxEditor for this property. Each Grid will use this editor to edit values in cells
                [Editor(typeof(CheckBoxEditor), typeof(UITypeEditor))]
                public bool Active
                {
                    get { return active; }
                    set { active = value; }
                }
            
                //The CheckBoxEditor may be declared in the Column 
                public bool Tradable
                {
                    get { return tradable; }
                    set { tradable = value; }
                }
            }
            
            //Initialize the grid
            public void AddDataObjectToGrid(Grid grid)
            {
                //Configure the headers
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Active"));
                grid.Headers[0].Add(new Column("Tradable"));
            
                grid.Headers[0]["Active"].Editable = true;
                grid.Headers[0]["Tradable"].Editable = true;
                //Declare the editor only for the current grid
                grid.Headers[0]["Tradable"].Editor = new CheckBoxEditor();
                
                //Add a data object
                grid.Rows.Add(new Product());
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Editors.CheckBoxEditor.GetPaintCellSupported">
            <summary>
            Gets a value, indicating whether this editor supports <see cref="T:Dapfor.Net.Ui.Cell"/> painting.
            </summary>
            <returns>Always <c>true</c></returns>
        </member>
        <member name="M:Dapfor.Net.Editors.CheckBoxEditor.PaintCell(Dapfor.Net.Ui.PaintCellEventArgs)">
            <summary>
            Paints the cell.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.PaintCellEventArgs"/> instance containing the data to paint the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.CheckBoxEditor.EditCell(Dapfor.Net.Editors.IGridEditorService,Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StartEditReason)">
            <summary>
            Edits the cell.
            </summary>
            <param name="service">The service.</param>
            <param name="cell">The cell.</param>
            <param name="reason">The reason, why the editing is started.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.CheckBoxEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/></returns>
        </member>
        <member name="P:Dapfor.Net.Editors.CheckBoxEditor.Navigable">
            <summary>
            Gets a value indicating whether this <see cref="T:Dapfor.Net.Editors.UITypeEditorEx"/> is navigable.
            </summary>
            <value><c>true</c> if navigable; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.PaintBackgroundEventArgs">
            <summary>
            Provides data and methods to paint <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/> background
            </summary>
            <remarks> 
            <para>.Net Grid provides broad functionality of displaying various grid elements, such as cells, rows, headers and columns.</para>
            <para>There two ways for grid customization:
            <list type="bullet">
            <item>Setting specific appearance of the element via <b>Appearance</b> property. For instance, <see cref="P:Dapfor.Net.Ui.Grid.Appearance">Grid.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Header.Appearance">Header.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Column.Appearance">Column.Appearance</see>, <see cref="P:Dapfor.Net.Ui.Row.Appearance">Row.Appearance</see>, 
            <see cref="P:Dapfor.Net.Ui.Cell.Appearance">Cell.Appearance</see>. All information about colors, fonts etc. is stored in memory. Therefore setting of this property is 
            more suitable for <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/>, <see cref="T:Dapfor.Net.Ui.Header"/>, <see cref="T:Dapfor.Net.Ui.Column"/>. A programmer should not use this property on <see cref="T:Dapfor.Net.Ui.Row"/>s and <see cref="T:Dapfor.Net.Ui.Cell"/>s, 
            as it will consume lot of memory.</item>
            <item>Setting specific parameters in the very moment of painting. For most efficient memory usage, this information is stored in memory for only a short period of time. 
            To implement this feature, a programmer should subscribe to a specific event such as <see cref="E:Dapfor.Net.Ui.Grid.PaintCell">Grid.PaintCell</see>, <see cref="E:Dapfor.Net.Ui.Grid.PaintRow">Grid.PaintRow</see>, 
            <see cref="E:Dapfor.Net.Ui.Grid.PaintHeader">Grid.PaintHeader</see> etc.</item>
            </list>
            </para>
            <para>Generally paint arguments contain the following information: 
            <list type="bullet">
            <item>Full and clipped sizes of the painted element</item>
            <item>Graphics object</item>
            <item>Colors and parameters used for elemebt painting (they can be altered)</item>
            <item>Methods for painting every single part of an element (for a Cell there are methods for painting background, text, selection, focus etc.)</item>
            <item>Painting filter <see cref="T:Dapfor.Net.Ui.PaintPart"/>, which allows to skip a certain part of an element (partial painting)</item>
            <item><b>PaintAll()</b> method that paints all elements defined in the <see cref="T:Dapfor.Net.Ui.PaintPart"/> filter</item>
            <item><b>Handled</b> property that forbids a grid to perform default painting</item>
            </list>
            </para>
            <para>Note that the whole painting process is accumulated in paint arguments object and consists of the following: a grid creates <b>PaintXXXEventArgs</b> object, 
            sets default parameters, fires <b>Grid.PaintXXX</b> event, and if <b>Handled</b> property is set to false, invokes <b>PaintAll()</b> method. This mechanism is 
            used to paint all elements of the .Net Grid cells, rows, columns, headers, hierarchy tree etc.</para>
            
            <para>We have intentionally described the process of painting in details to show broad and rich abilities of grid customization. In other words, you 
            may customize any parameters, some painted elements (cell, column) and even use <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Graphics"/> object to manipulate the grid. Even better, this approach 
            enables you to define a painting sequence. For example, you may perform some default actions and then finish drawing with the <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Graphics"/> object, or do it vice versa!</para>
            
            
            <para>The following example shows how to draw text over <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/></para>
            <code>
            public void InitializeGrid(Grid grid)
            {
                //Add an event handler 
                grid.PaintBackground += delegate(object sender, PaintBackgroundEventArgs e)
                {
                    //Do default painting 
                    e.PaintAll();
                    e.Handled = true;
            
                    //Draw a string in middle of row
                    using (Font font = new Font("Arial", 20, FontStyle.Bold | FontStyle.Italic))
                    using (StringFormat sf = new StringFormat())
                    {
                        sf.LineAlignment = StringAlignment.Center;
                        sf.Alignment = StringAlignment.Center;
                        e.Graphics.DrawString("Dapfor .Net Grid", font, SystemBrushes.GrayText, grid.ClientRectangle, sf);
                    }
                };
            }
            </code>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Ui.PaintBackgroundEventArgs.PaintAll">
            <summary>
            Performs the default painting. 
            </summary>
            <remarks>This method can be called to do the default painting in the <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/>. You can add additional painting and then prevent the <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/>
            from default painting by setting the <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Handled"/> property to <c>true</c>.</remarks>
            <example> Demonstrates how to draw a text behind the <see cref="T:Dapfor.Net.Ui.Row"/>s
            <code>
            public void InitializeGrid(Grid grid)
            {
                //Add event handler for the PaintBackground event 
                grid.PaintBackground += delegate(object sender, PaintBackgroundEventArgs e)
                {
                    //Do default painting 
                    e.PaintAll();
                    e.Handled = true;
            
                    //Draw a string in a middle of the grid behind rows
                    using (Font font = new Font("Arial", 20, FontStyle.Bold | FontStyle.Italic))
                    using (StringFormat sf = new StringFormat())
                    {
                        sf.LineAlignment = StringAlignment.Center;
                        sf.Alignment = StringAlignment.Center;
                        e.Graphics.DrawString("Dapfor .Net Grid", font, SystemBrushes.GrayText, grid.ClientRectangle, sf);
                    }
                };
            }
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.ClipBounds">
            <summary>
            A Rectangle that represents the area of the <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/> that needs to be repainted.
            </summary>
            <value>The clip bounds.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/>.
            </summary>
            <value>The <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Graphics">
            <summary>
            The <see cref="T:System.Drawing.Graphics"/> used to paint the current background.
            </summary>
            <value>The <see cref="T:System.Drawing.Graphics"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Render">
            <summary>
            Gets or sets the <see cref="T:Dapfor.Net.Ui.IRender"/> that performs basic painting operations.
            </summary>
            <value>The <see cref="T:Dapfor.Net.Ui.IRender"/>.</value>
        </member>
        <member name="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the <see cref="P:Dapfor.Net.Ui.PaintBackgroundEventArgs.Grid"/> should continue its own processing.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.NamespaceDoc">
             <summary>
             Set of cell editors.
             </summary>
             <remarks>
             .Net Grid supports multiple ways of cell editing. When we were developing this mechanism, we based it on standard editors used in the <see cref="T:System.Windows.Forms.PropertyGrid"/> control.
             <para>There are several types of these editors including controls that can be displayed in a dropdown box or as a modal dialog. Such editors enable users 
             to edit text, colors and enumerations and to perform painting in small rectangles inside cells. There are plenty of predefined editors. For example, you can get the color 
             editor as follows: 
             <code>
             UITypeEditor editor = (UITypeEditor)TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor));
             </code>
             </para>
             <para>To edit values, these editors use the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)">UITypeEditor.EditValue(...)</see> method. 
             Within this method a mandatory control is created and placed in the dropdown box. You should note a very important detail the return from the function 
             <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">UITypeEditor.EditValue(...)</see> occurs only when editing within in the control is 
             completed, which is convenient from the programmer's point of view. Look at this example: 
             <code>
             object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
             {
                 IWindowsFormsEditorService service = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
                 using (SomeControl control = new SomeControl(value))
                 {
                     service.DropDownControl(control);
                     value = control.NewValue;
                 }
                 return value;
             }
             </code>
             </para>
             <para>The .Net Grid fully supports this mechanism and editors of other vendors that can be used in your applications.</para>
             <para>Despite the convenience of this interface, we have concluded that it lacks some functionality. These editors can't be created above the edited cell with its 
             size (for example, slider control). Besides that, they can't be painted in the whole cell just in a small rectangular area. To remediate this, we 
             have created <see cref="T:Dapfor.Net.Editors.UITypeEditorEx"/> a class, derived from <see cref="T:System.Drawing.Design.UITypeEditor"/> that allows to create controls directly above a cell. The process of 
             editing is quite similar to the aforementioned code example.</para>
             <code>
             StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
             {
               using (SomeControl control = new SomeControl(cell))
               {
                 return service.CellEditControl(control, cell.VirtualBounds, reason);
               }
             }
             </code>
             <para>Besides, some editors can be used without creating graphic controls, i.e. a rating editor. It simply draws stars, and when the user clicks on a certain star, this control calculates its relative location and sets a new value. The whole editing code will look as follows: 
             <code>
             StopEditReason EditCell(IGridEditorService service, Cell cell, StartEditReason reason)
             {    
                 //compute a new rating
                 cell.Value = rating ;
                 return StopEditReason.UserStop ;
             }
             </code>
             </para>
            
             Example of an easy drop-down editor where the end-user can click on the push button
             <code>
             public class CustomEditor : UITypeEditor
             {
                 public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
                 {
                     // Uses the IWindowsFormsEditorService to display a drop-down UI in the grid. (See more System.Drawing.Design.UITypeEditor)
                     IWindowsFormsEditorService service = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
             
                     //The result to be returned
                     object result = value;
             
                     //Create some UI control
                     Button button = new Button();
                     button.Click += delegate
                     {
                         //result = ... &lt;new value&gt;
                         service.CloseDropDown();
                     };
                     //Do edit in place in the editor service. If the end user clicks on the button, then the callback will be called.
                     service.DropDownControl(button);
             
                     return result;
                 }
             
                 public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
                 {
                     //The style is drop-down list box
                     return UITypeEditorEditStyle.DropDown;
                 }
             }
             
             
             //Some data object
             public class Car 
             {
                 //Some fields
                 private double price;
                 private double maxSpeed;
                 private Color color;
             
                 //Declaration of the CustomEditor. This declaration is also used by the System.Windows.Forms.PropertyGrid, so your object 
                 //can be edited in the same way in various grids. 
                 [Editor(typeof(CustomEditor), typeof(UITypeEditor))]
                 public double MaxSpeed
                 {
                     get { return maxSpeed; }
                     set { maxSpeed = value; }
                 }
             
                 //The declaration of the Editor can be done in the column
                 public double Price
                 {
                     get { return price; }
                     set { price = value; }
                 }
             
                 //Default color editor is used (System.Drawing.Design.ColorEditor). 
                 //This editor is returned by the TypeDescriptor.GetEditor(typeof (Color), typeof (UITypeEditor)) call; 
                 public Color Color
                 {
                     get { return color; }
                     set { color = value; }
                 }
             }
             
             //Initialize the grid
             public void AddDataObjectToGrid(Grid grid)
             {
                 //Configure the headers
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("MaxSpeed"));
                 grid.Headers[0].Add(new Column("Price"));
                 grid.Headers[0].Add(new Column("Color"));
             
                 grid.Headers[0]["MaxSpeed"].Editable = true;
                 grid.Headers[0]["Price"].Editable = true;
                 //Declare the editor only for the current grid
                 grid.Headers[0]["Price"].Editor = new CustomEditor();
                 grid.Headers[0]["Color"].Editable = true;
             
                 //Add a data object
                 grid.Rows.Add(new Car());
             
                 //Edit the cell programmatically
                 grid.Rows[0]["Price"].Edit();
             
                 //...
             }    
             </code>
             </remarks>
        </member>
        <member name="T:Dapfor.Net.Diagnostics.LogMessage">
            <summary>
            Log message.
            </summary>
            <remarks>
            <para><see cref="T:Dapfor.Net.Diagnostics.Logger">.Net Logger</see> is a thread-safe system for storing and representation of various log messages. Besides text messages, programmer 
            can associate with data any object that can carry extended information. For example, it can be a price snapshot, quantity value of a product or a pointer 
            to the product object. When a programmer analyzes a log file, he can not just review messages, but also vizw product characteristics that can be dynamically changed. 
            There are several possibilities of object association:  
            <list type="bullet">
            <item>Creating a hierarchical representation of associated object's properties and its values</item>
            <item>Displaying a list of properties with its values in a popup tooltip</item>
            <item>Transferring an object associated with message to the <see cref="T:Dapfor.Net.Diagnostics.Inspector">.Net Inspector</see> for detailed viewing and editing</item>
            </list>
            <code>
            public enum Way
            {
                Buy,
                Sell,
            }
            
            public sealed class Quote
            {
                private readonly long qty;
                private readonly decimal price;
                private readonly Way way;
            	
                public Quote(long qty, decimal price, Way way)
                {
                    this.qty = qty;
                    this.price = price;
                    this.way = way;
                }
            
                public long Qty
                {
                    get { return qty; }
                }
                public decimal Price
                {
            	    get { return price; }
                }
                public Way Way
                {
                    get { return way; }
                }
            }
            
            Logger.Info("Hey, I just got a new price", new Quote(31911, 41, Way.Buy));
            </code>
            </para>
            <para><b>How much memory does the .Net Logger consume?</b></para>
            <para>The logging system is divided by two parts: </para>
            <list type="bullet">
            <item>The logger that stores a list of messages</item>
            <item>The viewer that displays them</item>
            </list>
            <para>The logging system by itself doesn't consumes a lot of memory. On the average, memory consumption does not exceed 40 bytes per message. In other words, it consumes almost 40 MB for 1 million of lines. Data logging occurs like this: 
            <code>
            Logger.Info("some message");
            </code>
            </para>
            <para>Memory consumption of the Viewer is about 150-160 bytes per message. The maximum quantity of the lines in the grid can be limited via 
            <see cref="P:Dapfor.Net.Diagnostics.LogViewer.MaxRowCount">LogViewer.MaxRowCount</see> = MAX_VALUE. If the MAX_VALUE is exceeded, older messages are not displayed.</para>
            <para>Besides that, memory consumption depends on size and type of object that can be stored together with the log entry. On the average, for simple objects this size equals 30-40 bytes per message. From the practical point of view, when the number of rows is limited to 100,000, memory consumption should not exceed 60-100 MB per 1,000,000 messages.</para>
            </remarks>
        </member>
        <member name="M:Dapfor.Net.Diagnostics.LogMessage.#ctor(System.DateTime,System.Int32,Dapfor.Net.Diagnostics.Severity,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Diagnostics.LogMessage"/> class.
            </summary>
            <param name="dateTime">The local time when the message was created.</param>
            <param name="threadId">The thread in which the message was created.</param>
            <param name="severity">The severity.</param>
            <param name="message">The text message.</param>
            <param name="dataObject">The extended data.</param>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogMessage.DateTime">
            <summary>
            Gets the local time when the message was created.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogMessage.ThreadId">
            <summary>
            Gets the thread in which the message was created.
            </summary>
            <value>The thread id.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogMessage.Severity">
            <summary>
            Gets the <see cref="P:Dapfor.Net.Diagnostics.LogMessage.Severity"/> of the message.
            </summary>
            <value>The severity.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogMessage.Message">
            <summary>
            Gets the text message.
            </summary>
            <value>The text message.</value>
        </member>
        <member name="P:Dapfor.Net.Diagnostics.LogMessage.DataObject">
            <summary>
            Gets the extended data.
            </summary>
            <value>The extended data.</value>
        </member>
        <member name="T:Dapfor.Net.Ui.GridDropMode">
            <summary>
            Indicates how the content should be added to the grid during drag and drop operation.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.GridDropMode.Flat">
            <summary>
            Content is added on the same hierarchical level as the target row.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.GridDropMode.AsChild">
            <summary>
            Content is added as a child of the target row.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Ui.GridDropMode.FlatAndAsChild">
            <summary>
            Content can be added at the same level as the target row, or as its child.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Filters.DateFilter">
            <summary>
            Column filter that matches dates
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.DateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Filters.DateFilter"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.DateFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Filters.DateFilter"/> class with specified pattern.
            </summary>
            <param name="datePattern">The date pattern.</param>
        </member>
        <member name="M:Dapfor.Net.Filters.DateFilter.IsFiltered(Dapfor.Net.Ui.Row)">
            <summary>
            Determines whether the specified <see cref="T:Dapfor.Net.Ui.Row"/> is filtered.
            </summary>
            <param name="row">The row.</param>
            <returns>
            	<c>true</c> if the specified row is filtered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.DateFilter.Reset">
            <summary>
            Resets the filter
            </summary>
        </member>
        <member name="M:Dapfor.Net.Filters.DateFilter.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Filters.DateFilter.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> style.
            </returns>
        </member>
        <member name="E:Dapfor.Net.Filters.DateFilter.FilterUpdated">
            <summary>
            Occurs when filter conditions are changed.
            </summary>
            <remarks>This event is raised to force the <see cref="T:Dapfor.Net.Ui.Grid"/> to verify the state of all inserted <see cref="T:Dapfor.Net.Ui.Row"/>s.</remarks>
            <threadsafety>This event may be raised from any thread. If the <see cref="T:Dapfor.Net.Ui.Grid"/> receives a notification from the non-GUI thread, then it will synchronize
            the calling thread with the GUI thread in the asynchronous way without blocking the calling thread. </threadsafety>
        </member>
        <member name="M:Dapfor.Net.Internal.Helper.SwapRows(System.Collections.ArrayList,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Swaps the items in the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <param name="list">The list where the elements are to be swapped.</param>
            <param name="from">The start position.</param>
            <param name="count1">Number of elements in the first range (from the start position).</param>
            <param name="count2">Number of elements in the second range</param>
            <param name="forward">Value, indicating the relative position of the first and second ranges. 
            If set to <c>true</c> the first range is closer to the head of the list and it be moved after the second range.
            Otherwise the first range will be moved before the second one.</param>
        </member>
        <member name="F:Dapfor.Net.Internal.TextStyle.TextWrapping">
            <summary>
            Text wrapping between lines.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Internal.TextStyle.RightToLeft">
            <summary>
            Text is displayed from right to left.
            </summary>
        </member>
        <member name="F:Dapfor.Net.Internal.TextStyle.VerticalOrientation">
            <summary>
            Text is vertically aligned. 
            </summary>
        </member>
        <member name="T:Dapfor.Net.Data.CompositeFieldAttribute">
            <summary>
            Specifies that the object property is composite.
            </summary>
        </member>
        <member name="T:Dapfor.Net.Data.ThreadSafeBindingList`1">
            <summary>
            Threadsafe implementation of <see cref="T:System.ComponentModel.BindingList`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.ThreadSafeBindingList`1"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.ThreadSafeBindingList`1"/> class.
            </summary>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.#ctor(System.ComponentModel.IBindingList,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.ThreadSafeBindingList`1"/> class.
            </summary>
            <param name="bindingList">The binding list.</param>
            <param name="enableItemChangedEvents">if set to <c>true</c> the collection forwards notifications from <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.</param>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.AddNew">
            <summary>
            Adds a new item to the list.
            </summary>
            <returns>The item added to the list.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.AllowNew"/> is false.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the <see cref="T:System.ComponentModel.PropertyDescriptor"/> to the indexes used for searching.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to add to the indexes used for searching.</param>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor"/> and a <see cref="T:System.ComponentModel.ListSortDirection"/>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to sort by.</param>
            <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"/> values.</param>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to search on.</param>
            <param name="key">The value of the <paramref name="property"/> parameter to search for.</param>
            <returns>
            The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSearching"/> is false.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the <see cref="T:System.ComponentModel.PropertyDescriptor"/> from the indexes used for searching.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to remove from the indexes used for searching.</param>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.RemoveSort">
            <summary>
            Removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false.
            </exception>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.CancelNew(System.Int32)">
            <summary>
            Discards a pending new item from the collection.
            </summary>
            <param name="itemIndex">The index of the item that was previously added to the collection.</param>
        </member>
        <member name="M:Dapfor.Net.Data.ThreadSafeBindingList`1.EndNew(System.Int32)">
            <summary>
            Commits a pending new item to the collection.
            </summary>
            <param name="itemIndex">The index of the item that was previously added to the collection.</param>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <value>The zero-based index of the element to get or set.</value>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.AllowNew">
            <summary>
            Gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"/>.
            </summary>
            <value></value>
            <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.AllowEdit">
            <summary>
            Gets whether you can update items in the list.
            </summary>
            <value></value>
            <returns>true if you can update the items in the list; otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)"/> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>.
            </summary>
            <value></value>
            <returns>true if you can remove items from the list; otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.SupportsChangeNotification">
            <summary>
            Gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event is raised when the list changes or an item in the list changes.
            </summary>
            <value></value>
            <returns>true if a <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event is raised when the list changes or when an item changes; otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.SupportsSearching">
            <summary>
            Gets whether the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"/> method.
            </summary>
            <value></value>
            <returns>true if the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"/> method; otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.SupportsSorting">
            <summary>
            Gets whether the list supports sorting.
            </summary>
            <value></value>
            <returns>true if the list supports sorting; otherwise, false.
            </returns>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.IsSorted">
            <summary>
            Gets whether the items in the list are sorted.
            </summary>
            <value></value>
            <returns>true if <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"/> has been called and <see cref="M:System.ComponentModel.IBindingList.RemoveSort"/> has not been called; otherwise, false.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false.
            </exception>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.SortProperty">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is being used for sorting.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is being used for sorting.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false.
            </exception>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.SortDirection">
            <summary>
            Gets the direction of the sort.
            </summary>
            <value></value>
            <returns>
            One of the <see cref="T:System.ComponentModel.ListSortDirection"/> values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false.
            </exception>
        </member>
        <member name="E:Dapfor.Net.Data.ThreadSafeBindingList`1.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.ThreadSafeBindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
            <summary>
            Gets a value indicating whether the <see cref="T:System.ComponentModel.IRaiseItemChangedEvents"/> object raises <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> events.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.ComponentModel.IRaiseItemChangedEvents"/> object raises <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> events when one of its property values changes; otherwise, false.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Internal.ValueCache.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value Meaning Less than zero This instance is less than obj.
            Zero This instance is equal to obj.
            Greater than zero This instance is greater than obj.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
        </member>
        <member name="M:Dapfor.Net.Internal.TriStateProperty`1.Reset">
            <summary>
            Resets this tri state property to the default state.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Internal.TriStateProperty`1.IsDefault">
            <summary>
            Gets a value indicating whether this tri state property is default.
            </summary>
            <value>
            	<c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Internal.TriStateProperty`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Dapfor.Net.Data.UnboundValueAccessor">
             <summary>
             Collection of <see cref="T:Dapfor.Net.Data.IDataField"/> objects that is populated when <see cref="T:Dapfor.Net.Ui.Grid"/> requires data fields. 
             </summary>
             <remarks>
             This collection doesn't have underlying object. The object of this class can be added via <see cref="M:Dapfor.Net.Ui.RowCollection.Add(Dapfor.Net.Data.IDataAccessor)">Grid.Rows.Add(IDataAccessor dataAccessor)</see> property.
             <code>
             public void AddUnboundRow(Grid grid)
             {
                 //Initialize the header
                 grid.Headers.Add(new Header());
                 grid.Headers[0].Add(new Column("field1"));
                 grid.Headers[0].Add(new Column("field2"));
            
                 //Add an empty line to the grid
                 Row row = grid.Rows.Add(new UnboundValueAccessor());
                 
                 //Set some values to the object
                 row["field1"].Value = 10;
                 row["field2"].Value = true;
            
                 //Add some hierarchy
                 row.Expanded = true;
                 row.Add(new UnboundValueAccessor());
                 row.Add(new UnboundValueAccessor());
             }
             </code>
             </remarks>
        </member>
        <member name="M:Dapfor.Net.Data.UnboundValueAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Data.UnboundValueAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="E:Dapfor.Net.Data.UnboundValueAccessor.FieldChanged">
            <summary>
            Occurs when a <see cref="T:Dapfor.Net.Data.IDataField"/> of the <see cref="T:Dapfor.Net.Data.IDataAccessor"/> is changed.
            </summary>
        </member>
        <member name="P:Dapfor.Net.Data.UnboundValueAccessor.Item(System.String)">
            <summary>
            Gets the <see cref="T:Dapfor.Net.Data.IDataField"/> by the specified string identifier.
            </summary>
            <value>Implementation of the <see cref="T:Dapfor.Net.Data.IDataField"/> interafce</value>
        </member>
        <member name="P:Dapfor.Net.Data.UnboundValueAccessor.Item(System.Int32)">
            <summary>
            The collection can not be indexed. Any call of this method will lead to <see cref="T:System.NotSupportedException"/>
            </summary>
            <value></value>
            <exception cref="T:System.NotSupportedException">Raised at any call</exception>
        </member>
        <member name="P:Dapfor.Net.Data.UnboundValueAccessor.SupportsIdentifiers">
            <summary>
            Gets a value indicating whether the access to the fields of the data object by their field identifier is available.
            </summary>
            <value>
            	Always <c>true</c>.
            </value>
        </member>
        <member name="P:Dapfor.Net.Data.UnboundValueAccessor.SupportsNotifications">
            <summary>
            Gets a value indicating whether this data accessor and underlying data object fire notifications, when the property is changed.
            </summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.UnboundValueAccessor.Count">
            <summary>
            Gets the count of <see cref="T:Dapfor.Net.Data.IDataField"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dapfor.Net.Data.UnboundValueAccessor.DataObject">
            <summary>
            Gets the underlying data object if exists.
            </summary>
            <value>Always <c>null</c>.</value>
        </member>
        <member name="P:Dapfor.Net.Data.UnboundValueAccessor.HierarchicalFields">
            <summary>
            Gets a list of data fields that allows <see cref="T:Dapfor.Net.Ui.Grid"/> to build a hierarchy
            </summary>
            <value>A list of hierarchical fields.</value>
        </member>
        <member name="M:Dapfor.Net.Data.DataObjectTypeDescriptor.#ctor(System.Type,System.Collections.Generic.IEnumerable{Dapfor.Net.Data.DataObjectPropertyDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Data.DataObjectTypeDescriptor"/> class.
            </summary>
            <param name="dataObjectType">Type of the data object.</param>
            <param name="dataFields">The data fields.</param>
            <exception cref="T:System.ArgumentNullException">raised when dataObjectType or dataFields are null</exception>
            <exception cref="T:System.ArgumentException">Raised if dataFields contains two or more fields with the same identifier.</exception>
        </member>
        <member name="T:Dapfor.Net.Formats.EmptyFormatAttribute">
            <summary>
            Attribute to declare the <see cref="T:Dapfor.Net.Formats.EmptyFormat"/> to apply it for values, returning or setting through a property of the data object.
            </summary>
            <example>
            <code>
            //Some data object
            public class Product1
            {
                private double price;
            
                //Declare a EmptyFormat though the EmptyFormatAttribute - All grids by default will use this format.
                [EmptyFormat]
                public double Price
                {
                    get { return price; }
                }
            }
            
            //Other data object
            public class Product2
            {
                private double price;
            
                public double Price
                {
                    get { return price; }
                }
            }
            
            //Populate the grid and set a specified format for the 'Price' column
            public void PopulateGrid(Grid grid)
            {
                //Initialize the grid
                grid.Headers.Add(new Header());
                grid.Headers[0].Add(new Column("Price"));
            
                //Populate the grid. The grid will show the price only for the Product2 object
                grid.Rows.Add(new Product1());
                grid.Rows.Add(new Product2());
            }
            </code>
            </example>
        </member>
        <member name="P:Dapfor.Net.Formats.EmptyFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Dapfor.Net.Editors.UpDownNumericEditor">
            <summary>
            UpDown editor to edit numeric values
            </summary>
            <example>
            <code>
            public void InitializeGrid(Grid grid)
            {
                Column column = grid.Headers[0]["SomeColumn"];
                column.Editor = new UpDownNumericEditor();
            }
            </code>
            </example>
        </member>
        <member name="M:Dapfor.Net.Editors.UpDownNumericEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Editors.UpDownNumericEditor"/> class. The default step equals to 1
            </summary>
        </member>
        <member name="M:Dapfor.Net.Editors.UpDownNumericEditor.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapfor.Net.Editors.UpDownNumericEditor"/> class.
            </summary>
            <param name="step">The step.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.UpDownNumericEditor.GetPaintCellSupported">
            <summary>
            Gets a value, indicating whether this editor supports <see cref="T:Dapfor.Net.Ui.Cell"/> painting.
            </summary>
            <returns>
            	Always <c>true</c>.
            </returns>
        </member>
        <member name="M:Dapfor.Net.Editors.UpDownNumericEditor.PaintCell(Dapfor.Net.Ui.PaintCellEventArgs)">
            <summary>
            Paints the cell.
            </summary>
            <param name="e">The <see cref="T:Dapfor.Net.Ui.PaintCellEventArgs"/> instance containing the data to paint the <see cref="T:Dapfor.Net.Ui.Cell"/>.</param>
        </member>
        <member name="M:Dapfor.Net.Editors.UpDownNumericEditor.EditCell(Dapfor.Net.Editors.IGridEditorService,Dapfor.Net.Ui.Cell,Dapfor.Net.Editors.StartEditReason)">
            <summary>
            Edits the cell.
            </summary>
            <param name="service">The service.</param>
            <param name="cell">The cell.</param>
            <param name="reason">The reason, why the editing is started.</param>
            <returns>The reason, why the editing was stopped.</returns>
        </member>
        <member name="P:Dapfor.Net.Editors.UpDownNumericEditor.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
    </members>
</doc>
